{"version":3,"sources":["nystrum/Screen/constants.js","helper.js","nystrum/Entities/helper.js","nystrum/constants.js","nystrum/message.js","nystrum/actions.js","nystrum/entites.js","nystrum/items.js","nystrum/Keymap/helper.js","nystrum/Keymap/KeyActions/activateDropItem.js","nystrum/Keymap/KeyActions/activateEquipment.js","nystrum/Keymap/KeyActions/activateInventory.js","nystrum/Keymap/KeyActions/activateThrow.js","nystrum/Keymap/KeyActions/walk.js","nystrum/Keymap/KeyActions/addActor.js","nystrum/Keymap/KeyActions/activateFlyingLotus.js","nystrum/statusEffects.js","nystrum/Keymap/KeyActions/drunkenFist.js","nystrum/Characters/RockLee.js","nystrum/Keymap/KeyActions/none.js","nystrum/Keymap/KeyActions/removeWeights.js","nystrum/Keymap/KeyActions/leafWhirlwind.js","nystrum/Keymap/KeyActions/openInnerGate.js","nystrum/Keymap/KeyActions/pickupRandom.js","nystrum/engine.js","nystrum/Display/konvaCustom.js","nystrum/game.js","nystrum/UI/Button.js","nystrum/UI/Information.js","nystrum/UI/Equipment.js","nystrum/UI/Inventory.js","nystrum/UI/Keymap.js","nystrum/UI/Messages.js","nystrum/Screen/Level.js","nystrum/Screen/Title.js","nystrum/Characters/Athel.js","nystrum/Keymap/KeyActions/addBody.js","nystrum/Characters/index.js","nystrum/Nystrum.js","original/lib/helper.js","original/lib/entity.js","original/components/index.js","original/Original.js","App.js","serviceWorker.js","index.js"],"names":["SCREENS","TITLE","LEVEL","delay","timeDelayed","Promise","resolve","setTimeout","getRandomInArray","array","Math","floor","random","length","coordsToString","coords","x","y","calculatePath","game","targetPos","currentPos","topology","map","isPassable","type","astar","ROT","AStar","path","compute","push","slice","calculatePathWithRange","range","getRandomPos","keys","Object","key","split","coordinates","parseInt","text","getDestructableEntities","entites","filter","entity","hasOwnProperty","getGranularity","radius","pow","getPointsOnCircumference","centerX","centerY","r","n","list","i","round","cos","PI","sin","destroyEntity","energy","pos","tile","Helper","entities","e","id","engine","removeStatusEffectByActorId","draw","active","COLORS","TILE_KEY","background","foreground","character","passable","animation","DIRECTIONS","N","NE","W","NW","SW","S","SE","E","NONE","EQUIPMENT_TYPES","HEAD","TORSO","BACK","HAND","FEET","EQUIPMENT_LAYOUTS","human","name","item","CLONE_PATTERNS","verticalLine","x_offset","y_offset","positions","taken","smallSquare","square","bigSquare","circle","PARTICLE_TEMPLATES","default","renderer","color","fail","damage","leaf","PARTICLE_TYPE","directional","ALPHABET","MESSAGE_TYPE","INFORMATION","backgroundColor","ACTION","DANGER","STATUS_EFFECT","Message","uuid","this","Base","actor","energyCost","processDelay","particles","particleTemplate","Constant","onBefore","onAfter","onSuccess","onFailure","interrupt","life","direction","particle","Particle","console","log","success","alternative","AddStatusEffect","effect","args","addStatusEffect","forEach","addParticle","sign","Say","message","addMessage","EquipItemFromContainer","equipmentType","itemInSlot","getItemInSlot","addToContainer","unequip","removeFromContainer","equip","UnequipItem","DropItem","PickupItem","it","DestroySelf","destroy","PlaceActor","canOccupyPosition","addActorAsNext","Move","move","Action","ProjectileMove","damageToSelf","MoveMultiple","stepCount","setNextAction","Shove","shove","Tackle","additionalAttackDamage","attack","Attack","entityTypes","includes","SelfDestructiveAttack","decreaseDurabilityWithoutDefense","MultiTargetAttack","targetPositions","particlePath","particlePos","attackSuccess","ThrowProjectile","move_result","shift","ThrowProjectileGas","CrankEngine","start","Entity","Parent","superclass","children","Engine","concat","isInitialized","child","actors","destroyChild","canAttack","bind","placeActorOnMap","addActor","initialize","Attacking","attackDamage","additional","targets","target","getAttackDamage","equipment","slot","decreaseDurability","Acting","actions","speed","action","value","Rendering","currentFrame","targetTile","newPos","ContainerSlot","itemType","items","Playing","keymap","nextAction","Chasing","targetEntity","Destructable","durability","defense","onDestroy","current","newDurability","getDefense","min","SnakePart","parent","shiftBodyParts","removeBodyPart","pipe","UI_Actor","initiatedBy","Wall","Bandit","RangedBandit","getProjectile","pathToCheck","inPath","throwDirection","projectile","createPath","targetInPath","movePath","SnakePlayer","bodyParts","lastDirection","lastPosition","finalPos","bodyPart","createBodyPart","part","headPosition","index","apple","find","addBodyPart","Player","charge","chargeMax","max","signHistory","container","slots","findIndex","createSlot","splice","slotName","foundSlot","currentGate","gates","damageBuff","speedBuff","durabilityDebuff","nextGate","nextGateIndex","gate","cloneLimit","clones","clone","c","super__destroy","cloneArgs","cloneDeep","destroyClone","arg","attribute","Weapon","DirectionalProjectile","setActorToPrevious","owner_id","isClone","cloneCount","clonePattern","offset","cloneDeepWith","referencePos","step","nextPos","getNextPos","TYPE","directionalKunai","addAlphabeticallyToKeymap","obj","alphabetAllowed","letter","deactivateUIKeymap","visibleUIKey","currentUiActor","currentActor","removeActor","createFourDirectionMoveOptions","moveFunction","label","w","activate","d","a","createEightDirectionMoveOptions","z","q","activateDropItem","visibleInventory","ui","addActorAsPrevious","Escape","keymapDropFromInventory","activateEquipment","visibleEquipment","keymapEquipment","activateInventory","keymapEquipFromInventory","keymapCursorToThrowItem","initialKeymap","kunai","contains","Item","throwDirectionalKunai","walk","newX","newY","banditStats","banditLevels","entityClass","getBanditStats","randomlyPlaceActorOnMap","keymapFlyingLotus","previousKeymap","ENERGY_THRESHOLD","goToPreviousKeymap","flyingLotus","lifespan","stepInterval","allowDuplicates","onStart","onStep","onStop","timeToLive","timeSinceLastStep","drunkWalk","originalDirection","count","Keymap","s","l","k","speedBoost","damageDebuff","StatusEffect","j","h","g","setNextGate","nextGateToLabel","getNextGate","o","u","p","t","kunais","Array","fill","swords","statusEffects","isRunning","gainEnergy","hasEnoughEnergy","getAction","result","perform","acting","timePassed","processActionFX","processStatusEffects","sortActorsByEnergy","processV2","backToTitle","visibleKeymap","updateMode","updateReact","sort","b","newEffect","actorId","removeDeadStatusEffects","actionSuccess","removeActorFromMap","update","removeDeadParticles","process","Display","containerId","width","height","tileWidth","tileHeight","tileGutter","tileOffset","stage","layer","document","getElementById","displayContainer","createElement","appendChild","Konva","Stage","Layer","hitGraphEnabled","add","node","Group","rect","Rect","strokeEnabled","transformsEnabled","perfectDrawEnabled","listening","Text","align","verticalAlign","batchDraw","GAME_MODE_TYPES","WAVE","MAP_WIDTH","MAP_HEIGHT","TILE_WIDTH","TILE_HEIGHT","TILE_OFFSET","Game","tileMap","mapWidth","mapHeight","display","tileKey","mode","data","level","highestLevel","messages","localStorage","getItem","setItem","addWaveEnemy","nextModeLevel","initializeMode","setModeLevel","kill","placed","ac","digger","Digger","freeCells","create","ceil","randomlyPlaceAllActorsOnMap","hasImpassableEntity","callback","parts","tileRenderer","nextFrame","animateTile","animateEntity","processTileMap","createTile","updateTile","frame","isPlaced","placeActorsOnMap","presserRef","createLevel","show","initializeMap","focus","handleKeyPress","event","code","Button","props","onClick","className","Information","React","Component","Equipment","Inventory","inventory","entries","style","borderColor","Messages","Level","ENGINE","selectedCharacter","state","activeTab","createRef","setActiveScreen","newGameState","setState","ref","onKeyDown","tabIndex","reverse","CharacterSelect","characters","setSelectedCharacter","Title","class","disabled","Characters","Athel","RockLee","Nystrum","characterKey","selected","activeScreen","titleScreen","levelScreen","getActiveScreen","transitionName","transitionAppear","transitionEnter","transitionLeave","transitionAppearTimeout","transitionEnterTimeout","transitionLeaveTimeout","DRAW","components","getImpassableEntities","impasse","createEntity","world","sendEvent","eventType","parameters","component","self","MAKE_PASSABLE","MAKE_IMPASSABLE","body","MOVE","canOccupy","destructible","DECREASE_DURABILITY","INCREASE_DURABILITY","DESTROY","PREPARE_RENDER","scheduler","Simple","canAct","fontSize","bg","naruto","reciever","responded","RECIEVE","sender","Components","box","box2","box3","throwable","THROW","nextTile","impassable_and_destructable_entities","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.23269859.chunk.js","sourcesContent":["export const SCREENS = {\n  TITLE: 0,\n  LEVEL: 1,\n}","import * as ROT from 'rot-js';\n\nexport const delay = (timeDelayed = 100) => {\n  return new Promise(resolve => setTimeout(resolve, timeDelayed));\n}\n\nexport const getRandomInArray = (array) => {\n  return array[Math.floor(Math.random() * array.length)];\n}\n\nexport const getRandomInt = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n\nexport const getRandomIntInclusive = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport const coordsAreEqual = (pos_one, pos_two) => pos_one.x === pos_two.x && pos_one.y === pos_two.y\n\nexport const coordsToString = (coords) => `${coords.x},${coords.y}`\n\nexport const calculatePath = (game, targetPos, currentPos, topology = 4) => {\n  let map = game.map\n  let isPassable = function (x, y) {\n    if (map[x + \",\" + y]) {\n      return (map[x + \",\" + y].type === 'GROUND');\n    } else {\n      return false\n    }\n  }\n  let astar = new ROT.Path.AStar(targetPos.x, targetPos.y, isPassable, { topology });\n  let path = [];\n  astar.compute(currentPos.x, currentPos.y, function (x, y) {\n    path.push({ x, y })\n  });\n\n  return path.slice(1);\n}\n\nexport const calculatePathWithRange = (game, targetPos, currentPos, topology, range) => {\n  let path = calculatePath(game, targetPos, currentPos, topology);\n  return path.slice(0, range + 1);\n}\n\nexport const getRandomPos = (map) => {\n  let keys = Object.keys(map);\n  let key = getRandomInArray(keys).split(',');\n  let pos = { x: parseInt(key[0]), y: parseInt(key[1])}\n  return {coordinates: pos, text: key}\n}\n\nexport const getDestructableEntities = (entites) => {\n  return entites.filter((entity) => entity.hasOwnProperty('durability'));\n}\n\nconst getGranularity = (radius) => {\n  let result = (2 / 3) * (Math.pow(radius, 3) - (9 * Math.pow(radius, 2)) + (32 * radius) - 18)\n  return result\n}\n\nexport const getPointsOnCircumference = (centerX = 0, centerY = 0, r = 3) => {\n  const n = getGranularity(r);\n  let list = [];\n  for (let i = 0; i < n; i++) {\n    let x = Math.round(centerX + (Math.cos(2 * Math.PI / n * i) * r))\n    let y = Math.round(centerY + (Math.sin(2 * Math.PI / n * i) * r))\n    list.push({ x, y });\n  }\n  return list\n}\n","import * as Helper from '../../helper';\n\nexport const destroyEntity = (entity) => {\n  entity.energy = 0;\n  if (entity.pos) {\n    let tile = entity.game.map[Helper.coordsToString(entity.pos)];\n    entity.game.map[Helper.coordsToString(entity.pos)].entities = tile.entities.filter((e) => e.id !== entity.id);\n  }\n  // entity.game.engine.actors = entity.game.engine.actors.filter((e) => e.id !== entity.id);\n  entity.game.engine.removeStatusEffectByActorId(entity.id);\n  entity.game.draw()\n  entity.active = false;\n}","import * as Helper from '../helper'\n\nexport const ENERGY_THRESHOLD = 100;\n\nexport const COLORS = {\n  black_1: '#424242',\n  gray_1: '#262d37',\n  gray_2: '#606b79',\n  gray_4: '#B7C3CD',\n  gray_5: '#CED5DD',\n  green_1: '#1d533c',\n  green_2: '#227743',\n  green_3: '#2d9c59',\n  red_4: '#D82D33',\n  red_5: '#E16264',\n  purple_3: '#c45ffd',\n}\n\nexport const TILE_KEY = {\n  'GROUND': {\n    background: COLORS.black_1,\n    foreground: COLORS.gray_2,\n    character: '.',\n    passable: true,\n  },\n  'WALL': {\n    background: COLORS.black_1,\n    foreground: COLORS.gray_2,\n    character: '#',\n    passable: false,\n  },\n  'WATER': {\n    animation: [\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#8aa', character: '▒', passable: false, },\n      { background: '#424242', foreground: '#8aa', character: '▓', passable: false, },\n    ],\n    background: '#9dc3d3',\n    character: '░',\n    passable: false,\n  },\n  'WIN': {\n    background: 'white',\n    foreground: 'black',\n    character: 'W',\n    passable: true,\n  }\n}\n\nexport const HAND_SIGNS = {\n  Power: {\n    type: 'Power',\n    name: 'Rin',\n    description: 'Strength of mind, body, spirit',\n  },\n  Energy: {\n    type: 'Energy',\n    name: 'Pyo',\n    description: 'energy direction',\n  },\n  Harmony: {\n    type: 'Harmony',\n    name: 'To',\n    description: 'one- ness with the universe or self',\n  },\n  Healing: {\n    type: 'Healing',\n    name: 'Sha',\n    description: 'of self and others',\n  },\n  Intuition: {\n    type: 'Intuition',\n    name: 'Kai',\n    description: 'premonition of danger, feeling others intent',\n  },\n  Awareness: {\n    type: 'Awareness',\n    name: 'Jin',\n    description: 'feeling thoughts of others, perhaps hiding your own',\n  },\n  Dimension: {\n    type: 'Dimension',\n    name: 'Retsu',\n    description: 'control of time and space',\n  },\n  Creation: {\n    type: 'Creation',\n    name: 'Zai',\n    description: 'understanding nature',\n  },\n  Absolute: {\n    type: 'Absolute',\n    name: 'Zen',\n    description: 'enlightenment',\n  }, \n}\n\nexport const DIRECTIONS = {\n  N: [0, -1],\n  NE: [1, -1],\n  W: [-1, 0],\n  NW: [-1, -1],\n  SW: [-1, 1],\n  S: [0, 1],\n  SE: [1, 1],\n  E: [1, 0],\n  NONE: [0, 0],\n}\n\nexport const getDirectionKey = (direction) => {\n  let directionString = `${direction}`;\n  let keys = Object.keys(DIRECTIONS);\n  let result = false\n  keys.forEach((key) => {\n    if (`${DIRECTIONS[key]}` === directionString) {\n      result = key\n    }\n  })\n  return result\n}\n\nexport const EQUIPMENT_TYPES = {\n  HEAD: 'HEAD',\n  TORSO: 'TORSO',\n  BACK: 'BACK',\n  HAND: 'HAND',\n  FEET: 'FEET',\n}\n\nexport const EQUIPMENT_LAYOUTS = {\n  human: () => {\n    return [\n      {type: EQUIPMENT_TYPES.HEAD, name: 'head', item: null},\n      {type: EQUIPMENT_TYPES.TORSO, name: 'torso', item: null},\n      {type: EQUIPMENT_TYPES.BACK, name: 'back', item: null},\n      {type: EQUIPMENT_TYPES.HAND, name: 'left_hand', item: null},\n      {type: EQUIPMENT_TYPES.HAND, name: 'right_hand', item: null},\n      {type: EQUIPMENT_TYPES.FEET, name: 'feet', item: null},\n    ]\n  }\n}\n\nexport const CLONE_PATTERNS = {\n  verticalLine: {\n    x_offset: 1,\n    y_offset: 1,\n    positions: [\n      { x: 0, y: 0, taken: false, },\n      { x: 0, y: 1, taken: false, },\n      { x: 0, y: -1, taken: false, },\n    ]\n  },\n  smallSquare: {\n    x_offset: 1,\n    y_offset: 1,\n    positions: [\n      { x: 0, y: 0, taken: false, },\n      { x: 0, y: 1, taken: false, },\n      { x: 1, y: 1, taken: false, },\n      { x: 1, y: 0, taken: false, },\n    ]\n  },\n  square: {\n    x_offset: 2,\n    y_offset: 2,\n    positions: [\n      { x: 0, y: 0, taken: false, },\n      { x: 0, y: 1, taken: false, },\n      { x: 1, y: 1, taken: false, },\n      { x: 1, y: 0, taken: false, },\n      { x: 1, y: -1, taken: false, },\n      { x: 0, y: -1, taken: false, },\n      { x: -1, y: -1, taken: false, },\n      { x: -1, y: 0, taken: false, },\n      { x: -1, y: 1, taken: false, },\n    ]\n  },\n  bigSquare: {\n    x_offset: 2,\n    y_offset: 2,\n    positions: [\n      { x: 0, y: 0, taken: false, },\n      { x: 0, y: 1, taken: false, },\n      { x: 1, y: 1, taken: false, },\n      { x: 1, y: 0, taken: false, },\n      { x: 1, y: -1, taken: false, },\n      { x: 0, y: -1, taken: false, },\n      { x: -1, y: -1, taken: false, },\n      { x: -1, y: 0, taken: false, },\n      { x: -1, y: 1, taken: false, },\n      { x: 0, y: 1, taken: false, },\n      { x: 2, y: 2, taken: false, },\n      { x: 2, y: 0, taken: false, },\n      { x: 2, y: -2, taken: false, },\n      { x: 0, y: -2, taken: false, },\n      { x: -2, y: -2, taken: false, },\n      { x: -2, y: 0, taken: false, },\n      { x: -2, y: 2, taken: false, },\n    ],\n  },\n  circle: {\n    x_offset: 0,\n    y_offset: 0,\n    positions: [\n      ...Helper.getPointsOnCircumference(0, 0, 2),\n      ...Helper.getPointsOnCircumference(0, 0, 3)\n    ]\n  },\n}\n\nexport const PARTICLE_TEMPLATES = {\n  default: {\n    renderer: {\n      character: '*',\n      color: 'black',\n      background: 'white',\n    }\n  },\n  fail: {\n    renderer: {\n      character: 'x',\n      color: 'black',\n      background: 'red',\n    }\n  },\n  damage: {\n    renderer: {\n      character: '*',\n      color: 'darkred',\n      background: 'red',\n    }\n  },\n  leaf: {\n    renderer: {\n      character: '✤',\n      color: '#36635b',\n      background: '#F0D8C0',\n    }\n  },\n}\n\nexport const PARTICLE_TYPE = {\n  directional: 0,\n  path: 1,\n}\n\nexport const ALPHABET = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];","import { COLORS } from './constants';\nimport uuid from 'uuid/v1';\n\nexport const MESSAGE_TYPE = {\n  INFORMATION: {\n    color: COLORS.gray_4,\n    backgroundColor: COLORS.black_1,\n  },\n  ACTION: {\n    color: COLORS.gray_2,\n    backgroundColor: COLORS.gray_5,\n  },\n  DANGER: {\n    color: COLORS.red_5,\n    backgroundColor: COLORS.black_1,\n  },\n  STATUS_EFFECT: {\n    color: COLORS.purple_3,\n    backgroundColor: COLORS.black_1,\n  },\n}\n\nexport class Message {\n  constructor({ text = '', type = MESSAGE_TYPE.INFORMATION }) {\n    let id = uuid();\n    this.id = id;\n    this.text = text;\n    this.type = type;\n  }\n}","import * as Helper from '../helper';\nimport * as Action from './actions';\nimport * as Constant from './constants';\nimport { cloneDeep } from 'lodash';\nimport uuid from 'uuid/v1';\nimport { Particle } from './entites';\nimport { MESSAGE_TYPE } from './message';\n\nexport class Base {\n  constructor({\n    game, \n    actor, \n    energyCost = 100, \n    processDelay = 50, \n    particles = [], \n    particleTemplate = Constant.PARTICLE_TEMPLATES.default,\n    onBefore = () => null,\n    onAfter = () => null,\n    onSuccess = () => null,\n    onFailure = () => null,\n    interrupt = false,\n  }) {\n    this.actor = actor\n    this.game = game\n    this.energyCost = energyCost\n    this.processDelay = processDelay\n    this.particles = particles\n    this.particleTemplate = particleTemplate\n    this.onBefore = onBefore\n    this.onAfter = onAfter\n    this.onSuccess = onSuccess\n    this.onFailure = onFailure\n    this.interrupt = interrupt\n  }\n\n  addParticle(\n    life, \n    pos, \n    direction, \n    renderer = {...this.particleTemplate.renderer}, \n    type = Constant.PARTICLE_TYPE.directional, \n    path = null\n  ) {\n    let particle = new Particle({\n      game: this.game,\n      name: 'particle',\n      passable: true,\n      life,\n      pos,\n      direction,\n      energy: 100,\n      renderer,\n      type,\n      path,\n    })\n    this.particles.push(particle);\n  }\n\n  removeDeadParticles() {\n    this.particles = this.particles.filter((particle) => particle.life > 0);\n  }\n\n  perform() {\n    console.log(`${this.actor.name} performs`)\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n}\n\nexport class AddStatusEffect extends Base {\n  constructor({ effect, processDelay = 0, ...args }) {\n    super({ ...args });\n    this.effect = effect\n    this.processDelay = processDelay\n  }\n\n  perform() {\n    let success = this.game.engine.addStatusEffect(this.effect);\n    let positions = Helper.getPointsOnCircumference(this.actor.pos.x, this.actor.pos.y, 2);\n    positions.forEach((pos) => {\n      this.addParticle(\n        5, \n        {...pos}, \n        {\n          x: Math.sign(pos.x - this.actor.pos.x), \n          y: Math.sign(pos.y - this.actor.pos.y)\n        },\n      )\n    })\n    if (success) this.actor.energy -= this.energyCost;\n    return {\n      success,\n      alternative: null,\n    }\n  }\n};\n\nexport class Say extends Base {\n  constructor({ message, processDelay = 50, ...args}) {\n    super({...args});\n    this.message = message\n    this.processDelay = processDelay\n  }\n  perform() {\n    this.game.addMessage(`${this.actor.name} says ${this.message}`, MESSAGE_TYPE.INFORMATION);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class SayManyThings extends Base {\n  constructor({ messages, processDelay = 50, ...args}) {\n    super({...args});\n    this.messages = messages\n    this.processDelay = processDelay\n  }\n  perform() {\n    let message = this.messages.shift();\n    if (message) {\n      this.game.addMessage(`${this.actor.name} says ${message}`, MESSAGE_TYPE.INFORMATION);\n      this.actor.energy -= this.energyCost;\n    }\n    if (this.messages.length) {\n      this.actor.setNextAction(this);\n    }\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class EquipItemFromContainer extends Base {\n  // entities can only equip items from their container/inventory\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    if (this.item.equipmentType) {\n      let itemInSlot = this.actor.getItemInSlot(this.item.equipmentType);\n      if (itemInSlot) {\n        this.actor.addToContainer(itemInSlot);\n        this.actor.unequip(itemInSlot);\n      }\n      this.actor.removeFromContainer(this.item);\n      this.actor.equip(this.item.equipmentType, this.item);\n      this.game.addMessage(`${this.actor.name} equips ${this.item.name}.`, MESSAGE_TYPE.ACTION);\n      success = true;\n    }\n\n    this.actor.energy -= this.energyCost;\n    \n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class EquipItemFromTile extends Base {\n  // entities can only equip items from their container/inventory\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n\n  perform () {\n    let success = false;\n    let alternative = null;\n    if (this.item.equipmentType) {\n      let itemInSlot = this.actor.getItemInSlot(this.item.equipmentType);\n      if (itemInSlot) {\n        this.game.map[Helper.coordsToString(this.actor.pos)].entities.push(itemInSlot);\n      }\n\n      let entities = this.game.map[Helper.coordsToString(this.actor.pos)].entities\n      this.game.map[Helper.coordsToString(this.actor.pos)].entities = entities.filter((it) => it.id !== this.item.id);\n      \n      this.actor.equip(this.item);\n      this.game.addMessage(`${this.actor.name} equips ${this.item.name}.`, MESSAGE_TYPE.ACTION);\n      success = true;\n    }\n\n    this.actor.energy -= this.energyCost;\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class UnequipItem extends Base {\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n  perform() {\n    this.game.addMessage(`${this.actor.name} puts ${this.item.name} away.`, MESSAGE_TYPE.ACTION);\n    this.actor.unequip(this.item);\n    this.actor.addToContainer(this.item);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class DropItem extends Base {\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n  perform() {\n    this.game.addMessage(`${this.actor.name} drops ${this.item.name}.`, MESSAGE_TYPE.ACTION);\n    this.actor.removeFromContainer(this.item);\n    this.game.map[Helper.coordsToString(this.actor.pos)].entities.push(this.item);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class PickupItem extends Base {\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n  perform() {\n    this.game.addMessage(`${this.actor.name} picks up ${this.item.name}.`, MESSAGE_TYPE.ACTION);\n    this.actor.addToContainer(this.item);\n    let entities = this.game.map[Helper.coordsToString(this.actor.pos)].entities\n    this.game.map[Helper.coordsToString(this.actor.pos)].entities = entities.filter((it) => it.id !== this.item.id);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class DestroySelf extends Base {\n  constructor({processDelay = 0, ...args}) {\n    super({...args});\n    this.processDelay = processDelay\n  }\n  perform() {\n    // console.log(`${this.actor.name} is self-destructing`);\n    this.actor.energy -= this.energyCost;\n    this.actor.destroy();\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class CloneSelf extends Base {\n  constructor({cloneArgs = [], ...args}) {\n    super({...args});\n    this.cloneArgs = cloneArgs;\n  }\n\n  perform() {\n    let success = false;\n    if (this.actor.createClone(this.cloneArgs)) {\n      success = true;\n      this.actor.energy -= this.energyCost;\n      this.game.addMessage(`${this.actor.name} is cloning itself`, MESSAGE_TYPE.ACTION);\n    }\n    // let clone = cloneDeep(this.actor);\n    // clone.game = this.actor.game;\n    // clone.id = uuid();\n    // this.cloneArgs.forEach((arg) => {\n    //   console.log(arg);\n      \n    //   clone[arg.attribute] = arg.value\n    // });\n    // if (this.game.placeActorOnMap(clone)) {\n    //   this.game.engine.addActorAsNext(clone);\n    //   this.game.draw();\n    //   success = true;\n    // };\n    return {\n      success,\n      alternative: null,\n    }\n  }\n};\n\nexport class Charge extends Base {\n  constructor({chargeAmount, ...args}) {\n    super({...args});\n    this.chargeAmount = chargeAmount;\n  }\n  perform() {\n    this.game.addMessage(`${this.actor.name} is charging up!`, MESSAGE_TYPE.ACTION);\n    this.actor.energy -= this.energyCost;\n    this.actor.increaseCharge(this.chargeAmount);\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class Release extends Base {\n  constructor({ chargeCost, ...args }) {\n    super({ ...args });\n    this.chargeCost = chargeCost;\n  }\n  perform() {\n    let success = false;\n    if (this.actor.charge >= this.chargeCost) {\n      this.game.addMessage(`${this.actor.name} is releasing ${this.chargeCost} volts!`, MESSAGE_TYPE.ACTION);\n      this.actor.energy -= this.energyCost;\n      this.actor.decreaseCharge(this.chargeCost);\n      success = true;\n    }\n    return {\n      success,\n      alternative: null,\n    }\n  }\n};\n\nexport class Sign extends Base {\n  constructor({ sign, ...args }) {\n    super({ ...args });\n    this.sign = sign;\n  }\n  perform() {\n    this.game.addMessage(`${this.actor.name} threw a ${this.sign.name} sign.`, MESSAGE_TYPE.ACTION);\n    this.actor.addSign(this.sign);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class SignRelease extends Base {\n  constructor({requiredSequence = [], ...args}) {\n    super({...args});\n    this.requiredSequence = requiredSequence;\n  }\n\n  requiredSequenceIsFulfilled () {\n    let signHistory = this.actor.signHistory.concat();\n    let relevantHistory = signHistory.slice(\n      Math.max(signHistory.length - this.requiredSequence.length, 0)\n    )\n    let result = JSON.stringify(relevantHistory) === JSON.stringify(this.requiredSequence);\n    return result\n  }\n\n  perform() {\n    let success = false;\n    if (this.requiredSequenceIsFulfilled()) {\n      this.game.addMessage(\n        `${this.actor.name} is releasing the power of ${this.requiredSequence.map(\n          (sign) => sign.type\n        ).join(' and ')}!`,\n        MESSAGE_TYPE.ACTION\n      );\n      this.actor.energy -= this.energyCost;\n      success = true;\n      this.actor.clearSigns();\n    }\n    return {\n      success,\n      alternative: null,\n    }\n  }\n};\n\nexport class CursorMove extends Base {\n  constructor({ targetPos, processDelay = 0, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.processDelay = processDelay\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n\n    if (this.game.cursorCanOccupyPosition(this.targetPos)) {\n      let tile = this.game.map[Helper.coordsToString(this.actor.pos)]\n      this.game.map[Helper.coordsToString(this.actor.pos)] = { ...tile, entities: tile.entities.filter((e) => e.id !== this.actor.id) }\n      this.actor.pos = this.targetPos\n      this.game.map[Helper.coordsToString(this.targetPos)].entities.push(this.actor);\n      success = true;\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class ParticleMove extends CursorMove {\n  constructor({...args}) {\n    super({...args})\n  }\n\n  perform () {\n    this.actor.energy -= this.energyCost;\n    if (this.actor.energy <= 0) {\n      this.actor.destroy();\n      return { success: false }\n    } \n    return super.perform();\n  }\n}\n\nexport class PlaceActor extends Base {\n  constructor({ targetPos, entity, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.entity = entity\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    \n    // let canPlace = true;\n    // if (!this.game.canOccupyPosition(this.targetPos, this.entity)) canPlace = false;\n    // if (this.entity.entityTypes.includes('PARENT')) {\n    //   this.entity.children.forEach((child) => {\n    //     console.log(child.pos);\n        \n    //     if (!this.game.canOccupyPosition(child.pos, child)) canPlace = false;\n    //   })\n    // }\n\n    // if (canPlace) {\n    //   this.entity.pos = this.targetPos;\n    //   this.game.engine.addActorAsPrevious(this.entity);\n    //   this.game.engine.start(); // should this be used outside of engine?\n    //   success = true;      \n    // }\n    if (this.game.canOccupyPosition(this.targetPos, this.entity)) {\n      this.entity.pos = this.targetPos;\n      // this.game.engine.addActorAsPrevious(this.entity);\n      // this.game.engine.addActor(this.entity);\n      this.game.engine.addActorAsNext(this.entity);\n      this.interrupt = true;\n      // this.game.engine.start(); // BUGGED - should this be used outside of engine?\n      success = true;\n    }\n      \n    if (success) {\n      this.actor.energy -= this.energyCost;\n    }\n    \n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class PlaceItem extends Base {\n  constructor({ targetPos, entity, processDelay = 25, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.processDelay = processDelay\n    this.entity = entity\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    \n    if (this.game.canOccupyPosition(this.targetPos, this.entity)) {\n      this.entity.pos = this.targetPos;\n      success = this.game.placeActorOnMap(this.entity)\n    }\n      \n    if (success) {\n      this.actor.energy -= this.energyCost;\n    }\n    \n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class PlaceItems extends PlaceItem {\n  constructor({targetPositions = [], ...args}) {\n    super({...args});\n    this.targetPositions = targetPositions\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    this.targetPositions.forEach((targetPos) => {\n      if (this.game.canOccupyPosition(targetPos, this.entity)) {\n        let clone = cloneDeep(this.entity);\n        clone.game = this.game;\n        clone.id = uuid();\n        clone.pos = targetPos;\n        let placementSuccess = this.game.placeActorOnMap(clone);\n        if (placementSuccess) success = true;\n      }\n    });\n\n    if (success) this.actor.energy -= this.energyCost;\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class Move extends Base {\n  constructor({ targetPos, processDelay = 25, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.processDelay = processDelay\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    let moveSuccess = this.actor.move(this.targetPos);\n    if (moveSuccess) {\n      this.actor.energy -= this.energyCost;\n      success = true;\n    } else {\n      success = true;\n      alternative = new Action.Attack({\n        targetPos: this.targetPos,\n        game: this.game, \n        actor: this.actor, \n        energyCost: Constant.ENERGY_THRESHOLD\n      })\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class ProjectileMove extends Base {\n  constructor({ targetPos, damageToSelf = 1, processDelay = 25, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.processDelay = processDelay\n    this.damageToSelf = damageToSelf\n  }\n\n  perform() {\n    let success = false;\n    let alternative = null;\n    let moveSuccess = this.actor.move(this.targetPos);\n    if (moveSuccess) {\n      this.actor.energy -= this.energyCost;\n      success = true;\n    } else {\n      success = true;\n      alternative = new Action.SelfDestructiveAttack({\n        targetPos: this.targetPos,\n        game: this.game, \n        actor: this.actor, \n        energyCost: Constant.ENERGY_THRESHOLD,\n        damageToSelf: this.damageToSelf,\n      })\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class MoveMultiple extends Base {\n  constructor({ direction, stepCount, processDelay = 25, ...args}) {\n    super({...args});\n    this.direction = direction;\n    this.stepCount = stepCount;\n    this.processDelay = processDelay;\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    let newX = this.actor.pos.x + this.direction[0];\n    let newY = this.actor.pos.y + this.direction[1];\n    let targetPos = { x: newX, y: newY };\n    \n    if (this.stepCount > 0 && this.actor.move(targetPos)) {\n      this.stepCount -= 1;\n      this.actor.energy -= this.energyCost;\n      this.actor.setNextAction(this);\n      success = true;\n    } else {\n      success = true;\n      alternative = new Action.Attack({\n        targetPos: targetPos,\n        game: this.game, \n        actor: this.actor, \n        energyCost: Constant.ENERGY_THRESHOLD\n      })\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class Shove extends Base {\n  constructor({ targetPos, direction, ...args }) {\n    super({ ...args });\n    this.targetPos = targetPos\n    this.direction = direction\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    let moveSuccess = this.actor.shove(this.targetPos, this.direction)\n    \n    if (moveSuccess) {\n      this.actor.energy -= this.energyCost;\n      success = true;\n    } else {\n      success = true;\n      alternative = new Action.Attack({\n        targetPos: this.targetPos,\n        game: this.game,\n        actor: this.actor,\n        energyCost: Constant.ENERGY_THRESHOLD\n      })\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class Tackle extends MoveMultiple {\n  constructor({ direction, stepCount, additionalAttackDamage = 0, processDelay = 25, ...args}) {\n    super({...args});\n    this.direction = direction;\n    this.stepCount = stepCount;\n    this.additionalAttackDamage = additionalAttackDamage;\n    this.processDelay = processDelay;\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    let newX = this.actor.pos.x + this.direction[0];\n    let newY = this.actor.pos.y + this.direction[1];\n    let targetPos = { x: newX, y: newY };\n    \n    if (this.stepCount > 0 && this.actor.shove(targetPos, this.direction)) {\n      this.stepCount -= 1;\n      this.actor.energy -= this.energyCost;\n      this.actor.setNextAction(this);\n      for (let i = 0; i < 3; i++) {\n        this.addParticle(\n          1,\n          {\n            x: this.actor.pos.x - (this.direction[0] * i),\n            y: this.actor.pos.y - (this.direction[1] * i),\n          },\n          { x: 0, y: 0 }\n        )\n      }\n      success = true;\n    } else {\n      success = true;\n      this.actor.attack(targetPos, this.additionalAttackDamage);\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class Attack extends Base {\n  constructor({ targetPos, processDelay = 100, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.processDelay = processDelay\n    this.particleTemplate = Constant.PARTICLE_TEMPLATES.damage\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    \n    if (!this.actor.entityTypes.includes('ATTACKING')) { \n      return { \n        success: true, \n        alternative: new Action.Say({\n          message: `Ooh I don\\'t know how to attack`,\n          game: this.game,\n          actor: this.actor,\n        }),\n      } \n    }\n    \n    success = this.actor.attack(this.targetPos);\n    if (success) {\n      this.addParticle(1, {...this.targetPos}, {x: 0, y:0})\n      this.actor.energy -= this.energyCost;\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class SelfDestructiveAttack extends Attack {\n  constructor({ damageToSelf, ...args }) {\n    super({ ...args });\n    this.damageToSelf = damageToSelf\n    this.onSuccess = () => {\n      console.log('Self destruct success');\n      this.actor.decreaseDurabilityWithoutDefense(damageToSelf)\n    }\n    this.onFailure = () => {\n      console.log('Self destruct fails');\n      this.actor.destroy()\n    }\n  }\n}\n\nexport class MultiTargetAttack extends Base {\n  constructor({ targetPositions, processDelay = 25, ...args }) {\n    super({ ...args });\n    this.targetPositions = targetPositions\n    this.processDelay = processDelay\n  }\n\n  perform() {\n    let success = false;\n    let alternative = null;\n    \n    if (!this.actor.entityTypes.includes('ATTACKING')) {\n      return {\n        success: true,\n        alternative: new Action.Say({\n          message: `Ooh I don\\'t know how to attack`,\n          game: this.game,\n          actor: this.actor,\n        }),\n      }\n    }\n\n    let particlePath = [];\n    let particlePos = { x: this.actor.pos.x, y: this.actor.pos.y };\n    let renderer = this.particleTemplate.renderer;\n    this.targetPositions.forEach((targetPos) => {\n      let attackSuccess = this.actor.attack(targetPos);\n      particlePath.push(targetPos);\n      if (attackSuccess) success = true\n    })\n    this.addParticle(\n      particlePath.length + 1, \n      particlePos, \n      null, \n      renderer, \n      Constant.PARTICLE_TYPE.path, \n      particlePath\n    )\n    \n    if (success) { \n      this.actor.energy -= this.energyCost; \n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class ThrowProjectile extends Move {\n  constructor({ ...args }) {\n    super({ ...args });\n  }\n\n  perform () {\n    let success = false;\n    let alternative = null;\n    this.actor.passable = false;\n    let move_result = super.perform();\n\n    if (move_result.success) {\n      this.actor.path.shift();\n      success = true;\n    }\n    if (this.actor.path.length === 0) {\n      success = true;\n      alternative = new Action.DestroySelf({\n        game: this.game,\n        actor: this.actor,\n        energyCost: Constant.ENERGY_THRESHOLD,\n        processDelay: 0,\n      });\n    }\n    if (move_result.alternative) {\n      let attackSuccess = this.actor.attack(this.targetPos);\n      if (attackSuccess) {\n        alternative = new Action.DestroySelf({\n          game: this.game,\n          actor: this.actor,\n          energyCost: Constant.ENERGY_THRESHOLD,\n          processDelay: 0,\n        });\n      }\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n}\n\nexport class ThrowProjectileGas extends Move {\n  constructor({ ...args }) {\n    super({ ...args });\n    this.processDelay = 0\n  }\n\n  perform () {\n    let success = false;\n    let alternative = null;\n    this.actor.passable = false;\n    let move_result = super.perform();\n    if (move_result.success) {\n      this.actor.path.shift();\n      success = true;\n    } \n    if (this.actor.path.length === 0) {\n      success = true;\n      alternative = new Action.DestroySelf({\n        game: this.game,\n        actor: this.actor,\n        energyCost: Constant.ENERGY_THRESHOLD,\n        processDelay: 0,\n      });\n    }\n    if (move_result.alternative) {\n      this.actor.attack(this.targetPos)\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n}\n\nexport class CrankEngine extends Base {\n  constructor({ engine, ...args }) {\n    super({ ...args });\n    this.engine = engine;\n  }\n  async perform() {\n    let success = true;\n    let alternative = null;\n\n    console.log(`${this.actor.name} is cranking its engine.`);\n    try {\n      await this.engine.start();\n      this.actor.energy -= this.energyCost;\n    } catch (error) {\n      console.log('CrankEngine');\n      console.log(error);\n      alternative = new Action.DestroySelf({\n        game: this.game,\n        actor: this.actor,\n        energyCost: Constant.ENERGY_THRESHOLD,\n      });\n    }\n    \n    return {\n      success,\n      alternative,\n    }\n  }\n};\n","import uuid from 'uuid/v1';\nimport pipe from 'lodash/fp/pipe';\nimport * as Helper from '../helper';\nimport { destroyEntity } from './Entities/helper';\nimport * as Constant from './constants';\nimport * as Action from './actions';\nimport * as Engine from './engine';\nimport { cloneDeep, cloneDeepWith } from 'lodash';\nimport { MESSAGE_TYPE } from './message';\n\nexport class Entity {\n  constructor({ game = null, name = null, passable = false}) {\n    let id = uuid();\n    this.entityTypes = ['Entity']\n    this.id = id;\n    this.name = name;\n    this.game = game;\n    this.passable = passable;\n    this.active = true;\n  }\n}\n\nconst Parent = superclass => class extends superclass {\n  constructor({ children = [], engine = new Engine.CrankEngine({}), ...args }) {\n    super({...args })\n    this.entityTypes = this.entityTypes.concat('PARENT');\n    this.children = children;\n    this.engine = engine;\n    this.isInitialized = false;\n  }\n\n  destroyChild(child) {\n    child.energy = 0;\n    let tile = this.game.map[Helper.coordsToString(child.pos)];\n    this.game.map[Helper.coordsToString(child.pos)].entities = tile.entities.filter((e) => e.id !== child.id);\n    this.engine.actors = this.engine.actors.filter((e) => e.id !== child.id);\n    this.game.draw()\n  }\n\n  canAttack (entity) {\n    const childIds = this.children.map((child) => child.id); \n    return !childIds.includes(entity.id)\n  }\n  \n  initialize() {\n    this.isInitialized = true;\n    this.engine.game = this.game;\n    this.engine.actors = this.children;\n    this.engine.actors.forEach((actor) => {\n      actor.game = this.game;\n      actor.destroy = () => {this.destroyChild(actor)};\n      actor.canAttack = this.canAttack.bind(this);\n      // actor.canAttack = (entity) => {this.canAttack(entity)};\n      this.game.placeActorOnMap(actor)\n      this.engine.addActor(actor);\n      this.game.draw();\n    });\n  }\n\n  getAction(game) {\n    // crank engine one turn\n    if (!this.isInitialized) {\n      this.initialize()\n    }\n\n    let result = new Action.CrankEngine({\n      game,\n      actor: this,\n      engine: this.engine,\n      energyCost: Constant.ENERGY_THRESHOLD,\n      processDelay: 10\n    });\n\n    return result;\n  }\n\n}\n\nconst HasInnerGates = superclass => class extends superclass {\n  constructor({ currentGate = null, gates = [], ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('HAS_INNER_GATES');\n    this.currentGate = currentGate;\n    this.gates = [\n      {\n        name: 'Gate of Opening',\n        damageBuff: 1,\n        speedBuff: 100,\n        durabilityDebuff: 1,\n        character: '1'\n      },\n      {\n        name: 'Gate of Healing',\n        damageBuff: 1,\n        speedBuff: 100,\n        durabilityDebuff: 1,\n        character: '2'\n      },\n      {\n        name: 'Gate of Life',\n        damageBuff: 1,\n        speedBuff: 100,\n        durabilityDebuff: 1,\n        character: '3'\n      },\n      {\n        name: 'Gate of Pain',\n        damageBuff: 1,\n        speedBuff: 100,\n        durabilityDebuff: 1,\n        character: '4'\n      },\n      {\n        name: 'Gate of Limit',\n        damageBuff: 1,\n        speedBuff: 100,\n        durabilityDebuff: 1,\n        character: '5'\n      },\n    ];\n  }\n\n  setNextGate() {\n    let currentGate = this.currentGate;\n    let nextGate = null;\n    if (!currentGate) {\n      nextGate = this.gates[0];\n      this.currentGate = { ...nextGate };\n    } else {\n      let nextGateIndex = this.gates.findIndex((gate) => currentGate.name === gate.name) + 1;\n      if (this.gates.length > nextGateIndex) {\n        nextGate = this.gates[nextGateIndex];\n        this.currentGate = { ...nextGate };\n      }\n    }\n    return nextGate;\n  }\n\n  getNextGate() {\n    let currentGate = this.currentGate;\n    let nextGate = null;\n    if (!currentGate) {\n      nextGate = this.gates[0];\n    } else {\n      let nextGateIndex = this.gates.findIndex((gate) => currentGate.name === gate.name) + 1;\n      if (this.gates.length > nextGateIndex) {\n        nextGate = this.gates[nextGateIndex];\n      }\n    }\n    return nextGate;\n  }\n}\n\nconst UI = superclass => class extends superclass {\n  constructor({ initiatedBy = null, ...args }) {\n    super({...args })\n    this.entityTypes = this.entityTypes.concat('UI');\n    this.initiatedBy = initiatedBy;\n    this.active = true;\n  }\n\n  hasEnoughEnergy() {\n    return this.active;\n  }\n}\n\nexport const Attacking = superclass => class extends superclass {\n  constructor({attackDamage = 1, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('ATTACKING')\n    this.attackDamage = attackDamage;\n  }\n\n  getAttackDamage (additional = 0) {\n    return this.attackDamage + additional;\n  }\n\n  canAttack (entity) {\n    return true;\n  }\n\n  attack (targetPos, additional = 0) {\n    let success = false;\n    let tile = this.game.map[Helper.coordsToString(targetPos)]\n    if (!tile) { return success }\n    let targets = Helper.getDestructableEntities(tile.entities);\n    if (targets.length > 0) {\n      let target = targets[0];\n      if (this.canAttack(target)) {\n        let damage = this.getAttackDamage(additional);\n        if (this.entityTypes.includes('EQUIPING')) {\n          this.equipment.forEach((slot) => {\n            if (slot.item) {\n              if (slot.item.entityTypes.includes('ATTACKING')) {\n                damage += slot.item.getAttackDamage();\n              }\n            }\n          });\n        }\n        this.game.addMessage(`${this.name} does ${damage} to ${target.name}`, MESSAGE_TYPE.DANGER);\n        target.decreaseDurability(damage);\n        success = true;\n      }\n    }\n\n    return success;\n  }\n}\n\nexport const Equipable = superclass => class extends superclass {\n  constructor({name = 'nameless', equipmentType = Constant.EQUIPMENT_TYPES.HAND, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('EQUIPABLE')\n    this.name = name;\n    this.equipmentType = equipmentType;\n  }\n}\n\nconst Acting = superclass => class extends superclass {\n  constructor({name, actions = [], speed = 100, energy = 0, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('ACTING')\n    this.name = name;\n    this.actions = actions;\n    this.speed = speed;\n    this.energy = speed;\n  }\n\n  getAction() {\n    let action = Helper.getRandomInArray(this.actions)\n    if (action) { return action }\n  }\n\n  gainEnergy(value = this.speed) {\n    this.energy += value;\n  }\n\n  hasEnoughEnergy() {\n    return this.energy > 0;\n  }\n}\n\nconst Rendering = superclass => class extends superclass {\n  constructor({pos = {x: 0, y: 0}, renderer, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('RENDERING')\n    this.pos = pos;\n    this.renderer = {...renderer};\n    this.currentFrame = 0;\n  }\n\n  getPosition () {\n    return this.pos;\n  }\n\n  move (targetPos) {\n    let success = false;\n    if (this.game.canOccupyPosition(targetPos, this)) {\n      let tile = this.game.map[Helper.coordsToString(this.pos)]\n      this.game.map[Helper.coordsToString(this.pos)] = { ...tile, entities: tile.entities.filter((e) => e.id !== this.id) }\n      this.pos = targetPos\n      this.game.map[Helper.coordsToString(targetPos)].entities.push(this);\n      success = true;\n    }\n    return success;\n  }\n\n  shove (targetPos, direction) {\n    let success = false;\n    let targetTile = this.game.map[Helper.coordsToString(targetPos)];\n    if (targetTile) {\n      targetTile.entities.map((entity) => { \n        if (!entity.passable) {\n          let newX = entity.pos.x + direction[0];\n          let newY = entity.pos.y + direction[1];\n          let newPos = { x: newX, y: newY };\n          entity.move(newPos);\n        }\n      });\n    }\n    success = this.move(targetPos);\n    return success;\n  }\n}\n\nexport class ContainerSlot {\n  constructor({ itemType, items }) {\n    this.itemType = itemType;\n    this.items = items;\n  }\n}\n\nconst Containing = superclass => class extends superclass {\n  constructor({container = [], ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('CONTAINING')\n    this.container = container;\n  }\n\n  createSlot (item) {\n    let slot = new ContainerSlot({\n      itemType: item.name,\n      items: [item],\n    });\n    this.container.push(slot)\n  }\n\n  contains (itemType) {\n    let container = this.container;\n    let slots = container.filter((slot) => slot.itemType === itemType);\n    return slots.length > 0 ? slots[0].items[0] : false;\n  }\n\n  addToContainer (item) {\n    const index = this.container.findIndex((slot) => slot.itemType === item.name);\n    if (index >= 0) {\n      this.container[index].items.push(item);\n    } else {\n      this.createSlot(item);\n    }\n  }\n  \n  removeFromContainer (item) {\n    this.container.forEach((slot, index) => {\n      slot.items = slot.items.filter((it) => it.id !== item.id);\n      if (!slot.items.length) this.container.splice(index, 1);\n    });\n  }\n}\n\nconst Equiping = superclass => class extends superclass {\n  constructor({equipment = Constant.EQUIPMENT_LAYOUTS.human(), ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('EQUIPING')\n    this.equipment = equipment;\n  }\n\n  getItemInSlot (slotName) {\n    let openSlots = this.equipment.filter((slot) => {\n      return (slot.item === null && slot.type === slotName)\n    })\n    if (openSlots.length > 0) { return false; }\n    let slot = this.equipment.find((slot) => slot.type === slotName);\n    if (!slot) { return false; }\n    if (!slot.item) { return false; }\n    return slot.item;\n  }\n\n  equip (slotName, item) {\n    let foundSlot = false;\n    this.equipment = this.equipment.map((slot) => {\n      if (!foundSlot && slot.type === slotName && slot.item === null) {\n        slot.item = item;\n        foundSlot = true;\n      }\n      return slot;\n    })\n  }\n  \n  unequip(item) {\n    this.equipment = this.equipment.map((slot) => {\n      if (slot.item) {\n        if (slot.item.id === item.id) {\n          slot.item = null;\n        }\n      }\n      return slot;\n    })\n  }\n}\n\nconst Charging = superclass => class extends superclass {\n  constructor({charge = 10, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('CHARGING')\n    this.charge = charge;\n    this.chargeMax = charge;\n  }\n\n  decreaseCharge(value) {\n    this.charge = Math.max(0, this.charge - value);\n  }\n  \n  increaseCharge(value) {\n    this.charge = Math.min(this.chargeMax, this.charge + value);\n  }\n}\n\nconst Signing = superclass => class extends superclass {\n  constructor({...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('SIGNING')\n    this.signHistory = [];\n  }\n\n  addSign(sign) {\n    if (this.signHistory.length >= 4) {\n      this.signHistory.shift();\n    }\n    this.signHistory.push(sign);\n  }\n  \n  clearSigns() {\n    this.signHistory = [];\n  }\n}\n\nconst Playing = superclass => class extends superclass {\n  constructor({keymap = {}, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('PLAYING')\n    this.nextAction = null;\n    this.keymap = keymap;\n  }\n\n    setNextAction(action) {\n      this.nextAction = action;\n    }\n\n    getAction() {\n      let action = this.nextAction;\n      this.nextAction = null;\n      return action;\n    }\n}\n\nconst Cloning = superclass => class extends superclass {\n  constructor({cloneLimit = 1, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('CLONING')\n    this.cloneLimit = cloneLimit;\n    this.clones = [];\n  }\n  \n  // perhaps clones should have a status effect that leeches parent actor's energy or chakra\n  \n  // status effects should be removed from engine when owner is removed.\n  \n  destroy() {\n    // add function to override self destroy funtion \n    // if this actor dies, clones should be destroyed as well\n    if (this.clones) {\n      this.clones.map((clone) => {\n        destroyEntity(clone)\n      });\n    }\n    destroyEntity(this);\n  }\n\n  destroyClone (id) {\n  // overrides clone destroy function\n  // when clone is destroyed, clone count will change accordingly\n    const index = this.clones.findIndex((c) => c.id == id);\n    if (index >= 0) {\n      this.clones[index].super__destroy();\n      this.clones.splice(index, 1);\n    }\n  }\n\n  createClone (cloneArgs) {\n    if (this.clones.length < this.cloneLimit) {\n      let clone = cloneDeep(this);\n      clone.name += ` Clone ${this.clones.length}`\n      clone.game = this.game;\n      clone.id = uuid();\n      delete clone.clones;\n      clone['super__destroy'] = clone.destroy;\n      clone.destroy = () => { this.destroyClone(clone.id) };\n      cloneArgs.forEach((arg) => {\n        clone[arg.attribute] = arg.value\n      });\n      if (this.game.placeActorOnMap(clone)) {\n        this.game.engine.addActorAsNext(clone);\n        this.game.draw();\n        this.clones.push(clone);\n        return true;\n      };\n    }\n    return false;\n  }\n}\n\nconst Projecting = superclass => class extends superclass {\n  constructor({path = false, targetPos = null ,...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('PROJECTING')\n    this.path = path;\n    this.targetPos = targetPos;\n  }\n\n  createPath (game) {\n    let path = Helper.calculatePath(game, this.targetPos, this.pos, 8);\n    this.path = path;\n  }\n\n  getAction(game) {\n    if (!this.path) {\n      this.createPath(game);\n    }\n    let targetPos = this.path.length > 0 ? this.path[0] : this.pos;\n    let result = new Action.Move({\n      targetPos, \n      game, \n      actor: this, \n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n    if (this.game.canOccupyPosition(targetPos, this)) {\n      this.path.shift();\n    }\n    return result;\n  }\n}\n\nconst DestructiveProjecting = superclass => class extends superclass {\n  constructor({path = false, targetPos = null, attackDamage = 1, range = 3, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('DESTRUCTIVE_PROJECTING')\n    this.path = path;\n    this.targetPos = targetPos;\n    this.attackDamage = attackDamage;\n    this.range = range;\n  }\n\n  createPath (game) {\n    let path = Helper.calculatePathWithRange(game, this.targetPos, this.pos, 8, this.range);\n    this.path = path;\n  }\n\n  getAction (game) {\n    if (!this.path) {\n      this.createPath(game);\n    }\n\n    let targetPos = this.path.length > 0 ? this.path[0] : this.pos;\n    \n    let result = new Action.ThrowProjectile({\n      targetPos, \n      game, \n      actor: this, \n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n\n    return result;\n  }\n}\n\nconst DirectionalProjecting = superclass => class extends superclass {\n  constructor({path = false, direction = {x: 0, y: 0}, attackDamage = 1, range = 3, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('DIRECTIONAL_PROJECTING')\n    this.path = path;\n    this.direction = direction;\n    this.attackDamage = attackDamage;\n    this.range = range;\n  }\n\n  createPath(game) {\n    let path = [];\n    for (let i = 1; i < this.range + 1; i++) {\n      path.push({\n        x: this.pos.x + (this.direction[0] * i),\n        y: this.pos.y + (this.direction[1] * i)\n      })\n    }\n    this.path = path;\n  }\n\n  getAction (game) {\n    let result = null;\n    let newX = this.pos.x + this.direction[0];\n    let newY = this.pos.y + this.direction[1];\n    let targetPos = { x: newX, y: newY };\n    this.passable = false\n    \n    if (this.range > 0) {\n      result = new Action.ProjectileMove({\n        targetPos: targetPos,\n        game: game,\n        actor: this,\n        energyCost: Constant.ENERGY_THRESHOLD,\n        damageToSelf: 1,\n        onSuccess: () => this.range -= 1,\n        onAfter: () => {\n          if (this.energy <= 100) {\n            game.engine.setActorToPrevious();\n          }\n        }\n      })\n    } else {\n      result = new Action.DestroySelf({\n        game: game,\n        actor: this,\n        energyCost: 0\n      })\n    }\n\n    return result;\n  }\n}\n\nconst DirectionalPushing = superclass => class extends superclass {\n  constructor({path = false, direction = {x: 0, y: 0}, range = 3, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('DIRECTIONAL_PUSHING')\n    this.path = path;\n    this.direction = direction;\n    this.range = range;\n  }\n\n  getAction (game) {\n    let result = null;\n    let newX = this.pos.x + this.direction[0];\n    let newY = this.pos.y + this.direction[1];\n    let targetPos = { x: newX, y: newY };\n    this.passable = false\n    \n    if (this.range > 0) {\n      result = new Action.Shove({\n        targetPos: targetPos,\n        direction: this.direction,\n        game: game,\n        actor: this,\n        energyCost: Constant.ENERGY_THRESHOLD,\n        onSuccess: () => this.range -= 1,\n      })\n    } else {\n      result = new Action.DestroySelf({\n        game: game,\n        actor: this,\n        energyCost: 0\n      })\n    }\n\n    return result;\n  }\n}\n\nconst GaseousDestructiveProjecting = superclass => class extends superclass {\n  constructor({owner_id = null, path = false, targetPos = null, attackDamage = 1, range = 3, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('GASEOUS_DESTRUCTIVE_PROJECTING')\n    this.path = path;\n    this.targetPos = targetPos;\n    this.attackDamage = attackDamage;\n    this.range = range;\n    this.owner_id = owner_id;\n  }\n\n  canAttack (entity) {\n    let success = super.canAttack();\n    if (success) {\n      success = this.owner_id === null || (entity.owner_id !== this.owner_id);\n    }\n    return success\n  }\n\n  createPath (game) {\n    let path = Helper.calculatePathWithRange(game, this.targetPos, this.pos, 8, this.range);\n    this.path = path;\n  }\n\n  getAction (game) {\n    if (!this.path) {\n      this.createPath(game);\n    }\n    let targetPos = this.path.length > 0 ? this.path[0] : this.pos;\n    \n    let result = new Action.ThrowProjectileGas({\n      targetPos, \n      game, \n      actor: this, \n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n\n    return result;\n  }\n}\n\nconst Gaseous = superclass => class extends superclass {\n  constructor({\n    isClone = false,\n    cloneCount = 0,\n    clonePattern = Constant.CLONE_PATTERNS.square,\n    ...args\n  }) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('GASEOUS')\n    this.isClone = isClone;\n    this.cloneCount = cloneCount;\n    this.clonePattern = cloneDeep(clonePattern);\n  }\n\n  getAction (game) {\n    let offset = this.clonePattern.positions.find((pos) => !pos.taken);\n    if (!this.isClone && offset) {\n      offset.taken = true\n      let clone = cloneDeepWith(this, (value, key) => {\n        switch (key) {\n          case 'id':\n          case 'game':\n          case 'engine':\n          case 'clones':\n            return null\n            break;\n          default:\n            return undefined\n            break;\n        }\n      });\n      clone.game = game;\n      clone.id = uuid();\n      if (this.hasOwnProperty('pos')) {\n        let referencePos = this.pos\n        clone.pos = {\n          x: referencePos.x + offset.x,\n          y: referencePos.y + offset.y\n        }\n      }\n      if (clone.hasOwnProperty('path')) {\n        clone.path = clone.path.map((pos) => {\n          return {\n            x: pos.x + offset.x,\n            y: pos.y + offset.y\n          }\n        })\n      }\n      clone.isClone = true\n      this.cloneCount += 1\n      game.placeActorOnMap(clone)\n      game.engine.addActor(clone);\n      game.draw();\n    }\n\n    let result = super.getAction(game);\n    return result;\n  }\n}\n\nconst Chasing = superclass => class extends superclass {\n  constructor({targetEntity = null ,...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('CHASING')\n    this.targetEntity = targetEntity;\n  }\n\n  getAction(game) {\n    let path = Helper.calculatePath(game, this.targetEntity.pos, this.pos);\n    let targetPos = path.length > 0 ? path[0] : this.pos;\n\n    let result = new Action.Move({\n      targetPos, \n      game, \n      actor: this, \n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n    return result;\n  }\n}\n\nconst RangedChasing = superclass => class extends superclass {\n  constructor({ targetEntity = null, getProjectile = () => null, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('RANGED_CHASING')\n    this.targetEntity = targetEntity;\n    this.getProjectile = getProjectile;\n  }\n\n  targetInPath (pathToCheck, targetPos) {\n    let inPath = false;\n    pathToCheck.forEach((pos) => {\n      if (pos.x === targetPos.x && pos.y === targetPos.y) {\n        inPath = true;\n      }\n    })\n    return inPath;\n  }\n\n  getAction(game) {\n    let throwDirection = {\n      x: Math.sign(this.targetEntity.pos.x - this.pos.x),\n      y: Math.sign(this.targetEntity.pos.y - this.pos.y),\n    }\n\n    // projectile.initialize()\n    let projectile = this.getProjectile({\n      pos: {\n        x: this.pos.x,\n        y: this.pos.y,\n      },\n      targetPos: { ...this.targetEntity.pos },\n      direction: [throwDirection.x, throwDirection.y],\n      range: 10,\n    });\n\n    // projectile.getPath()\n    projectile.createPath(game);\n    // is target in path\n    const inPath = this.targetInPath(projectile.path, this.targetEntity.pos);\n\n    if (inPath) {\n      // throw\n      if (game.canOccupyPosition(projectile.pos, projectile)) {\n        return new Action.PlaceActor({\n          targetPos: { ...projectile.pos },\n          entity: projectile,\n          game,\n          actor: this,\n          energyCost: Constant.ENERGY_THRESHOLD\n        })\n      }\n      return new Action.Say({\n        message: `I'll get you with this kunai!`,\n        game,\n        actor: this,\n        energyCost: Constant.ENERGY_THRESHOLD\n      })\n    }\n    // if not, select target tile in range of enemy and move\n    let movePath = Helper.calculatePath(game, this.targetEntity.pos, this.pos);\n    let targetPos = movePath.length > 0 ? movePath[0] : this.pos;\n    \n    return new Action.Move({\n      targetPos,\n      game,\n      actor: this,\n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n\n  }\n}\n\nconst Pushing = superclass => class extends superclass {\n  constructor({ path = false, targetPos = null, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('PUSHING')\n    this.path = path;\n    this.targetPos = targetPos;\n  }\n\n  createPath(game) {\n    let path = Helper.calculatePath(game, this.targetPos, this.pos, 8);\n    this.path = path;\n  }\n\n  getAction(game) {\n    if (!this.path) {\n      this.createPath(game);\n    }\n    let targetPos = this.path.length > 0 ? this.path[0] : this.pos;\n    let direction = [\n      targetPos.x - this.pos.x ,\n      targetPos.y - this.pos.y ,\n    ]\n    if (direction[0] === 0 && direction[1] === 0) {\n      return new Action.DestroySelf({\n        game: game,\n        actor: this,\n        energyCost: Constant.ENERGY_THRESHOLD,\n        processDelay: 0,\n      });\n    }\n    let result = new Action.Shove({\n      targetPos,\n      direction,\n      game,\n      actor: this,\n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n    this.path.shift();\n\n    return result;\n  }\n}\n\nconst Destructable = superclass => class extends superclass {\n  constructor({durability = 1, defense = 0 ,onDestroy = () => null, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('DESTRUCTABLE')\n    this.durability = durability;\n    this.defense = defense;\n    this.onDestroy = onDestroy;\n  }\n\n  getDefense () {\n    // add in reducer to get defense stats of all equpiment\n    return this.defense;\n  }\n\n  decreaseDurabilityWithoutDefense (value) {\n    this.durability -= value;\n    if (this.durability <= 0) {\n      this.destroy();\n    }\n  }\n\n  decreaseDurability (value) {\n    const current = this.durability;\n    const newDurability = current - (value - this.getDefense());\n    this.durability = Math.min(current, newDurability);\n    if (this.durability <= 0) {\n      this.destroy();\n    }\n  }\n\n  increaseDurability (value) {\n    this.durability += value\n  }\n\n  destroy () {\n    this.onDestroy();\n    destroyEntity(this);\n  }\n}\n\nconst IsParticle = superclass => class extends superclass {\n  constructor({\n    pos = { x: 1, y: 1 },\n    direction = { x: 0, y: 0 },\n    life = 1,\n    speed = 1,\n    type = Constant.PARTICLE_TYPE.directional,\n    path = null,\n    ...args\n  }) {\n    super({ ...args })\n    this.pos = pos;\n    this.direction = direction;\n    this.life = life;\n    this.speed = speed;\n    this.type = type;\n    this.path = path;\n    this.entityTypes = this.entityTypes.concat('PARTICLE')\n  }\n\n  getNextPos(step) {\n    switch (this.type) {\n      case Constant.PARTICLE_TYPE.directional:\n        return {\n          x: this.pos.x + (this.direction.x * this.speed) * step,\n          y: this.pos.y + (this.direction.y * this.speed) * step,\n        }\n      case Constant.PARTICLE_TYPE.path:\n        const nextPos = this.path.shift();\n        return nextPos ? {...nextPos} : {...this.pos}\n    }\n  }\n\n  update(step) {\n    this.life -= step;\n    if (this.life > 0) {\n      this.pos = this.getNextPos(step);\n    }\n  }\n}\n\nconst Part = pipe(\n  Rendering,\n  Destructable,\n)(Entity);\n\nexport class SnakePart extends Part {\n  constructor({ parent = null, ...args }) {\n    super({ ...args });\n    this.parent = parent;\n  }\n\n  destroy () {\n    this.parent.shiftBodyParts({...this.parent.pos});\n    this.parent.removeBodyPart(this.id);\n    super.destroy();\n  }\n}\n\nconst Snaking = superclass => class extends superclass {\n  constructor({ ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('SNAKING');\n    this.bodyParts = [];\n    this.lastDirection = null;\n  }\n\n  createBodyPart (pos) {\n    let bodyPart = new SnakePart({\n      game: this.game,\n      parent: this,\n      pos,\n      durability: 1,\n      defense: 0,\n      renderer: { ...this.renderer, character: 'a' }\n    });\n    return bodyPart;\n  }\n\n  addBodyPart () {\n    const length = this.bodyParts.length;\n    let lastPosition = null;\n    if (length) {\n      lastPosition = this.bodyParts[length - 1].pos;\n    } else { // we use the head position to start the body\n      lastPosition = this.pos;\n    }\n    const finalPos = {\n      x: lastPosition.x + (this.lastDirection[0] * -1),\n      y: lastPosition.y + (this.lastDirection[1] * -1),\n    };\n    \n    let bodyPart = this.createBodyPart(finalPos);\n    this.bodyParts.push(bodyPart)\n\n    // add to map\n    this.game.map[Helper.coordsToString(finalPos)].entities.push(bodyPart);\n  }\n\n  removeBodyPart (id) {\n    this.bodyParts = this.bodyParts.filter((part) => part.id !== id);\n  }\n\n  shiftBodyParts(headPosition) {\n    for (let index = this.bodyParts.length - 1; index >= 0; index--) {\n      let bodyPart = this.bodyParts[index];\n      let newPos = null;\n      if (index === 0) { //move this body part to last head position\n        newPos = {\n          x: headPosition.x,\n          y: headPosition.y\n        }\n      } else {\n        newPos = {\n          x: this.bodyParts[index - 1].pos.x,\n          y: this.bodyParts[index - 1].pos.y,\n        }\n      }\n      let tile = this.game.map[Helper.coordsToString(bodyPart.pos)]\n      this.game.map[Helper.coordsToString(bodyPart.pos)] = { ...tile, entities: tile.entities.filter((e) => e.id !== bodyPart.id) }\n      bodyPart.pos = { ...newPos }\n      this.game.map[Helper.coordsToString(newPos)].entities.push(bodyPart);\n    }\n  }\n\n  // override render methods\n  move(targetPos) {\n    let success = false;\n    const headPosition = {...this.pos};\n    if (this.game.canOccupyPosition(targetPos, this)) {\n      // set last direction moved\n      const lastDirection = [\n        Math.sign(targetPos.x - this.pos.x),\n        Math.sign(targetPos.y - this.pos.y)\n      ]\n      this.lastDirection = lastDirection\n      let tile = this.game.map[Helper.coordsToString(this.pos)]\n      this.game.map[Helper.coordsToString(this.pos)] = { ...tile, entities: tile.entities.filter((e) => e.id !== this.id) }\n      this.pos = targetPos\n      this.game.map[Helper.coordsToString(targetPos)].entities.push(this);\n\n      let apple = this.game.map[Helper.coordsToString(targetPos)].entities.find((entity) => entity.name === 'Apple')\n      if (apple) {\n        this.addBodyPart();\n        destroyEntity(apple);\n      }\n\n      // since head move was successful, move all body parts starting with the tail\n      this.shiftBodyParts(headPosition);\n\n      success = true;\n    }\n    return success;\n  }\n\n  decreaseDurability (value) {\n    const length = this.bodyParts.length\n    if (length) {\n      let part = this.bodyParts[length - 1];\n      this.removeBodyPart(part.id);\n      destroyEntity(part)\n    } else {\n      super.decreaseDurability(value);\n    }\n  }\n  // override destructable methods\n}\n\nexport const UI_Actor = pipe(\n  Acting, \n  Rendering, \n  Playing, \n  UI\n)(Entity);\n\nexport const Actor = pipe(\n  Acting, \n  Rendering\n)(Entity);\n\nexport const Wall = pipe(\n  Rendering,\n  Destructable,\n)(Entity);\n\nexport const MovingWall = pipe(\n  Acting,\n  Rendering,\n  // Pushing,\n  DirectionalPushing,\n  Destructable,\n)(Entity);\n\nexport const Chaser = pipe(\n  Acting, \n  Rendering, \n  Chasing, \n  Destructable\n)(Entity);\n\nexport const Bandit = pipe(\n  Acting, \n  Rendering, \n  Chasing, \n  Destructable,\n  Attacking,\n)(Entity);\n\nexport const RangedBandit = pipe(\n  Acting, \n  Rendering, \n  RangedChasing, \n  Destructable,\n  Attacking,\n)(Entity);\n\nexport const SnakePlayer = pipe(\n  Acting,\n  Rendering,\n  Attacking,\n  Destructable,\n  Snaking,\n  Playing,\n)(Entity);\n\nexport const Player = pipe(\n  Acting, \n  Rendering, \n  Charging, \n  Signing, \n  Containing, \n  Equiping, \n  Attacking, \n  HasInnerGates,\n  Destructable, \n  Cloning,\n  Playing,\n)(Entity);\n\nexport const Weapon = pipe(\n  Rendering, \n  Equipable, \n  Attacking\n)(Entity);\n\nexport const DestructiveProjectile = pipe(\n  Acting, \n  Rendering, \n  Attacking, \n  DestructiveProjecting, \n  Destructable\n)(Entity);\n\nexport const DirectionalProjectile = pipe(\n  Acting, \n  Rendering, \n  Attacking, \n  DirectionalProjecting, \n  Destructable\n)(Entity);\n\nexport const DestructiveCloudProjectile = pipe(\n  Acting, \n  Rendering, \n  Attacking, \n  GaseousDestructiveProjecting, \n  Destructable, \n  Gaseous\n)(Entity);\n\nexport const DestructiveCloudProjectileV2 = pipe(\n  Acting, \n  Destructable,\n  Parent, \n)(Entity);\n\nexport const Particle = pipe(\n  Acting,\n  Rendering,\n  IsParticle,\n)(Entity);\n\nexport const ParticleEmitter = pipe(\n  Acting, \n  Destructable,\n  Parent, \n)(Entity);","import * as Entity from './entites';\nimport * as Constant from './constants';\nimport * as Helper from '../helper';\n\nexport const TYPE = {\n  KUNAI: 'Kunai',\n  DIRECTIONAL_KUNAI: 'Directional Kunai',\n  SWORD: 'Sword',\n  BARRIER: 'Barrier',\n}\n\nconst createProjectileCloud = ({ \n  engine, \n  actor, \n  targetPos, \n  throwDirection,\n  speed,\n  structureType,\n  createProjectile,\n}) => {\n  let structure = Constant.CLONE_PATTERNS[structureType];\n\n  let children = structure.positions.map((slot) => {\n    let position = {\n      x: actor.pos.x + slot.x + (throwDirection.x * structure.x_offset),\n      y: actor.pos.y + slot.y + (throwDirection.y * structure.y_offset)\n    }\n    \n    let targetPosition = {\n      x: targetPos.x + slot.x,\n      y: targetPos.y + slot.y,\n    }\n\n    return createProjectile(engine, position, targetPosition);\n  })\n\n  return new Entity.DestructiveCloudProjectileV2({\n    game: engine.game,\n    passable: true,\n    speed,\n    children,\n  })\n}\n\nconst createProjectileSingularity = ({ \n  engine, \n  actor, \n  targetPos, \n  speed,\n  structureType,\n  createProjectile,\n}) => {\n  let structure = Constant.CLONE_PATTERNS[structureType];\n\n  let children = structure.positions.map((slot) => {\n    let position = {\n      x: targetPos.x + slot.x + structure.x_offset,\n      y: targetPos.y + slot.y + structure.y_offset\n    }\n\n    let targetPosition = {\n      x: targetPos.x,\n      y: targetPos.y,\n    }\n\n    return createProjectile(engine, position, targetPosition);\n\n  })\n\n  return new Entity.DestructiveCloudProjectileV2({\n    game: engine.game,\n    passable: true,\n    speed,\n    children,\n  })\n}\n\nconst createProjectileBurst = ({ \n  engine, \n  actor, \n  targetPos, \n  speed,\n  structureType,\n  createProjectile,\n}) => {\n  let structure = Constant.CLONE_PATTERNS[structureType];\n\n  let children = structure.positions.map((slot) => {\n    let position = {\n      x: targetPos.x + structure.x_offset,\n      y: targetPos.y + structure.y_offset\n    }\n\n    let targetPosition = {\n      x: targetPos.x + slot.x,\n      y: targetPos.y + slot.y,\n    }\n\n    return createProjectile(engine, position, targetPosition);\n\n  })\n\n  return new Entity.DestructiveCloudProjectileV2({\n    game: engine.game,\n    passable: true,\n    speed,\n    children,\n  })\n}\n\nexport const sandTomb = ({\n  engine,\n  actor,\n  targetPos,\n}) => createProjectileSingularity({\n  engine,\n  actor,\n  targetPos,\n  speed: 100,\n  structureType: 'circle',\n  createProjectile: sandTombPart,\n})\n\nexport const sandBurst = ({\n  engine,\n  actor,\n  targetPos,\n}) => createProjectileBurst({\n  engine,\n  actor,\n  targetPos,\n  speed: 500,\n  structureType: 'circle',\n  createProjectile: sandTombPart,\n})\n\nexport const sandWallPulse = ({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n}) => createProjectileCloud({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n  speed: 500,\n  structureType: 'smallSquare',\n  createProjectile: movingSandWall,\n})\n\nexport const kunaiCloud = ({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n}) => createProjectileCloud({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n  speed: 500,\n  structureType: 'square',\n  createProjectile: kunai,\n})\n\nexport const fireballCloud = ({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n}) => createProjectileCloud({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n  speed: 500,\n  structureType: 'square',\n  createProjectile: fireball,\n})\n\nexport const kunai = (engine, pos, targetPos) => new Entity.DestructiveProjectile({\n  game: engine.game,\n  targetPos,\n  passable: true,\n  pos: { x: pos.x, y: pos.y },\n  renderer: {\n    character: '>',\n    color: 'white',\n    background: '',\n    animation: [\n      { background: '', foreground: 'white', character: '>', },\n      { background: '', foreground: 'white', character: 'v', },\n      { background: '', foreground: 'white', character: '<', },\n      { background: '', foreground: 'white', character: '^', },\n      { background: '', foreground: 'white', character: '>', },\n    ],\n  },\n  name: TYPE.KUNAI,\n  speed: 600,\n  energy: 0,\n  range: 30,\n})\n\nexport const directionalKunai = (engine, pos, direction, range) => new Entity.DirectionalProjectile({\n  game: engine.game,\n  direction,\n  passable: true,\n  pos: { x: pos.x, y: pos.y },\n  renderer: {\n    character: '>',\n    color: 'white',\n    background: '',\n    animation: [\n      { background: 'lightgrey', foreground: 'grey', character: '>', },\n      { background: 'lightgrey', foreground: 'grey', character: 'v', },\n      { background: 'lightgrey', foreground: 'grey', character: '<', },\n      { background: 'lightgrey', foreground: 'grey', character: '^', },\n      { background: 'lightgrey', foreground: 'grey', character: '>', },\n    ],\n  },\n  name: TYPE.DIRECTIONAL_KUNAI,\n  speed: 600,\n  energy: 0,\n  range,\n})\n\nexport const movingSandWall = (engine, pos, targetPos, range) => new Entity.MovingWall({\n  game: engine.game,\n  passable: false,\n  pos: { x: pos.x, y: pos.y },\n  targetPos,\n  renderer: {\n    // character: '>',\n    character: ']',\n    color: '#A89078',\n    background: '#D8C0A8',\n  },\n  name: TYPE.KUNAI,\n  // name: TYPE.BARRIER,\n  durability: 3,\n  range,\n  speed: 300,\n})\n\nexport const sandShuriken = (engine, pos, direction, range) => new Entity.DirectionalProjectile({\n  game: engine.game,\n  direction,\n  passable: true,\n  pos: { x: pos.x, y: pos.y },\n  renderer: {\n    // character: '>',\n    character: '✦️',\n    color: '#A89078',\n    background: '#D8C0A8',\n  },\n  name: TYPE.DIRECTIONAL_KUNAI,\n  speed: 600,\n  energy: 0,\n  range,\n})\n\nexport const sandTombPart = (engine, pos, targetPos) => new Entity.DestructiveProjectile({\n  game: engine.game,\n  targetPos,\n  passable: true,\n  pos: { x: pos.x, y: pos.y },\n  renderer: {\n    // character: '>',\n    character: '✦️',\n    color: '#A89078',\n    background: '#D8C0A8',\n  },\n  name: TYPE.KUNAI,\n  speed: 600,\n  energy: 0,\n  range: 30,\n})\n\nexport const fireball = (engine, pos, targetPos) => new Entity.DestructiveProjectile({\n  game: engine.game,\n  targetPos,\n  passable: true,\n  pos: { x: pos.x, y: pos.y },\n  renderer: {\n    // character: '>',\n    character: '🔥',\n    color: 'wheat',\n    background: 'tomato',\n  },\n  name: TYPE.KUNAI,\n  speed: 100,\n  energy: 0,\n  range: 30,\n})\n\nexport const fireballGas = (engine, actor, targetPos) => {\n  return new Entity.DestructiveCloudProjectile({\n    game: engine.game,\n    owner_id: actor ? actor.id : null,\n    targetPos,\n    passable: true,\n    pos: actor ? { x: actor.pos.x, y: actor.pos.y } : null,\n    renderer: {\n      // character: '@',\n      character: '🔥',\n      color: 'wheat',\n      background: 'tomato',\n    },\n    name: TYPE.KUNAI,\n    speed: 100,\n    range: 10,\n    clonePattern: Constant.CLONE_PATTERNS.bigSquare,\n    // clonePattern: Constant.CLONE_PATTERNS.square,\n  })\n}\n\nexport const waterball = (engine, actor, targetPos) => new Entity.DestructiveCloudProjectile({\n  game: engine.game,\n  owner_id: actor ? actor.id : null,\n  targetPos,\n  passable: true,\n  pos: actor ? { x: actor.pos.x, y: actor.pos.y } : null,\n  renderer: {\n    // character: '~',\n    character: '🌊',\n    color: 'silver',\n    background: 'lightslategrey',\n  },\n  name: TYPE.KUNAI,\n  speed: 800,\n  range: 10,\n  clonePattern: Constant.CLONE_PATTERNS.bigSquare,\n  // clonePattern: Constant.CLONE_PATTERNS.square,\n})\n\nexport const sword = (engine) => new Entity.Weapon({\n  game: engine.game,\n  name: TYPE.SWORD,\n  passable: true,\n  attackDamage: 1,\n  equipmentType: Constant.EQUIPMENT_TYPES.HAND,\n  renderer: {\n    // character: '|',\n    character: '🗡️',\n    color: 'white',\n    background: '',\n  },\n})\n\nexport const apple = (engine, pos) => new Entity.Wall({\n  game: engine.game,\n  name: 'Apple',\n  passable: true,\n  pos,\n  renderer: {\n    character: 'o',\n    color: 'red',\n    background: 'brown',\n  },\n})\n","import { ALPHABET, DIRECTIONS } from '../constants';\n\nexport const addAlphabeticallyToKeymap = (keymap, obj) => {\n  let alphabetAllowed = ALPHABET.filter((letter) => {\n    return !Object.keys(keymap).includes(letter);\n  });\n  keymap[alphabetAllowed[0]] = obj;\n}\n\nexport const deactivateUIKeymap = (engine, visibleUIKey) => {\n  let currentUiActor = engine.actors[engine.currentActor];\n  engine.game.removeActor(currentUiActor);\n  engine.game[visibleUIKey] = null;\n}\n\nexport const createFourDirectionMoveOptions = (moveFunction, engine, label = 'move') => {\n  return {\n    w: {\n      activate: () => moveFunction(DIRECTIONS.N, engine),\n      label: `${label} N`,\n    },\n    d: {\n      activate: () => moveFunction(DIRECTIONS.E, engine),\n      label: `${label} E`,\n    },\n    x: {\n      activate: () => moveFunction(DIRECTIONS.S, engine),\n      label: `${label} S`,\n    },\n    a: {\n      activate: () => moveFunction(DIRECTIONS.W, engine),\n      label: `${label} W`,\n    },\n  }\n}\n\nexport const createEightDirectionMoveOptions = (moveFunction, engine, label = 'move') => {\n  return {\n    w: {\n      activate: () => moveFunction(DIRECTIONS.N, engine),\n      label: `${label} N`,\n    },\n    e: {\n      activate: () => moveFunction(DIRECTIONS.NE, engine),\n      label: `${label} NE`,\n    },\n    d: {\n      activate: () => moveFunction(DIRECTIONS.E, engine),\n      label: `${label} E`,\n    },\n    c: {\n      activate: () => moveFunction(DIRECTIONS.SE, engine),\n      label: `${label} SE`,\n    },\n    x: {\n      activate: () => moveFunction(DIRECTIONS.S, engine),\n      label: `${label} S`,\n    },\n    z: {\n      activate: () => moveFunction(DIRECTIONS.SW, engine),\n      label: `${label} SW`,\n    },\n    a: {\n      activate: () => moveFunction(DIRECTIONS.W, engine),\n      label: `${label} W`,\n    },\n    q: {\n      activate: () => moveFunction(DIRECTIONS.NW, engine),\n      label: `${label} NW`,\n    },\n  }\n}","import * as Constant from '../../constants';\nimport { UI_Actor } from '../../entites';\nimport { DropItem } from '../../actions';\nimport { addAlphabeticallyToKeymap, deactivateUIKeymap } from '../helper';\n\nconst keymapDropFromInventory = (engine, initiatedBy) => {\n  let keymap = {\n    Escape: {\n      // g: {\n      activate: () => deactivateUIKeymap(engine, 'visibleInventory'),\n      label: 'Close',\n    }\n  };\n\n  initiatedBy.container.map((slot, index) => {\n    const item = slot.items[0];\n    let obj = {\n      activate: null,\n      label: ''\n    }\n    obj['activate'] = () => {\n      console.log(`setting action for ${initiatedBy.name} to drop ${item.name}`);\n      initiatedBy.setNextAction(new DropItem({\n        item,\n        game: engine.game,\n        actor: initiatedBy,\n        energyCost: Constant.ENERGY_THRESHOLD\n      }));\n      deactivateUIKeymap(engine, 'visibleInventory');\n    }\n    obj['label'] = `Drop ${item.name}`;\n    addAlphabeticallyToKeymap(keymap, obj);\n    return true;\n  })\n\n  return keymap;\n}\n\nexport const activateDropItem = (engine) => {\n  let currentActor = engine.actors[engine.currentActor]\n  engine.game.visibleInventory = currentActor.container;\n\n  let ui = new UI_Actor({\n    initiatedBy: currentActor,\n    pos: { ...currentActor.pos },\n    renderer: {\n      character: 'D',\n      color: 'white',\n      background: '',\n    },\n    name: 'Drop',\n    game: engine.game,\n  })\n  engine.addActorAsPrevious(ui);\n  engine.game.placeActorOnMap(ui)\n  engine.game.draw()\n  ui.keymap = keymapDropFromInventory(engine, currentActor);\n}","import { UI_Actor } from '../../entites';\nimport { UnequipItem } from '../../actions';\nimport { addAlphabeticallyToKeymap, deactivateUIKeymap } from '../helper';\n\nconst keymapEquipment = (engine, initiatedBy) => {\n  let keymap = {\n    Escape: {\n      activate: () => deactivateUIKeymap(engine, 'visibleEquipment'),\n      label: 'Close',\n    }\n  };\n\n  initiatedBy.equipment.filter((slot) => slot.item).map((slot) => {\n    let obj = {\n      activate: null,\n      label: ''\n    }\n    obj['activate'] = () => {\n      console.log(`setting action for ${initiatedBy.name} to unequip ${slot.item.name}`);\n      initiatedBy.setNextAction(new UnequipItem({\n        item: slot.item,\n        game: engine.game,\n        actor: initiatedBy,\n      }))\n      deactivateUIKeymap(engine, 'visibleEquipment');\n    }\n    obj['label'] = `Unequip ${slot.name}`;\n    addAlphabeticallyToKeymap(keymap, obj);\n    return true;\n  })\n\n  return keymap;\n}\n\nexport const activateEquipment = (engine) => {\n  let currentActor = engine.actors[engine.currentActor]\n  engine.game.visibleEquipment = currentActor.equipment;\n\n  let ui = new UI_Actor({\n    initiatedBy: currentActor,\n    pos: { ...currentActor.pos },\n    renderer: {\n      character: 'E',\n      color: 'white',\n      background: '',\n    },\n    name: 'Equipment',\n    game: engine.game,\n  })\n  engine.addActorAsPrevious(ui);\n  engine.game.placeActorOnMap(ui)\n  engine.game.draw()\n  ui.keymap = keymapEquipment(engine, currentActor);\n}","import { UI_Actor } from '../../entites';\nimport { EquipItemFromContainer } from '../../actions';\nimport { addAlphabeticallyToKeymap, deactivateUIKeymap } from '../helper';\n\nconst keymapEquipFromInventory = (engine, initiatedBy) => {\n  let keymap = {\n    Escape: {\n      activate: () => deactivateUIKeymap(engine, 'visibleInventory'),\n      label: 'Close',\n    }\n  };\n\n  initiatedBy.container.map((slot, index) => {\n    const item = slot.items[0];\n    let obj = {\n      activate: null,\n      label: ''\n    }\n    obj['activate'] = () => {\n      console.log(`setting action for ${initiatedBy.name} to equip ${item.name}`);\n      initiatedBy.setNextAction(new EquipItemFromContainer({\n        item,\n        game: engine.game,\n        actor: initiatedBy,\n      }))\n      deactivateUIKeymap(engine, 'visibleInventory');\n    }\n    obj['label'] = `Equip ${item.name}`;\n    addAlphabeticallyToKeymap(keymap, obj);\n    return true;\n  })\n\n  return keymap;\n}\n\nexport const activateInventory = (engine) => {\n  let currentActor = engine.actors[engine.currentActor]\n  engine.game.visibleInventory = currentActor.container;\n\n  let ui = new UI_Actor({\n    initiatedBy: currentActor,\n    pos: { ...currentActor.pos },\n    renderer: {\n      character: 'I',\n      color: 'white',\n      background: '',\n    },\n    name: 'Inventory',\n    game: engine.game,\n    // keymap: keymapEquipFromInventory(engine, currentActor),\n  })\n  engine.addActorAsPrevious(ui);\n  engine.game.placeActorOnMap(ui)\n  engine.game.draw()\n  ui.keymap = keymapEquipFromInventory(engine, currentActor);\n}","import * as Action from '../../actions';\nimport * as Constant from '../../constants';\nimport * as Item from '../../items';\nimport { UI_Actor } from '../../entites';\nimport { createEightDirectionMoveOptions } from '../helper';\n\nconst throwDirectionalKunai = (direction, engine, actor) => {\n  let kunai = actor.contains(Item.TYPE.DIRECTIONAL_KUNAI);\n  if (kunai) {\n    kunai.game = engine.game;\n    kunai.pos = {\n      x: actor.pos.x,\n      y: actor.pos.y,\n    };\n    kunai.direction = direction;\n    actor.removeFromContainer(kunai);\n    actor.setNextAction(\n      new Action.PlaceActor({\n        targetPos: { ...kunai.pos },\n        entity: kunai,\n        game: engine.game,\n        actor,\n        energyCost: Constant.ENERGY_THRESHOLD\n      })\n    )\n\n  } else {\n    console.log('I have no kunais left');\n  }\n}\n\nconst keymapCursorToThrowItem = (engine, initiatedBy, initialKeymap) => {\n  return {\n    ...createEightDirectionMoveOptions(\n      (direction, engine) => {\n        throwDirectionalKunai(direction, engine, initiatedBy);\n        initiatedBy.keymap = initialKeymap;\n      },\n      engine,\n      'throw',\n    )\n  }\n}\n\nexport const activateThrow = (engine) => {\n  let game = engine.game;\n  let currentActor = engine.actors[game.engine.currentActor]\n  let initialKeymap = currentActor.keymap;\n  currentActor.keymap = keymapCursorToThrowItem(engine, currentActor, initialKeymap);\n}","import { Move } from '../../actions';\nimport * as Constant from '../../constants';\n\nexport const walk = (direction, engine) => {\n  let actor = engine.actors[engine.currentActor];\n  let newX = actor.pos.x + direction[0];\n  let newY = actor.pos.y + direction[1];\n  actor.setNextAction(new Move({\n    targetPos: { x: newX, y: newY },\n    game: engine.game,\n    actor,\n    energyCost: Constant.ENERGY_THRESHOLD\n  }))\n}","import * as Helper from '../../../helper';\nimport { Bandit, RangedBandit } from '../../entites';\nimport * as Item from '../../items';\n\nconst getBanditStats = () => {\n  let banditLevels = [\n    {\n      name: 'Slingshot',\n      renderer: {\n        character: Helper.getRandomInArray(['r']),\n        color: '#ced5dd',\n        background: '',\n      },\n      durability: 1,\n      attackDamage: 1,\n      speed: 100,\n      entityClass: RangedBandit\n    },\n    {\n      name: 'Buckshot',\n      renderer: {\n        character: Helper.getRandomInArray(['r']),\n        color: '#3fc072',\n        background: '',\n      },\n      durability: 2,\n      attackDamage: 1,\n      speed: 200,\n      entityClass: RangedBandit\n    },\n    {\n      name: 'Ross',\n      renderer: {\n        character: Helper.getRandomInArray(['b']),\n        color: '#ced5dd',\n        background: '',\n      },\n      durability: 1,\n      attackDamage: 1,\n      speed: 100,\n      entityClass: Bandit\n    },\n    {\n      name: 'Kevin',\n      renderer: {\n        character: Helper.getRandomInArray(['b']),\n        color: '#3fc072',\n        background: '',\n      },\n      durability: 2,\n      attackDamage: 1,\n      speed: 100,\n      entityClass: Bandit\n    },\n    {\n      name: 'Jacob',\n      renderer: {\n        character: Helper.getRandomInArray(['b']),\n        color: '#67a1d7',\n        background: '',\n      },\n      durability: 3,\n      attackDamage: 1,\n      speed: 100,\n      entityClass: Bandit\n    },\n    {\n      name: 'Jarod',\n      renderer: {\n        character: Helper.getRandomInArray(['b']),\n        color: '#e16264',\n        background: '',\n      },\n      durability: 1,\n      attackDamage: 5,\n      speed: 300,\n      entityClass: Bandit\n    },\n    {\n      name: 'Bigii',\n      renderer: {\n        character: Helper.getRandomInArray(['b']),\n        color: '#9f62e1',\n        background: '',\n      },\n      durability: 15,\n      attackDamage: 10,\n      speed: 100,\n      entityClass: Bandit\n    },\n  ]\n  return Helper.getRandomInArray(banditLevels);\n\n}\n\nexport const addActor = (game) => {\n  let targetEntity = game.engine.actors[game.engine.currentActor]\n  let pos = Helper.getRandomPos(game.map).coordinates\n  const banditStats = getBanditStats();\n  // let actor = new RangedBandit({\n  let actor = new banditStats.entityClass({\n    targetEntity,\n    pos,\n    renderer: banditStats.renderer,\n    name: banditStats.name,\n    game,\n    actions: [],\n    attackDamage: banditStats.attackDamage,\n    durability: banditStats.durability,\n    speed: banditStats.speed,\n    // directional projectile destruction breaks engine\n    getProjectile: ({pos, targetPos, direction, range}) => Item.directionalKunai(game.engine, { ...pos }, direction, range)\n    // getProjectile: ({ pos, targetPos, direction, range }) => Item.kunai(game.engine, { ...pos }, { ...targetPos })\n  })\n  // game.placeActorOnMap(actor)\n  if (game.randomlyPlaceActorOnMap(actor)) {\n    game.engine.addActor(actor);\n    game.draw();\n  };\n}","import { Tackle } from '../../actions';\nimport { ENERGY_THRESHOLD, PARTICLE_TEMPLATES } from '../../constants';\nimport { createFourDirectionMoveOptions } from '../helper';\n\nconst flyingLotus = (direction, stepCount, energyCost, additionalAttackDamage, engine) => {\n  let actor = engine.actors[engine.currentActor];\n  actor.setNextAction(new Tackle({\n    direction,\n    stepCount,\n    game: engine.game,\n    actor,\n    additionalAttackDamage,\n    energyCost,\n    particleTemplate: PARTICLE_TEMPLATES.leaf\n  }))\n}\n\nconst keymapFlyingLotus = (engine, initiatedBy, previousKeymap) => {\n  const energyCost = Math.floor(ENERGY_THRESHOLD / 2);\n  const stepCount = Math.floor(initiatedBy.energy / energyCost) - 1;\n  const additionalAttackDamage = stepCount;\n  const goToPreviousKeymap = () => initiatedBy.keymap = previousKeymap;\n  return {\n    Escape: {\n      activate: goToPreviousKeymap,\n      label: 'Close',\n    },\n    ...createFourDirectionMoveOptions(\n      (direction, engine) => {\n        flyingLotus(direction, stepCount, energyCost, additionalAttackDamage, engine);\n        goToPreviousKeymap();\n      },\n      engine,\n      'activate',\n    ),\n  };\n}\n\nexport const activateFlyingLotus = (engine) => {\n  let currentActor = engine.actors[engine.currentActor]\n  currentActor.keymap = keymapFlyingLotus(engine, currentActor, { ...currentActor.keymap });\n}","export class Base {\n  constructor({ \n    game, \n    actor, \n    name = 'Effect', \n    lifespan = 100,\n    stepInterval = 100,\n    allowDuplicates = true,\n    onStart = () => null,\n    onStep = () => null,\n    onStop = () => null,\n  }) {\n    this.game = game\n    this.actor = actor\n    this.name = name\n    this.lifespan = lifespan\n    this.timeToLive = lifespan\n    this.stepInterval = stepInterval\n    this.allowDuplicates = allowDuplicates\n    this.timeSinceLastStep = 0;\n    this.onStart = onStart\n    this.onStep = onStep\n    this.onStop = onStop\n  }\n}","import { DIRECTIONS, ENERGY_THRESHOLD } from '../../constants';\nimport * as StatusEffect from '../../statusEffects';\nimport { AddStatusEffect, Move } from '../../actions';\nimport { walk } from './walk';\nimport { getRandomInArray } from '../../../helper';\n\nconst drunkWalk = (direction, engine) => {\n  let actor = engine.actors[engine.currentActor];\n  let originalDirection = [...direction];\n  let chance = Math.random();\n  if (chance < 0.5) {\n    console.log('drunk misstep');\n    let count = 100\n    while ((direction[0] === originalDirection[0] && direction[1] === originalDirection[1]) || count < 0) {\n      count -= 1;\n      direction = DIRECTIONS[getRandomInArray(Object.keys(DIRECTIONS))];\n    }\n    console.log(count);\n  }\n\n  let newX = actor.pos.x + direction[0];\n  let newY = actor.pos.y + direction[1];\n  actor.setNextAction(new Move({\n    targetPos: { x: newX, y: newY },\n    game: engine.game,\n    actor,\n    energyCost: ENERGY_THRESHOLD\n  }))\n}\n\nexport const drunkenFist = (engine, damageBuff = 1) => {\n  let currentActor = engine.actors[engine.currentActor];\n\n  let effect = new StatusEffect.Base({\n    game: engine.game,\n    actor: currentActor,\n    name: 'Drunk',\n    lifespan: 1000,\n    stepInterval: 100,\n    allowDuplicates: false,\n    onStart: () => {\n      currentActor.attackDamage += damageBuff;\n      currentActor.renderer.character = '?';\n      console.log(`${currentActor.name} took a sip of sake.`);\n      currentActor.keymap.w = {\n        activate: () => drunkWalk(DIRECTIONS.N, engine),\n        label: 'drunken walk'\n      }\n      currentActor.keymap.a = {\n        activate: () => drunkWalk(DIRECTIONS.W, engine),\n        label: 'drunken walk'\n      }\n      currentActor.keymap.s = {\n        activate: () => drunkWalk(DIRECTIONS.S, engine),\n        label: 'drunken walk'\n      }\n      currentActor.keymap.d = {\n        activate: () => drunkWalk(DIRECTIONS.E, engine),\n        label: 'drunken walk'\n      }\n    },\n    onStop: () => {\n      currentActor.attackDamage -= damageBuff;\n      currentActor.renderer.character = 'R';\n      console.log(`${currentActor.name} recovered from drunkeness.`);\n      currentActor.keymap.w = {\n        activate: () => walk(DIRECTIONS.N, engine),\n        label: 'walk'\n      }\n      currentActor.keymap.a = {\n        activate: () => walk(DIRECTIONS.W, engine),\n        label: 'walk'\n      }\n      currentActor.keymap.s = {\n        activate: () => walk(DIRECTIONS.S, engine),\n        label: 'walk'\n      }\n      currentActor.keymap.d = {\n        activate: () => walk(DIRECTIONS.E, engine),\n        label: 'walk'\n      }\n    },\n  });\n  currentActor.setNextAction(new AddStatusEffect({\n    effect,\n    actor: currentActor,\n    game: engine.game,\n    processDelay: 100,\n    particleTemplate: {\n      renderer: {\n        color: '#c45ffd',\n        background: '#424242',\n        character: '?'\n      }\n    },\n  }));\n}","// import deps\nimport * as Item from '../items';\nimport * as Entity from '../entites';\nimport * as Constant from '../constants';\nimport * as Keymap from '../Keymap';\nimport { createEightDirectionMoveOptions } from '../Keymap/helper';\n\nexport default function (engine) {\n  // define keymap\n  const keymap = (engine) => {\n    return {\n      ...createEightDirectionMoveOptions(Keymap.walk, engine),\n      s: {\n        activate: () => Keymap.none(engine),\n        label: 'stay',\n      },\n      l: {\n        activate: () => Keymap.activateFlyingLotus(engine),\n        label: 'Flying Lotus',\n      },\n      k: {\n        activate: () => Keymap.removeWeights(engine, 200),\n        label: 'Remove wraps',\n      },\n      j: {\n        activate: () => Keymap.drunkenFist(engine),\n        label: 'Sip Sake',\n      },\n      h: {\n        activate: () => Keymap.leafWhirlwind(engine),\n        label: 'Leaf Whirlwind',\n      },\n      g: {\n        activate: () => Keymap.openInnerGate(engine),\n        label: 'Gate of Opening',\n      },\n      i: {\n        activate: () => Keymap.activateInventory(engine),\n        label: 'Open Inventory',\n      },\n      o: {\n        activate: () => Keymap.activateEquipment(engine),\n        label: 'Open Equipment',\n      },\n      u: {\n        activate: () => Keymap.activateDropItem(engine),\n        label: 'Drop Item',\n      },\n      p: {\n        activate: () => Keymap.pickupRandom(engine),\n        label: 'Pickup',\n      },\n      t: {\n        activate: () => Keymap.activateThrow(engine),\n        label: 'Throw',\n      },\n      // DEV KEYS\n      y: {\n        activate: () => Keymap.addActor(engine.game),\n        label: 'Add NPC',\n      },\n    };\n  }\n  // instantiate class\n  let actor = new Entity.Player({\n    pos: { x: 23, y: 7 },\n    renderer: {\n      character: 'R',\n      color: '#e6e6e6',\n      background: '#36635b',\n    },\n    name: 'Rock Lee',\n    actions: [],\n    speed: 400,\n    durability: 20,\n    keymap: keymap(engine),\n  })\n\n  // add default items to container\n  const kunais = Array(100).fill('').map(() => Item.directionalKunai(engine, { ...actor.pos }, null, 10));\n  const swords = Array(2).fill('').map(() => Item.sword(engine));\n  actor.container = [\n    new Entity.ContainerSlot({\n      itemType: kunais[0].name,\n      items: kunais,\n    }),\n    new Entity.ContainerSlot({\n      itemType: swords[0].name,\n      items: swords,\n    }),\n  ]\n\n  return actor;\n}","import { Say } from '../../actions';\nimport * as Constant from '../../constants';\n\nexport const none = (engine) => {\n  let actor = engine.actors[engine.currentActor];\n  actor.setNextAction(new Say({\n    message: 'standing still...',\n    game: engine.game,\n    actor,\n    energyCost: Constant.ENERGY_THRESHOLD\n  }))\n}","import * as StatusEffect from '../../statusEffects';\nimport { AddStatusEffect } from '../../actions';\n\nexport const removeWeights = (engine, speedBoost = 600, damageDebuff = 1) => {\n  let currentActor = engine.actors[engine.currentActor];\n\n  let effect = new StatusEffect.Base({\n    game: engine.game,\n    actor: currentActor,\n    name: 'Removed wraps (weights)',\n    lifespan: 1000,\n    stepInterval: 100,\n    allowDuplicates: false,\n    onStart: () => {\n      currentActor.speed += speedBoost;\n      currentActor.attackDamage = Math.max(0, currentActor.attackDamage - damageDebuff);\n      currentActor.energy += speedBoost;\n      currentActor.renderer.character = '〣'\n      console.log(`${currentActor.name} removed weighted wraps.`);\n    },\n    onStop: () => {\n      currentActor.speed -= speedBoost;\n      currentActor.attackDamage += damageDebuff;\n      currentActor.renderer.character = 'R'\n      console.log(`${currentActor.name} rewrapped weights.`);\n    },\n  });\n  currentActor.setNextAction(new AddStatusEffect({\n    effect,\n    actor: currentActor,\n    game: engine.game,\n    particleTemplate: {\n      renderer: {\n        color: '#424242',\n        background: '#e6e6e6',\n        character: '〣'\n      }\n    }\n  }));\n}","import { MultiTargetAttack} from '../../actions';\nimport { ENERGY_THRESHOLD, PARTICLE_TEMPLATES } from '../../constants';\n\nexport const leafWhirlwind = (engine) => {\n  let actor = engine.actors[engine.currentActor];\n  let targetPositions = [\n    {\n      x: actor.pos.x - 1,\n      y: actor.pos.y,\n    },\n    {\n      x: actor.pos.x - 1,\n      y: actor.pos.y - 1,\n    },\n    {\n      x: actor.pos.x,\n      y: actor.pos.y - 1,\n    },\n    {\n      x: actor.pos.x + 1,\n      y: actor.pos.y - 1,\n    },\n    {\n      x: actor.pos.x + 1,\n      y: actor.pos.y,\n    },\n    {\n      x: actor.pos.x + 1,\n      y: actor.pos.y + 1,\n    },\n    {\n      x: actor.pos.x,\n      y: actor.pos.y + 1,\n    },\n    {\n      x: actor.pos.x - 1,\n      y: actor.pos.y + 1,\n    },\n  ]\n\n  actor.setNextAction(new MultiTargetAttack({\n    targetPositions,\n    game: engine.game,\n    actor,\n    energyCost: (ENERGY_THRESHOLD * 8),\n    particleTemplate: PARTICLE_TEMPLATES.leaf,\n  }))\n}","import * as StatusEffect from '../../statusEffects';\nimport { AddStatusEffect } from '../../actions';\n\nexport const openInnerGate = (engine) => {\n  let currentActor = engine.actors[engine.currentActor];\n  let nextGate = currentActor.setNextGate();\n  if (nextGate) {\n    let effect = new StatusEffect.Base({\n      game: engine.game,\n      actor: currentActor,\n      name: nextGate.name,\n      lifespan: -1,\n      stepInterval: 100,\n      allowDuplicates: false,\n      onStart: () => {\n        currentActor.speed += nextGate.speedBuff;\n        currentActor.energy += nextGate.speedBuff;\n        currentActor.attackDamage += nextGate.damageBuff;\n        currentActor.renderer.character = nextGate.character;\n        console.log(`${currentActor.name} opened the ${nextGate.name}.`);\n        currentActor.decreaseDurability(nextGate.durabilityDebuff);\n        currentActor.decreaseDurability(0);\n        console.log(`${currentActor.name} suffers ${nextGate.durabilityDebuff} damage from physical stress.`)\n        let nextGateToLabel = currentActor.getNextGate();\n        if (nextGateToLabel) {\n          currentActor.keymap.o.label = nextGateToLabel.name;\n        } else {\n          delete currentActor.keymap.g;\n        }\n      },\n    });\n    currentActor.setNextAction(new AddStatusEffect({\n      effect,\n      actor: currentActor,\n      game: engine.game,\n      processDelay: 25,\n      particleTemplate: {\n        renderer: {\n          color: '#3cc2bb',\n          background: '#24fe88',\n          character: '#'\n        }\n      }\n    }));\n  }\n}","import { PickupItem } from '../../actions';\nimport { ENERGY_THRESHOLD } from '../../constants';\nimport { coordsToString, getRandomInArray } from '../../../helper';\n\nexport const pickupRandom = (engine) => {\n  let actor = engine.actors[engine.currentActor];\n  let entities = engine.game.map[coordsToString(actor.pos)].entities.filter((e) => e.id !== actor.id);\n  if (entities.length > 0) {\n    actor.setNextAction(new PickupItem({\n      item: getRandomInArray(entities),\n      game: engine.game,\n      actor,\n      energyCost: ENERGY_THRESHOLD\n    }));\n  }\n  else {\n    console.log('nothing to pickup.');\n  }\n};","import * as Helper from '../helper';\nimport { Particle } from './entites';\nimport { PARTICLE_TEMPLATES } from './constants';\nimport RockLee from './Characters/RockLee';\n\nexport class Engine {\n  constructor({\n    statusEffects = [],\n    actors = [],\n    currentActor = 0,\n    isRunning = false,\n    game = null,\n  }) {\n    this.statusEffects = statusEffects;\n    this.actors = actors;\n    this.currentActor = currentActor;\n    this.isRunning = isRunning;\n    this.game = game;\n  }\n\n  async processV1 () { // a turn-based system using speed and round-robin\n    let actor = this.actors[this.currentActor]\n    actor.gainEnergy(actor.speed);\n    if (actor.hasEnoughEnergy()) {\n      let action = actor.getAction(this.game);\n      if (!action) { return false; } // if no action given, kick out to UI input\n      while (true) {\n        let result = action.perform();\n        this.game.draw();\n        await Helper.delay(action.processDelay);\n        if (!result.success) return false;\n        if (result.alternative === null) break;\n        action = result.alternative;\n      }\n    }\n    this.currentActor = (this.currentActor + 1) % this.actors.length;\n    return true\n  }\n\n  async processV2() { // a turn-based system using speed and Action Points\n    let actor = this.actors[this.currentActor]\n    let acting = true;\n    while (acting) {\n      if (!actor) return false;\n      // if (!actor.active) return false;\n      if (!actor.active) break;\n      let timePassed = 0;\n      if (actor.hasEnoughEnergy()) {\n        // if (!actor.active) break;\n        let action = actor.getAction(this.game);\n        if (!action) { return false; } // if no action given, kick out to UI input\n        timePassed += action.energyCost;\n        while (true) {\n          action.onBefore();\n          let result = await action.perform();\n          if (result.success) {\n            action.onSuccess();\n          } else {\n            action.onFailure();\n          }\n          action.onAfter();\n          if (!await this.processActionFX(action, result.success)) {\n            await Helper.delay(action.processDelay);\n            this.game.draw();\n          }\n          if (!actor.active) break;\n          if (!result.success) return false;\n          if (result.alternative === null) break;\n          action = result.alternative;\n        }\n        this.processStatusEffects(timePassed);\n        if (action.interrupt) {\n          acting = false;\n          break;\n        }\n      } else {\n        actor.gainEnergy(actor.speed);\n        acting = false;\n      }\n    }\n    this.actors = this.actors.filter((actor) => actor.active)\n    this.currentActor += 1;\n    if (this.currentActor >= this.actors.length) {\n      this.currentActor = 0;\n    }\n    return true\n  }\n\n  // a turn-based system using speed and Action Points\n  // it reorders all actors by energy after every round robin\n  async processV3() { \n    let actor = this.actors[this.currentActor]\n    if (!actor) return false;\n    let timePassed = 0;\n    if (actor.hasEnoughEnergy()) {\n      let action = actor.getAction(this.game);\n      if (!action) { return false; } // if no action given, kick out to UI input\n      timePassed += action.energyCost;\n      while (true) {\n        let result = await action.perform();\n        if (!await this.processActionFX(action, result.success)) {\n            await Helper.delay(action.processDelay);\n            this.game.draw();\n        }\n        if (!result.success) return false;\n        if (result.alternative === null) break;\n        action = result.alternative;\n      }\n      this.processStatusEffects(timePassed);\n    } else {\n      actor.gainEnergy(actor.speed);\n    }\n    this.currentActor = (this.currentActor + 1) % this.actors.length;\n    if (this.currentActor === 0) this.sortActorsByEnergy();\n    return true\n  }\n\n  // TODO process that reorders actors after every action\n\n  async start() {\n    this.isRunning = true;\n    while (this.isRunning) {\n      this.isRunning = await this.processV2();\n    }\n    let actor = this.actors[this.currentActor]\n    \n    if (!actor) {\n      this.game.backToTitle();\n      return false;\n    }\n    \n    if (actor.keymap) {\n      this.game.visibleKeymap = actor.keymap;\n    }\n    this.game.updateMode();\n    await this.game.updateReact(this.game);\n  }\n  \n  stop() {\n    this.isRunning = false;\n  }\n\n  sortActorsByEnergy () {\n    this.actors = this.actors.sort((a, b) => b.energy - a.energy);\n    console.log(this.actors);\n  }\n\n  addStatusEffect(newEffect) {\n    if (!newEffect.allowDuplicates) {\n      if (this.statusEffects.filter((effect) => (\n        effect.actor.id === newEffect.actor.id &&\n        effect.name === newEffect.name\n      )).length > 0) {\n        console.log(`${newEffect.name} cannot be applied twice to ${newEffect.actor.name}`);\n        return false;\n      };\n    }\n    newEffect.onStart();\n    this.statusEffects.push(newEffect)\n    return true;\n  }\n\n  removeStatusEffectById (id) {\n    this.statusEffects = this.statusEffects.filter((effect) => {\n      if (effect.id !== id) return true;\n      effect.onStop();\n      return false;\n    });\n  }\n  \n  removeStatusEffectByActorId (actorId) {\n    this.statusEffects = this.statusEffects.filter((effect) => {\n      if (effect.actor.id !== actorId) return true;\n      effect.onStop();\n      return false;\n    });\n  }\n\n  removeDeadStatusEffects() {\n    this.statusEffects = this.statusEffects.filter((effect) =>{\n      if (effect.lifespan >= 0 && effect.timeToLive <= 0) {\n        effect.onStop();\n        return false;\n      }\n      return true;\n    });\n  }\n\n  processStatusEffects (timePassed) {\n    this.statusEffects.forEach((effect) => {\n      effect.timeSinceLastStep += timePassed;\n      effect.timeToLive -= timePassed;\n      if (effect.timeSinceLastStep >= effect.stepInterval) {\n        effect.onStep();\n        effect.timeSinceLastStep = 0;\n      } \n    });\n    this.removeDeadStatusEffects();\n  }\n\n  async processActionFX (action, actionSuccess) {\n    // EASE IN\n    // let time = .8\n    // let nextT = (t) => t *= t; \n    // EASE OUT\n    // let time = .03\n    // let nextT = (t) => t * (2 - t); \n    // EASE IN OUT QUAD\n    // let time = .4\n    // let nextT = (t) => t < .5 ? 2 * t * t : -1 + (4 - 2 * t) * t; \n    // EASE IN CUBIC\n    // let time = .8\n    // let nextT = (t) => t * t * t; \n    // EASE OUT CUBIC\n    // let time = .001\n    // let nextT = (t) => (--t) * t * t + 1; \n    if (!actionSuccess) { \n      // If action is not successful, instead of running action's normal particle animation\n      // we'll show a red X on the entity that initiated the action\n      const particle = new Particle({\n        game: this.game,\n        name: 'particle',\n        passable: true,\n        pos: {...action.actor.pos},\n        renderer: PARTICLE_TEMPLATES.fail.renderer,\n      })\n      this.game.placeActorOnMap(particle);\n      this.game.draw();\n      await Helper.delay(100);\n      this.game.removeActorFromMap(particle);\n      particle.update(1);\n      this.game.draw();\n      action.removeDeadParticles(); // is this needed?\n      return true;\n    }\n\n    if (action.particles.length) {\n      while (action.particles.length > 0) {\n        action.particles.forEach((particle) => {\n          this.game.placeActorOnMap(particle);\n        })\n        this.game.draw();\n        // await Helper.delay(time * 100);\n        // await Helper.delay(time * action.processDelay);\n        await Helper.delay(action.processDelay);\n        action.particles.forEach((particle) => {\n          this.game.removeActorFromMap(particle);\n          particle.update(1);\n\n        })\n        this.game.draw();\n        action.removeDeadParticles();\n        // time = nextT(time);\n      }\n      return true;\n    }\n    return false;\n  }\n\n  addActor (entity) {\n    this.actors.push(entity);\n  }\n\n  addActorAsPrevious (entity) {\n    this.actors.splice(this.currentActor, 0, entity);\n  }\n\n  addActorAsNext (entity) {\n    this.actors.splice(this.currentActor + 1, 0, entity);\n  }\n\n  setActorToPrevious (entity) {\n    this.currentActor -= 1;\n    if (this.currentActor <= -1) this.currentActor = this.actors.length - 1;\n  }\n\n  setActorToNext (entity) {\n    this.currentActor = (this.currentActor + 1) % this.actors.length;\n  }\n\n}\n\n\nexport class CrankEngine extends Engine {\n  async process() { // a turn-based system using speed and Action Points\n    let actor = this.actors[this.currentActor]\n    let acting = true;\n    while (acting) {\n      if (actor.hasEnoughEnergy()) {\n        let action = actor.getAction(this.game);\n        if (!action) { return false; } // if no action given, kick out to UI input\n        while (true) {\n          this.game.draw();\n          let result = await action.perform();\n          await Helper.delay(action.processDelay);\n          if (!result.success) return false;\n          if (result.alternative === null) break;\n          action = result.alternative;\n        }\n      } else {\n        // actor.gainEnergy(actor.speed);\n        acting = false;\n      }\n    }\n    // this.currentActor = (this.currentActor + 1) % this.actors.length;\n    this.currentActor += 1;\n    if (this.currentActor + 1 >= this.actors.length) {\n      this.currentActor = 0;\n      this.actors.forEach((actor) => actor.gainEnergy(actor.speed));\n      return false;\n    }\n    return true\n  }\n\n  async start() {\n    this.isRunning = true;\n    while (this.isRunning) {\n      this.isRunning = await this.process();\n    }\n    let actor = this.actors[this.currentActor]\n    if (actor.keymap) {\n      this.game.visibleKeymap = actor.keymap;\n    }\n    this.game.updateMode();\n    await this.game.updateReact(this.game);\n  }\n}","import Konva from 'konva';\n\nexport class Display {\n  constructor({\n    containerId = null,\n    width = 100,\n    height = 100,\n    tileWidth = 10,\n    tileHeight = 10,\n    tileGutter = 0,\n    tileOffset = 10,\n  }) {\n    this.containerId = containerId;\n    this.width = width;\n    this.height = height;\n    this.tileWidth = tileWidth;\n    this.tileHeight = tileHeight;\n    this.tileGutter = tileGutter;\n    this.tileOffset = tileOffset;\n    this.stage = null;\n    this.layer = null;\n  }\n\n  initialize (document) {\n    let d = document.getElementById(this.containerId)\n    let displayContainer = document.createElement('div');\n    d.appendChild(displayContainer);\n\n    this.stage = new Konva.Stage({\n      container: 'display',   // id of container <div>\n      width: this.width,\n      height: this.height\n    });\n\n    this.layer = new Konva.Layer({\n      hitGraphEnabled: false,\n    });\n    this.stage.add(this.layer);\n  }\n\n  updateTile(tile, character, foreground, background) {\n    // child[0] is the rectangle\n    // child[1] is the text\n    tile.children[0].fill(background);\n    tile.children[1].fill(foreground);\n    tile.children[1].text(character);\n  }\n\n  createTile(x, y, character, foreground, background) {\n    let node = new Konva.Group({\n      id: `${x},${y}`,\n      x: (this.tileWidth * x) + (this.tileOffset + this.tileGutter),\n      y: (this.tileHeight * y) + (this.tileOffset + this.tileGutter),\n      width: this.tileWidth,\n      height: this.tileHeight,\n    });\n\n    let rect = new Konva.Rect({\n      name: 'rect',\n      width: this.tileWidth,\n      height: this.tileHeight,\n      fill: background,\n      strokeEnabled: false,\n      // for optimization\n      transformsEnabled: 'position',\n      perfectDrawEnabled: false,\n      listening: false,\n    });\n\n    let text = new Konva.Text({\n      name: 'text',\n      text: character,\n      width: this.tileWidth,\n      height: this.tileHeight,\n      fill: foreground,\n      align: 'center',\n      verticalAlign: 'middle',\n      // for optimization\n      transformsEnabled: 'position',\n      perfectDrawEnabled: false,\n      listening: false,\n    });\n\n    node.add(rect);\n    node.add(text);\n    this.layer.add(node);\n    return node;\n  }\n\n  draw () {\n    this.layer.batchDraw();\n    // this.layer.draw();\n  }\n}\n","import React from 'react';\nimport * as ROT from 'rot-js';\nimport * as Constant from './constants';\nimport * as Helper from '../helper';\nimport { addActor as addWaveEnemy } from './Keymap/KeyActions/addActor';\nimport * as Message from './message';\nimport * as Item from './items';\nimport { Display } from './Display/konvaCustom';\n\nconst GAME_MODE_TYPES = {WAVE: 0};\nconst MAP_WIDTH = 60;\nconst MAP_HEIGHT = 30;\nconst TILE_WIDTH = 20;\nconst TILE_HEIGHT = 20;\nconst TILE_OFFSET = 5;\n\nexport class Game {\n  constructor({\n    engine = null,\n    map = {},\n    tileMap = {},\n    mapWidth = MAP_WIDTH,\n    mapHeight = MAP_HEIGHT,\n    display = new Display({\n      containerId: 'display',\n      width: (MAP_WIDTH * TILE_WIDTH) + TILE_OFFSET,\n      height: (MAP_HEIGHT * TILE_HEIGHT) + TILE_OFFSET,\n      tileWidth: TILE_WIDTH,\n      tileHeight: TILE_HEIGHT,\n      tileOffset: TILE_OFFSET,\n    }),\n    tileKey = Constant.TILE_KEY,\n    mode = {\n      type: GAME_MODE_TYPES.WAVE,\n      data: {\n        level: 1,\n        highestLevel: null,\n      }\n    },\n    messages = [],\n  }) {\n    this.engine = engine;\n    this.map = map;\n    this.tileMap = tileMap;\n    this.mapWidth = mapWidth;\n    this.mapHeight = mapHeight;\n    this.display = display;\n    this.tileKey = tileKey;\n    this.mode = mode;\n    this.messages = messages;\n  }\n\n  initializeMode () {\n    if (this.mode.type === GAME_MODE_TYPES.WAVE) {\n      let highestLevel = localStorage.getItem('hidden_leaf_rl__highestLevel');\n      if (!highestLevel) { \n        highestLevel = this.mode.data.level;\n      } else { \n        highestLevel = Math.max(highestLevel , this.mode.data.level);\n      }\n      localStorage.setItem('hidden_leaf_rl__highestLevel', highestLevel);\n      this.mode.data.highestLevel = highestLevel\n      for (let i = 0; i < Math.pow(this.mode.data.level, 2); i++) {\n        addWaveEnemy(this);\n        let apple = Item.apple(this.engine)\n        this.randomlyPlaceActorOnMap(apple, null)\n      }\n    }\n  }\n  \n  updateMode () {\n    if (this.mode.type === GAME_MODE_TYPES.WAVE) {\n      const nonPlayerCharacters = this.engine.actors.filter((actor) => !actor.entityTypes.includes('PLAYING'));\n      if (!nonPlayerCharacters.length) {\n        this.nextModeLevel();\n        this.initializeMode();\n      }\n    }\n  }\n\n  setModeLevel (level) {\n    this.mode.data.level = level;\n  }\n\n  nextModeLevel () {\n    this.setModeLevel(this.mode.data.level + 1);\n  }\n  \n  resetMode () {\n    this.setModeLevel(1);\n    this.initializeMode();\n  }\n\n  randomlyPlaceActorOnMap(actor) {\n    let kill = 0;\n    let placed = false;\n    while (!placed) {\n      let pos = Helper.getRandomPos(this.map).coordinates\n      if (this.canOccupyPosition(pos, actor)) {\n        let tile = this.map[Helper.coordsToString(pos)]\n        actor.pos = { ...pos }\n        tile.entities.push(actor);\n        placed = true;\n      }\n      kill += 1;\n      if (kill >= 100) {\n        placed = true;\n      }\n    }\n    return placed;\n  }\n\n  randomlyPlaceAllActorsOnMap() {\n    this.engine.actors.forEach((actor) => {\n      this.randomlyPlaceActorOnMap(actor);\n    })\n  }\n\n  placeActorsOnMap() {\n    this.engine.actors.forEach((actor) => {\n      let tile = this.map[Helper.coordsToString(actor.pos)]\n      if (tile) {\n        tile.entities.push(actor);\n      } else {\n        console.log(`could not place ${actor.id}: ${actor.name} on map`);\n      }\n    })\n  }\n\n  placeActorOnMap(actor) {\n    let tile = this.map[Helper.coordsToString(actor.pos)]\n    if (tile) {\n      tile.entities.push(actor);\n      return true\n    } else {\n      console.log(`could not place ${actor.id}: ${actor.name} on map`);\n      return false\n    }\n  }\n\n  removeActorFromMap (actor) {\n    let tile = this.map[Helper.coordsToString(actor.pos)]\n    if (!tile) return false;\n    this.map[Helper.coordsToString(actor.pos)].entities = tile.entities.filter((ac) => ac.id !== actor.id);\n    return true;\n  }\n\n  createLevel () {\n    // let digger = new ROT.Map.Arena();\n    // let digger = new ROT.Map.Rogue();\n    // let digger = new ROT.Map.DividedMaze();\n    // let digger = new ROT.Map.EllerMaze();\n    // let digger = new ROT.Map.Cellular();\n    let digger = new ROT.Map.Digger(this.mapWidth, this.mapHeight);\n    // let digger = new ROT.Map.IceyMaze();\n    // let digger = new ROT.Map.Uniform();\n    let freeCells = [];\n    let digCallback = function (x, y, value) {\n      let key = x + \",\" + y;\n      let type = 'GROUND';\n      let currentFrame = 0;\n      if (value) { \n        type = 'WALL';\n        // type = 'WATER';\n      }\n\n      if (Constant.TILE_KEY[type].animation) {\n        currentFrame = Helper.getRandomInt(0, Constant.TILE_KEY[type].animation.length)\n      }\n\n      this.map[key] = {\n        type,\n        currentFrame,\n        entities: [],\n      };\n      freeCells.push(key);\n    }\n    digger.create(digCallback.bind(this));\n    this.randomlyPlaceAllActorsOnMap()\n  }\n\n  canOccupyPosition (pos, entity = {passable: false}) {\n    let result = false;\n    let targetTile = this.map[Helper.coordsToString(pos)];\n    if (targetTile) {\n      let hasImpassableEntity = targetTile.entities.filter((entity) => !entity.passable).length > 0;\n      if (!hasImpassableEntity || entity.passable) {\n        let tile = this.map[Helper.coordsToString(pos)];\n        if (this.tileKey[tile.type].passable) {\n          result = true;\n        }\n      }\n    }\n\n    return result;\n  }\n\n  cursorCanOccupyPosition(pos) {\n    let result = false;\n    let targetTile = this.map[Helper.coordsToString(pos)];\n    if (targetTile) {\n      result = true;\n    }\n\n    return result;\n  }\n\n  show (document) {\n    this.display.initialize(document)\n  }\n\n  processTileMap (callback) {\n    for (let key in this.map) {\n      let parts = key.split(\",\");\n      let x = parseInt(parts[0]);\n      let y = parseInt(parts[1]);\n      let tile = this.map[key];\n      let { character, foreground, background } = this.tileKey[tile.type]\n\n      // Proto code to handle tile animations\n      let tileRenderer = this.tileKey[tile.type]\n      let nextFrame = this.animateTile(tile, tileRenderer);\n      character = nextFrame.character;\n      foreground = nextFrame.foreground;\n      background = nextFrame.background;\n\n      if (tile.entities.length > 0) {\n        let entity = tile.entities[tile.entities.length - 1]\n        nextFrame = this.animateEntity(entity);\n        \n        character = nextFrame.character\n        foreground = nextFrame.foreground\n        if (nextFrame.background) {\n          background = nextFrame.background\n        }\n      }\n      callback(key, x, y, character, foreground, background);\n    }\n  }\n\n  initializeMap () {\n    this.processTileMap((tileKey, x, y, character, foreground, background) => {\n      let node = this.display.createTile(x, y, character, foreground, background);\n      this.tileMap[tileKey] = node;\n    });\n    this.display.draw();\n  }\n  \n  draw () {\n    this.processTileMap((tileKey, x, y, character, foreground, background) => {\n      this.display.updateTile(this.tileMap[tileKey], character, foreground, background);\n    });\n    this.display.draw();\n  }\n  \n  animateEntity (entity) {\n    let renderer = entity.renderer;\n    let {character, color, background} = {...renderer}\n    if (renderer.animation) {\n      let frame = renderer.animation[entity.currentFrame];\n\n      character = frame.character;\n      color = frame.foreground;\n      background = frame.background;\n      entity.currentFrame = (entity.currentFrame + 1) % renderer.animation.length;\n    }\n    return {character, foreground: color, background}\n  }\n\n  animateTile (tile, renderer) {\n    let {character, foreground, background} = {...renderer}\n    if (renderer.animation) {\n      let frame = renderer.animation[tile.currentFrame];\n      character = frame.character;\n      foreground = frame.foreground;\n      background = frame.background;\n      tile.currentFrame = (tile.currentFrame + 1) % renderer.animation.length;\n    }\n    return {character, foreground, background}\n  }\n\n  addActor (actor, engine = this.engine) {\n    let isPlaced = this.placeActorOnMap(actor); // replace with placeActorOnMap\n    if (!isPlaced) { return false }\n    engine.actors.push(actor);\n    this.draw();\n    return true\n  }\n\n  placeAndDrawActor (actor) {\n    this.placeActorsOnMap(); // replace with placeActorOnMap\n    this.draw();\n  }\n\n  removeActor (actor) {\n    this.engine.actors = this.engine.actors.filter((ac) => ac.id !== actor.id);\n    // this.engine.currentActor = this.engine.actors.length - 1; // should remove need for this line\n    // this.engine.currentActor = (this.engine.currentActor) % this.engine.actors.length;\n    // this.engine.currentActor = (this.engine.currentActor + 1) % this.engine.actors.length;\n    this.removeActorFromMap(actor);\n    this.draw();\n  }\n\n  initialize (presserRef, document) {\n    this.engine.game = this;\n    this.engine.actors.forEach((actor) => {\n      actor.game = this;\n    });\n    this.createLevel();\n    this.show(document);\n    this.initializeMap();\n    this.draw();\n    presserRef.current.focus();\n    this.initializeMode();\n  }\n\n  addMessage (text, type) {\n    const message = new Message.Message({text, type})\n    this.messages.push(message);\n  }\n}\n\n\n/************************** UI ********************************/\nexport const handleKeyPress = (event, engine) => {\n  if (!engine.isRunning) {\n    let actor = engine.actors[engine.currentActor];\n    let keymap = actor.keymap;\n    let code = event.key;\n    if (!(code in keymap)) { return; }\n    keymap[code]['activate']();\n    engine.start()\n  }\n  return;\n}\n\nexport const DisplayElement = (presserRef, handleKeyPress, engine) => {\n  return (\n    <div\n      id='display'\n      ref={presserRef}\n      onKeyDown={(event) => handleKeyPress(event, engine)}\n      tabIndex='0'\n    />\n  )\n}\n/************************** UI ********************************/\n","import React from 'react';\n\nfunction Button(props) {\n  let color = props['color'];\n  if (!color) color = 'grey';\n  return (\n    <button\n      onClick={props.onClick}\n      className={`Button btn ${color} darken-3`}\n    >\n      {props.children}  \n    </button>\n  )\n}\n\nexport default Button;\n","import React from 'react';\nimport Button from './Button';\n\nclass Information extends React.Component {\n  render() {\n    return (\n      <div className=\"Information UI\">\n        <div className='flow-text'>Information</div>\n        {\n          this.props.data && (\n            this.props.data.map((item, index) => {\n              return (\n                <Button key={index} color={item['color']} onClick={() => null}>\n                  {`${item.label}: ${item.value}`}\n                </Button>\n              )\n            })\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default Information;","import React from 'react';\nimport Button from './Button';\n\nclass Equipment extends React.Component {\n  render() {\n    return (\n      <div className=\"Equipment UI\">\n        {\n          this.props.equipment && (\n            <div>\n              <div className='flow-text'>Equipment</div>\n              <div>\n                {\n                  this.props.equipment.map((slot, index) => {\n                    return (\n                      <Button key={index} onClick={() => null}>\n                        {slot.name} {slot.item ? slot.item.renderer.character : ''}\n                      </Button>\n                    )\n                  })\n                }\n              </div>\n            </div>\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default Equipment;","import React from 'react';\nimport Button from './Button';\n\nclass Inventory extends React.Component {\n  render() {\n    return (\n      <div className=\"Inventory UI\">\n        {\n          this.props.inventory && (\n            <div>\n              <div className='flow-text'>Inventory</div>\n              <div>\n                {\n                  this.props.inventory.map((slot, index) => {\n                    return (\n                      <Button key={index} onClick={() => null}>\n                        {`${slot.itemType} | x ${slot.items.length}`}\n                      </Button>\n                    )\n                  })\n                }\n              </div>\n            </div>\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default Inventory;","import React from 'react';\nimport Button from './Button';\n\nclass Keymap extends React.Component {\n  render() {\n    return (  \n      <div className=\"Keymap UI\">\n        <div className='flow-text'>Keymap</div>\n        {\n          \n          this.props.keymap && (\n            Object.entries(this.props.keymap).map(([key, value], index) => {\n              return (\n                <Button key={index} onClick={() => null}>\n                  {key} {value.label}\n                </Button>\n              )\n            })\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default Keymap;","import React from 'react';\n\nfunction Message (props) {\n  return (\n    <div\n      className='Message'\n      style={{\n        color: props.color,\n        backgroundColor: props.backgroundColor,\n        borderColor: props.color,\n      }}\n    >\n      {props.children}\n    </div>\n  )\n}\n\nclass Messages extends React.Component {\n  render() {\n    return (\n      <div className=\"Messages UI\">\n        <div className='flow-text'>Messages</div>\n        {\n          this.props.messages && (\n            this.props.messages.map((message, index) => {\n              return (\n                <Message \n                  key={index} \n                  color={message.type.color}\n                  backgroundColor={message.type.backgroundColor}\n                >\n                  {`${message.text}`}\n                </Message>\n              )\n            })\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default Messages;","import React from 'react';\nimport { SCREENS } from './constants';\nimport * as Engine from '../engine';\nimport * as Game from '../game';\nimport Information from '../UI/Information';\nimport Equipment from '../UI/Equipment';\nimport Inventory from '../UI/Inventory';\nimport KeymapUI from '../UI/Keymap';\nimport Messages from '../UI/Messages';\n\nclass Level extends React.Component {\n  constructor(props) {\n    super(props);\n    let ENGINE = new Engine.Engine({});\n    let actor = this.props.selectedCharacter.initialize(ENGINE);\n    ENGINE.actors.push(actor)\n    let game = new Game.Game({ engine: ENGINE })\n\n    this.state = {\n      game: game,\n      activeTab: 0,\n    };\n    this.presserRef = React.createRef();\n  }\n\n  async componentDidMount() {\n    this.state.game.initialize(this.presserRef, document)\n    this.state.game['backToTitle'] = () => this.props.setActiveScreen(SCREENS.TITLE);\n    this.state.game.updateReact = (newGameState) => { this.setState({game: newGameState}) }\n    this.state.game.engine.start()\n  }\n\n  render() {\n    let currentActor = this.state.game.engine.actors[this.state.game.engine.currentActor];\n    let data = [\n      {\n        label: 'Wave',\n        value: `Current: ${this.state.game.mode.data.level}, Highest: ${this.state.game.mode.data.highestLevel}`,\n      },\n    ];\n\n    data = data.concat(\n      [\n        ...this.state.game.engine.actors.map((actor, index) => {\n          let result = {\n            label: actor.name,\n            value: index,\n            value: `HP: ${actor.durability}, En/Sp: ${actor.energy}/${actor.speed}`,\n          };\n          if (index === this.state.game.engine.currentActor) {\n            result['color'] = 'red';\n          }\n          return result;\n        })\n      ]\n    )\n\n    return (\n      <div className=\"Level\">\n        <div className='flow-text'>Chunin Exams</div>\n        <button className='btn' onClick={() => this.props.setActiveScreen(SCREENS.TITLE)}>Quit</button>\n        <div className='row'>\n          <div className='col s8 game_display_container'>\n            {Game.DisplayElement(this.presserRef, Game.handleKeyPress, this.state.game.engine)}\n            <Information data={data} />\n          </div>\n          <div className='col s2'>\n            <KeymapUI keymap={this.state.game.visibleKeymap} />\n          </div>\n          <div className='col s2'>\n            <Equipment equipment={this.state.game.visibleEquipment} />\n            <Inventory inventory={this.state.game.visibleInventory} />\n          </div>\n          {\n            !this.state.game.visibleEquipment && !this.state.game.visibleInventory && (\n              <div className='col s2'>\n                <Messages messages={this.state.game.messages.slice(-15).reverse()} />\n              </div>\n            )\n          }\n          {/* <div className='col s2'>\n            <Messages messages={this.state.game.messages.slice(-15).reverse()} />\n          </div>\n          <div className='col s2'>\n            <Messages messages={this.state.game.messages} />\n          </div> */}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Level;\n","import React from 'react';\nimport { SCREENS } from './constants';\nconst CharacterSelect = (props) => {\n  return (\n    <div className='CharacterSelect'>\n      {\n        props.characters.map((character, index) => {\n          let color = '';\n          if (props.selectedCharacter) {\n            color = props.selectedCharacter.name === character.name ? 'red' : ''\n          }\n\n          return (\n            <button\n              key={index}\n              className={`CharacterSelect__button btn ${color}`}\n              onClick={() => {\n                props.setSelectedCharacter(character)\n                props.setActiveScreen(SCREENS.LEVEL)\n              }}\n            >\n              {character.name}\n            </button>\n          )\n        })\n      }\n    </div>\n  );\n}\n\nclass Title extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div className=\"Title\">\n        <div\n          style={{\n            width: '100vw',\n            height: '100vh',\n            backgroundColor: '#e2e2e2',\n          }}\n        >\n          <div class='flow-text grey-text'>Athel RL</div>\n          <CharacterSelect \n            characters={this.props.characters} \n            selectedCharacter={this.props.selectedCharacter} \n            setSelectedCharacter={this.props.setSelectedCharacter}\n            setActiveScreen={this.props.setActiveScreen}\n        />\n          <button \n            class='btn' \n            onClick={() => this.props.setActiveScreen(SCREENS.LEVEL)}\n            disabled={!this.props.selectedCharacter}\n          >\n            Play\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Title;","// import deps\nimport * as Entity from '../entites';\nimport * as Keymap from '../Keymap';\nimport { createFourDirectionMoveOptions } from '../Keymap/helper';\n\nexport default function (engine) {\n  // define keymap\n  const keymap = (engine) => {\n    return {\n      ...createFourDirectionMoveOptions(Keymap.walk, engine),\n      // DEV KEYS\n      b: {\n        activate: () => Keymap.addBody(engine),\n        label: 'Add Body Part',\n      },\n      y: {\n        activate: () => Keymap.addActor(engine.game),\n        label: 'Add NPC',\n      },\n    };\n  }\n  // instantiate class\n  let actor = new Entity.SnakePlayer({\n    pos: { x: 23, y: 7 },\n    renderer: {\n      character: 'A',\n      color: '#e6e6e6',\n      background: '#36635b',\n    },\n    name: 'Athel',\n    actions: [],\n    speed: 200,\n    durability: 10,\n    keymap: keymap(engine),\n  })\n\n  return actor;\n}","import { CloneSelf } from '../../actions';\n\nexport const addBody = (engine) => {\n  let actor = engine.actors[engine.currentActor];\n  actor.addBodyPart();\n  engine.game.draw();\n};","import Athel from './Athel';\nimport RockLee from './RockLee';\n\nlet Characters = () => {\n  return {\n    Athel,\n    RockLee,\n  }\n}\n\nexport default Characters;","import React from 'react';\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group';\nimport { SCREENS } from './Screen/constants';\nimport Level from './Screen/Level';\nimport Title from './Screen/Title';\nimport Characters from './Characters/index';\n\nclass Nystrum extends React.Component {\n  constructor() {\n    super();\n    let characterKey = Characters();\n    let characters = Object.keys(characterKey).map((key, i) => {\n      return {\n        // [key]: characterKey[key],\n        initialize: characterKey[key],\n        selected: false,\n        name: key,\n      }\n    });\n    this.state = {\n      activeScreen: SCREENS.TITLE,\n      characters,\n      selectedCharacter: null,\n    };\n  }\n\n  setActiveScreen (activeScreen) {\n    this.setState({activeScreen})\n  }\n\n  setSelectedCharacter (character) {\n    this.setState({selectedCharacter: {...character}})\n  }\n\n  getActiveScreen () {\n    const titleScreen = <Title \n      key={SCREENS.TITLE} \n      setActiveScreen={this.setActiveScreen.bind(this)}\n      setSelectedCharacter={this.setSelectedCharacter.bind(this)}\n      selectedCharacter={this.state.selectedCharacter}\n      characters={this.state.characters}\n    />\n    const levelScreen = <Level \n      key={SCREENS.LEVEL} \n      setActiveScreen={this.setActiveScreen.bind(this)}\n      selectedCharacter={this.state.selectedCharacter}\n    />\n\n    switch (this.state.activeScreen) {\n      case SCREENS.TITLE:\n        return titleScreen\n      case SCREENS.LEVEL:\n        return levelScreen\n      default:\n        return titleScreen\n    }\n  }\n\n  render() {\n    const activeScreen = this.getActiveScreen();\n    return (\n      <div className=\"Nystrum\">\n        <ReactCSSTransitionGroup\n          transitionName=\"fade\"\n          transitionAppear={true}\n          transitionEnter={true}\n          transitionLeave={true}\n          transitionAppearTimeout={500}\n          transitionEnterTimeout={500}\n          transitionLeaveTimeout={300}\n        >\n          { activeScreen }\n        </ReactCSSTransitionGroup>\n      </div>\n    );\n  }\n}\n\nexport default Nystrum;\n","import * as ROT from 'rot-js';\n\nexport const TILE_KEY = () => {\n  return {\n    'GROUND': {\n      background: '#974',\n      foreground: '#aaa',\n      character: '.',\n      passable: true,\n    }\n  }\n}\n\n// RENDERING\n\nexport const DRAW = (map, display) => {\n  for (let key in map) {\n    let parts = key.split(\",\");\n    let x = parseInt(parts[0]);\n    let y = parseInt(parts[1]);\n    let tile = map[key];\n    let { character, foreground, background } = TILE_KEY()[tile.type]\n    if (tile.entities.length > 0) {\n      let entity = tile.entities[tile.entities.length - 1]\n      character = entity.components.renderer.character\n      foreground = entity.components.renderer.color\n      if (entity.components.renderer.background) {\n        background = entity.components.renderer.background\n      }\n    }\n    display.draw(x, y, character, foreground, background);\n  }\n}\n\n// END RENDERING\n\nexport const coordsToString = (coords) => `${coords.x},${coords.y}`\n\nexport const getImpassableEntities = (entities) => {\n  return entities.filter((e) => e.components.hasOwnProperty('impasse') && !e.components.impasse.passable)\n}\n\nexport const getDestructableEntities = (entities) => {\n  return entities.filter((e) => e.components.hasOwnProperty('destructible'))\n}\n\nexport const delay = (timeDelayed = 100) => {\n  return new Promise(resolve => setTimeout(resolve, timeDelayed));\n}\n\nexport const exampleEngine = () => {\n  let scheduler = new ROT.Scheduler.Simple();\n  let engine = new ROT.Engine(scheduler);\n  let output = [];\n  /* sample actor: pauses the execution when dead */\n  let actor = {\n    lives: 3,\n    act: function () {\n      let done = null;\n      let promise = {\n        then: function (cb) { done = cb; }\n      }\n\n      output.push(\".\");\n      // SHOW(output.join(\"\"));\n      console.log(output.join(\"\"));\n\n      this.lives--;\n\n      /* if alive, wait for 500ms for next turn */\n      if (this.lives) {\n        setTimeout(function () { done(); }, 500);\n      }\n\n      return promise;\n    }\n  }\n  scheduler.add(actor, true);\n  engine.start();\n}\n\nexport const getRandomInArray = (array) => {\n  return array[Math.floor(Math.random() * array.length)];\n}","import * as Helper from '../lib/helper';\n\nexport const createEntity = (id = null, name = 'Empty', components = {}, world) => {\n  let entity = {\n    id,\n    name,\n    components,\n    world,\n    sendEvent: (target, eventType, parameters) => sendEvent(target, eventType, parameters, world),\n  };\n  return entity\n}\n\nexport const sendEvent = async (target = null, eventType = null, parameters = null, world = null) => {\n  let success = false;\n  for (let key in target.components) {\n    let component = target.components[key]\n    if (component.hasOwnProperty(eventType)) {\n      console.log('SUCCESSFUL EVENT: ', eventType)\n      success = true\n      if (eventType !== 'PREPARE_RENDER') {\n        await Helper.delay();\n      }\n      component[eventType]({ ...parameters, self: target, component: component });\n      Helper.DRAW(world.map, world.display)\n    }\n  }\n  if (!success) {\n    console.log('FAILED EVENT')\n  }\n};","import * as Helper from '../lib/helper';\n\nexport const receiver = (pos) => {\n  return {\n    responded: false,\n    RECIEVE: (parameters) => {\n      let { self, component, message } = parameters\n      console.log(message, pos.x, pos.y)\n      if (!component.responded) {\n        component.responded = true\n        self.sendEvent(parameters.sender, 'hello', 'RECIEVE', { message: 'copy', sender: self })\n      }\n    }\n  }\n}\n\nexport const impasse = (passable = false) => {\n  return {\n    passable,\n    MAKE_PASSABLE: (parameters) => {\n      let { component } = parameters;\n      component.passable = true;\n    },\n    MAKE_IMPASSABLE: (parameters) => {\n      let { component } = parameters;\n      component.passable = false;\n    }\n  }\n}\n\nexport const body = (world, pos = { x: 0, y: 0 }) => {\n  if (world) {\n    return {\n      pos,\n      MOVE: (parameters) => {\n        let { self, component, currentPos, targetPos } = parameters\n        if (world.canOccupy(world.map, targetPos)) {\n          component.pos = targetPos\n          let tile = world.map[Helper.coordsToString(currentPos)]\n          world.map[Helper.coordsToString(currentPos)] = {...tile, entities: []}\n          self.sendEvent(self, 'PREPARE_RENDER')\n          // Helper.DRAW(world.map, world.display)\n        } else {\n          console.log('can\\'t move there')\n        }\n      }\n    }\n  }\n  console.log('No world to occupy');\n  return {}\n}\n\nexport const destructible = (world, durability = 1) => {\n  return {\n    durability,\n    DECREASE_DURABILITY: (parameters) => {\n      let { self, component, value } = parameters;\n      component.durability -= value\n      if (component.durability <= 0) {\n        self.sendEvent(self, 'DESTROY')\n      }\n    },\n    INCREASE_DURABILITY: (parameters) => {\n      let { component, value } = parameters;\n      component.durability += value\n    },\n    DESTROY: (parameters) => {\n      let { self, component, value } = parameters;\n      let tile = world.map[Helper.coordsToString(self.components.body.pos)];\n      world.map[Helper.coordsToString(self.components.body.pos)].entities = tile.entities.filter((e) => e.id !== self.id);\n      // self.sendEvent(self, 'PREPARE_RENDER')\n      // Helper.DRAW(world.map, world.display)\n    }\n  }\n}\n\nexport const attack = (damage = 1) => {\n  return {\n    damage,\n  }\n}\n\nexport const throwable = (world) => {\n  return {\n    THROW: (parameters) => {\n      let { self, component, direction } = parameters;\n      // if next tile is passable\n        // send move action to self\n        // send throw action to self\n      // else\n        // send decrease_durability to entity next in tile\n        // send decrease_durability to self\n      let currentPos = self.components.body.pos;\n      let nextPos = { x: currentPos.x + direction.x, y: currentPos.y + direction.y }\n      let nextTile = world.map[Helper.coordsToString(nextPos)];\n      if (world.canOccupy(world.map, nextPos)) { // change to check for target entity\n        self.sendEvent(\n          self, 'MOVE', {\n            currentPos: currentPos,\n            targetPos: nextPos\n          }\n        )\n        self.sendEvent(self, 'THROW', {direction});\n      } else {\n        if (world.map.hasOwnProperty(Helper.coordsToString(nextPos))) {\n          let impassable_and_destructable_entities = Helper.getDestructableEntities(Helper.getImpassableEntities(nextTile.entities))\n          if (impassable_and_destructable_entities.length > 0) {\n            self.sendEvent(impassable_and_destructable_entities[0], 'DECREASE_DURABILITY', { value: 1 });\n          }\n        }\n        self.sendEvent(self, 'DECREASE_DURABILITY', { value: 1 });\n      }\n    },\n  }\n}\n\nexport const renderer = (world, character = '', color = 'white', background = false) => {\n  return {\n    character,\n    color,\n    background,\n    PREPARE_RENDER: (parameters) => {\n      let { self } = parameters\n      if (self.components.hasOwnProperty('body')) {\n        world.map[Helper.coordsToString(self.components.body.pos)].entities.push(self)\n      }\n    }\n  }\n}","import React from 'react';\nimport '../App.css';\nimport * as ROT from 'rot-js';\nimport * as Entity from './lib/entity'\nimport * as Helper from './lib/helper'\nimport * as Components from './components/index'\n\nconst SHOW = (canvas) => {\n  let d = document.getElementById('display')\n  d.appendChild(canvas)\n}\n\nconst CREATE_LEVEL = (world) => {\n  let digger = new ROT.Map.Arena();\n  let freeCells = [];\n  let digCallback = function (x, y, value) {\n    if (value) { return; }\n    let key = x + \",\" + y;\n    world.map[key] = {\n      type: 'GROUND',\n      entities: [],\n    };\n    freeCells.push(key);\n  }\n  digger.create(digCallback.bind(this));\n}\n\nlet scheduler = new ROT.Scheduler.Simple()\nlet engine = new ROT.Engine(scheduler)\n\nlet world = {\n  canAct: true,\n  scheduler,\n  engine,\n  map: {},\n  display: new ROT.Display({ fontSize: 24, bg: '#099' }),\n  canOccupy: (map, pos) => {\n    if (map.hasOwnProperty(Helper.coordsToString(pos))) {\n      let tile = map[Helper.coordsToString(pos)];\n      if (Helper.TILE_KEY()[tile.type].passable && Helper.getImpassableEntities(tile.entities).length === 0) {\n        return true\n      }\n    } else {\n      return false\n    }\n  },\n}\n\nlet naruto = {\n  ...Entity.createEntity(1, 'Naruto', {\n    reciever: Components.receiver({ x: 10, y: 30 }),\n    body: Components.body(world, { x: 19, y: 21 }),\n    renderer: Components.renderer(world, 'N', 'orange', 'black'),\n  },\n    world,\n  ),\n}\n\nlet box = {\n  ...Entity.createEntity(2, 'Box', {\n    body: Components.body(world, { x: 22, y: 21 }),\n    renderer: Components.renderer(world, '#', 'black'),\n    impasse: Components.impasse(),\n    destructible: Components.destructible(world),\n  },\n    world,\n  )\n}\n\nlet box2 = {\n  ...Entity.createEntity(2, 'Box', {\n    body: Components.body(world, { x: 22, y: 19 }),\n    renderer: Components.renderer(world, '#', 'black'),\n    impasse: Components.impasse(),\n    destructible: Components.destructible(world),\n  },\n    world,\n  )\n}\n\nlet box3 = {\n  ...Entity.createEntity(2, 'Box', {\n    body: Components.body(world, { x: 22, y: 17 }),\n    renderer: Components.renderer(world, '#', 'black'),\n    impasse: Components.impasse(),\n    destructible: Components.destructible(world),\n  },\n    world,\n  )\n}\n\nlet kunai = {\n  ...Entity.createEntity(3, 'Kunai', {\n    body: Components.body(world, { x: 20, y: 21 }),\n    renderer: Components.renderer(world, '<>', 'black'),\n    destructible: Components.destructible(world),\n    attack: Components.attack(),\n    throwable: Components.throwable(world),\n  },\n    world,\n  )\n}\n\nclass Original extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.presserRef = React.createRef();\n  }\n\n  handleKeyPress = (event, world, entity) => {\n    let keymap = {\n      w: 0,\n      d: 1,\n      s: 2,\n      a: 3,\n    };\n\n    let code = event.key;\n    let dir = ROT.DIRS[4][keymap[code]];\n    if (code === 't') {\n      kunai.sendEvent(kunai, 'MOVE', {\n        currentPos: kunai.components.body.pos,\n        targetPos: {\n          x: entity.components.body.pos.x + 1,\n          y: entity.components.body.pos.y,\n        },\n      })\n      return kunai.sendEvent(kunai, 'THROW', { direction: { x: 1, y: 0 } })\n    }\n    if (!(code in keymap)) { return; }\n    let newX = entity.components.body.pos.x + dir[0];\n    let newY = entity.components.body.pos.y + dir[1];\n\n    entity.sendEvent(\n      entity, 'MOVE', {\n        currentPos: entity.components.body.pos,\n        targetPos: {\n          x: newX,\n          y: newY\n        }\n      }\n    )\n\n    return;\n    // return Helper.DRAW(world.map, world.display)\n\n  }\n\n  componentDidMount() {\n    ROT.RNG.setSeed(7);\n    SHOW(world.display.getContainer());\n    CREATE_LEVEL(world);\n    naruto.sendEvent(naruto, 'PREPARE_RENDER')\n    // kunai.sendEvent(kunai, 'PREPARE_RENDER')\n    box.sendEvent(box, 'PREPARE_RENDER')\n    box2.sendEvent(box2, 'PREPARE_RENDER')\n    box3.sendEvent(box3, 'PREPARE_RENDER')\n    Helper.DRAW(world.map, world.display)\n    this.presserRef.current.focus();\n  }\n\n  render() {\n    return (\n      <div className=\"App\" ref={this.presserRef} onKeyDown={(event) => this.handleKeyPress(event, world, naruto)} tabIndex='0'>\n        <div id='display'></div>\n      </div>\n    );\n  }\n}\n\nexport default Original;\n","import React from 'react';\nimport './App.css';\nimport Nystrum from './nystrum/Nystrum';\nimport Original from './original/Original';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App container-fluid\">\n        <Nystrum />\n        {/* <Original /> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}