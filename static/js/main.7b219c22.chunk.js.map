{"version":3,"sources":["nystrum/Screen/constants.js","helper.js","nystrum/Entities/helper.js","nystrum/constants.js","nystrum/message.js","nystrum/actions.js","nystrum/entites.js","nystrum/engine.js","nystrum/items.js","nystrum/Keymap/KeyActions/addActor.js","nystrum/Display/konvaCustom.js","nystrum/game.js","nystrum/UI/Button.js","nystrum/UI/Information.js","nystrum/UI/Equipment.js","nystrum/UI/Inventory.js","nystrum/UI/Keymap.js","nystrum/UI/Messages.js","nystrum/Screen/Level.js","nystrum/Screen/Title.js","nystrum/Keymap/helper.js","nystrum/Keymap/KeyActions/activateThrow.js","nystrum/Keymap/KeyActions/walk.js","nystrum/Characters/Athel.js","nystrum/Characters/index.js","nystrum/Nystrum.js","original/lib/helper.js","original/lib/entity.js","original/components/index.js","original/Original.js","App.js","serviceWorker.js","index.js"],"names":["SCREENS","TITLE","LEVEL","delay","timeDelayed","Promise","resolve","setTimeout","getRandomInArray","array","Math","floor","random","length","coordsToString","coords","x","y","calculatePath","game","targetPos","currentPos","topology","map","isPassable","type","astar","ROT","AStar","path","compute","push","slice","calculatePathWithRange","range","getRandomPos","keys","Object","key","split","coordinates","parseInt","text","getDestructableEntities","entites","filter","entity","hasOwnProperty","getGranularity","radius","pow","getPointsOnCircumference","centerX","centerY","r","n","list","i","round","cos","PI","sin","destroyEntity","energy","pos","tile","Helper","entities","e","id","engine","removeStatusEffectByActorId","draw","active","COLORS","TILE_KEY","background","foreground","character","passable","animation","DIRECTIONS","N","NE","W","NW","SW","S","SE","E","NONE","EQUIPMENT_TYPES","HEAD","TORSO","BACK","HAND","FEET","EQUIPMENT_LAYOUTS","human","name","item","CLONE_PATTERNS","verticalLine","x_offset","y_offset","positions","taken","smallSquare","square","bigSquare","circle","PARTICLE_TEMPLATES","default","renderer","color","fail","damage","leaf","PARTICLE_TYPE","directional","MESSAGE_TYPE","INFORMATION","backgroundColor","ACTION","DANGER","STATUS_EFFECT","Message","uuid","this","Base","actor","energyCost","processDelay","particles","particleTemplate","Constant","onBefore","onAfter","onSuccess","onFailure","interrupt","life","direction","particle","Particle","console","log","success","alternative","Say","message","args","addMessage","DestroySelf","destroy","PlaceActor","canOccupyPosition","addActorAsNext","Move","move","Action","ProjectileMove","damageToSelf","Shove","shove","Attack","entityTypes","includes","attack","addParticle","SelfDestructiveAttack","decreaseDurabilityWithoutDefense","ThrowProjectile","move_result","shift","ThrowProjectileGas","CrankEngine","start","Entity","Parent","superclass","children","Engine","concat","isInitialized","child","actors","forEach","destroyChild","canAttack","bind","placeActorOnMap","addActor","initialize","Attacking","attackDamage","additional","targets","target","getAttackDamage","equipment","slot","decreaseDurability","Acting","actions","speed","action","value","Rendering","currentFrame","targetTile","newPos","ContainerSlot","itemType","items","Playing","keymap","nextAction","Chasing","targetEntity","Destructable","durability","defense","onDestroy","current","newDurability","getDefense","min","SnakePart","parent","shiftBodyParts","removeBodyPart","pipe","Wall","initiatedBy","Bandit","RangedBandit","getProjectile","pathToCheck","inPath","throwDirection","sign","projectile","createPath","targetInPath","movePath","SnakePlayer","bodyParts","lastDirection","lastPosition","finalPos","bodyPart","createBodyPart","part","headPosition","index","apple","find","addBodyPart","DirectionalProjectile","charge","chargeMax","max","signHistory","container","slots","findIndex","createSlot","it","splice","slotName","foundSlot","currentGate","gates","damageBuff","speedBuff","durabilityDebuff","nextGate","nextGateIndex","gate","cloneLimit","clones","clone","c","super__destroy","cloneArgs","cloneDeep","destroyClone","arg","attribute","equipmentType","setActorToPrevious","owner_id","isClone","cloneCount","clonePattern","offset","cloneDeepWith","referencePos","step","nextPos","getNextPos","statusEffects","currentActor","isRunning","gainEnergy","hasEnoughEnergy","getAction","result","perform","acting","timePassed","processActionFX","processStatusEffects","sortActorsByEnergy","processV2","backToTitle","visibleKeymap","updateMode","updateReact","sort","a","b","newEffect","allowDuplicates","effect","onStart","onStop","actorId","lifespan","timeToLive","timeSinceLastStep","stepInterval","onStep","removeDeadStatusEffects","actionSuccess","removeActorFromMap","update","removeDeadParticles","process","TYPE","banditStats","banditLevels","entityClass","getBanditStats","Item","randomlyPlaceActorOnMap","Display","containerId","width","height","tileWidth","tileHeight","tileGutter","tileOffset","stage","layer","document","d","getElementById","displayContainer","createElement","appendChild","Konva","Stage","Layer","hitGraphEnabled","add","fill","node","Group","rect","Rect","strokeEnabled","transformsEnabled","perfectDrawEnabled","listening","Text","align","verticalAlign","batchDraw","GAME_MODE_TYPES","WAVE","MAP_WIDTH","MAP_HEIGHT","TILE_WIDTH","TILE_HEIGHT","TILE_OFFSET","Game","tileMap","mapWidth","mapHeight","display","tileKey","mode","data","level","highestLevel","messages","localStorage","getItem","setItem","addWaveEnemy","apple_1","apple_2","nextModeLevel","initializeMode","setModeLevel","kill","placed","ac","digger","Digger","freeCells","create","ceil","randomlyPlaceAllActorsOnMap","hasImpassableEntity","callback","parts","tileRenderer","nextFrame","animateTile","animateEntity","processTileMap","createTile","updateTile","frame","isPlaced","placeActorsOnMap","presserRef","createLevel","show","initializeMap","focus","handleKeyPress","event","code","Button","props","onClick","className","Information","label","React","Component","Equipment","Inventory","inventory","Keymap","entries","style","borderColor","Messages","Level","ENGINE","selectedCharacter","state","activeTab","createRef","setActiveScreen","newGameState","setState","ref","onKeyDown","tabIndex","visibleEquipment","visibleInventory","reverse","CharacterSelect","characters","setSelectedCharacter","Title","class","createFourDirectionMoveOptions","moveFunction","w","activate","walk","newX","newY","setNextAction","Characters","Athel","Nystrum","characterKey","selected","activeScreen","titleScreen","levelScreen","getActiveScreen","transitionName","transitionAppear","transitionEnter","transitionLeave","transitionAppearTimeout","transitionEnterTimeout","transitionLeaveTimeout","DRAW","components","getImpassableEntities","impasse","createEntity","world","sendEvent","eventType","parameters","component","self","MAKE_PASSABLE","MAKE_IMPASSABLE","body","MOVE","canOccupy","destructible","DECREASE_DURABILITY","INCREASE_DURABILITY","DESTROY","PREPARE_RENDER","scheduler","Simple","canAct","fontSize","bg","naruto","reciever","responded","RECIEVE","sender","Components","box","box2","box3","kunai","throwable","THROW","nextTile","impassable_and_destructable_entities","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7b219c22.chunk.js","sourcesContent":["export const SCREENS = {\n  TITLE: 0,\n  LEVEL: 1,\n}","import * as ROT from 'rot-js';\n\nexport const delay = (timeDelayed = 100) => {\n  return new Promise(resolve => setTimeout(resolve, timeDelayed));\n}\n\nexport const getRandomInArray = (array) => {\n  return array[Math.floor(Math.random() * array.length)];\n}\n\nexport const getRandomInt = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n\nexport const getRandomIntInclusive = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport const coordsAreEqual = (pos_one, pos_two) => pos_one.x === pos_two.x && pos_one.y === pos_two.y\n\nexport const coordsToString = (coords) => `${coords.x},${coords.y}`\n\nexport const calculatePath = (game, targetPos, currentPos, topology = 4) => {\n  let map = game.map\n  let isPassable = function (x, y) {\n    if (map[x + \",\" + y]) {\n      return (map[x + \",\" + y].type === 'GROUND');\n    } else {\n      return false\n    }\n  }\n  let astar = new ROT.Path.AStar(targetPos.x, targetPos.y, isPassable, { topology });\n  let path = [];\n  astar.compute(currentPos.x, currentPos.y, function (x, y) {\n    path.push({ x, y })\n  });\n\n  return path.slice(1);\n}\n\nexport const calculatePathWithRange = (game, targetPos, currentPos, topology, range) => {\n  let path = calculatePath(game, targetPos, currentPos, topology);\n  return path.slice(0, range + 1);\n}\n\nexport const getRandomPos = (map) => {\n  let keys = Object.keys(map);\n  let key = getRandomInArray(keys).split(',');\n  let pos = { x: parseInt(key[0]), y: parseInt(key[1])}\n  return {coordinates: pos, text: key}\n}\n\nexport const getDestructableEntities = (entites) => {\n  return entites.filter((entity) => entity.hasOwnProperty('durability'));\n}\n\nconst getGranularity = (radius) => {\n  let result = (2 / 3) * (Math.pow(radius, 3) - (9 * Math.pow(radius, 2)) + (32 * radius) - 18)\n  return result\n}\n\nexport const getPointsOnCircumference = (centerX = 0, centerY = 0, r = 3) => {\n  const n = getGranularity(r);\n  let list = [];\n  for (let i = 0; i < n; i++) {\n    let x = Math.round(centerX + (Math.cos(2 * Math.PI / n * i) * r))\n    let y = Math.round(centerY + (Math.sin(2 * Math.PI / n * i) * r))\n    list.push({ x, y });\n  }\n  return list\n}\n","import * as Helper from '../../helper';\n\nexport const destroyEntity = (entity) => {\n  entity.energy = 0;\n  if (entity.pos) {\n    let tile = entity.game.map[Helper.coordsToString(entity.pos)];\n    entity.game.map[Helper.coordsToString(entity.pos)].entities = tile.entities.filter((e) => e.id !== entity.id);\n  }\n  // entity.game.engine.actors = entity.game.engine.actors.filter((e) => e.id !== entity.id);\n  entity.game.engine.removeStatusEffectByActorId(entity.id);\n  entity.game.draw()\n  entity.active = false;\n}","import * as Helper from '../helper'\n\nexport const ENERGY_THRESHOLD = 100;\n\nexport const COLORS = {\n  black_1: '#424242',\n  gray_1: '#262d37',\n  gray_2: '#606b79',\n  gray_4: '#B7C3CD',\n  gray_5: '#CED5DD',\n  green_1: '#1d533c',\n  green_2: '#227743',\n  green_3: '#2d9c59',\n  red_4: '#D82D33',\n  red_5: '#E16264',\n  purple_3: '#c45ffd',\n}\n\nexport const TILE_KEY = {\n  'GROUND': {\n    background: '#a99b81',\n    foreground: 'white',\n    // background: COLORS.black_1,\n    // foreground: COLORS.gray_2,\n    character: '.',\n    passable: true,\n  },\n  'WALL': {\n    background: '#748363',\n    foreground: 'white',\n    // background: COLORS.black_1,\n    // foreground: COLORS.gray_2,\n    character: '#',\n    passable: false,\n  },\n  'WATER': {\n    animation: [\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#8aa', character: '▒', passable: false, },\n      { background: '#424242', foreground: '#8aa', character: '▓', passable: false, },\n    ],\n    background: '#9dc3d3',\n    character: '░',\n    passable: false,\n  },\n  'WIN': {\n    background: 'white',\n    foreground: 'black',\n    character: 'W',\n    passable: true,\n  }\n}\n\nexport const HAND_SIGNS = {\n  Power: {\n    type: 'Power',\n    name: 'Rin',\n    description: 'Strength of mind, body, spirit',\n  },\n  Energy: {\n    type: 'Energy',\n    name: 'Pyo',\n    description: 'energy direction',\n  },\n  Harmony: {\n    type: 'Harmony',\n    name: 'To',\n    description: 'one- ness with the universe or self',\n  },\n  Healing: {\n    type: 'Healing',\n    name: 'Sha',\n    description: 'of self and others',\n  },\n  Intuition: {\n    type: 'Intuition',\n    name: 'Kai',\n    description: 'premonition of danger, feeling others intent',\n  },\n  Awareness: {\n    type: 'Awareness',\n    name: 'Jin',\n    description: 'feeling thoughts of others, perhaps hiding your own',\n  },\n  Dimension: {\n    type: 'Dimension',\n    name: 'Retsu',\n    description: 'control of time and space',\n  },\n  Creation: {\n    type: 'Creation',\n    name: 'Zai',\n    description: 'understanding nature',\n  },\n  Absolute: {\n    type: 'Absolute',\n    name: 'Zen',\n    description: 'enlightenment',\n  }, \n}\n\nexport const DIRECTIONS = {\n  N: [0, -1],\n  NE: [1, -1],\n  W: [-1, 0],\n  NW: [-1, -1],\n  SW: [-1, 1],\n  S: [0, 1],\n  SE: [1, 1],\n  E: [1, 0],\n  NONE: [0, 0],\n}\n\nexport const getDirectionKey = (direction) => {\n  let directionString = `${direction}`;\n  let keys = Object.keys(DIRECTIONS);\n  let result = false\n  keys.forEach((key) => {\n    if (`${DIRECTIONS[key]}` === directionString) {\n      result = key\n    }\n  })\n  return result\n}\n\nexport const EQUIPMENT_TYPES = {\n  HEAD: 'HEAD',\n  TORSO: 'TORSO',\n  BACK: 'BACK',\n  HAND: 'HAND',\n  FEET: 'FEET',\n}\n\nexport const EQUIPMENT_LAYOUTS = {\n  human: () => {\n    return [\n      {type: EQUIPMENT_TYPES.HEAD, name: 'head', item: null},\n      {type: EQUIPMENT_TYPES.TORSO, name: 'torso', item: null},\n      {type: EQUIPMENT_TYPES.BACK, name: 'back', item: null},\n      {type: EQUIPMENT_TYPES.HAND, name: 'left_hand', item: null},\n      {type: EQUIPMENT_TYPES.HAND, name: 'right_hand', item: null},\n      {type: EQUIPMENT_TYPES.FEET, name: 'feet', item: null},\n    ]\n  }\n}\n\nexport const CLONE_PATTERNS = {\n  verticalLine: {\n    x_offset: 1,\n    y_offset: 1,\n    positions: [\n      { x: 0, y: 0, taken: false, },\n      { x: 0, y: 1, taken: false, },\n      { x: 0, y: -1, taken: false, },\n    ]\n  },\n  smallSquare: {\n    x_offset: 1,\n    y_offset: 1,\n    positions: [\n      { x: 0, y: 0, taken: false, },\n      { x: 0, y: 1, taken: false, },\n      { x: 1, y: 1, taken: false, },\n      { x: 1, y: 0, taken: false, },\n    ]\n  },\n  square: {\n    x_offset: 2,\n    y_offset: 2,\n    positions: [\n      { x: 0, y: 0, taken: false, },\n      { x: 0, y: 1, taken: false, },\n      { x: 1, y: 1, taken: false, },\n      { x: 1, y: 0, taken: false, },\n      { x: 1, y: -1, taken: false, },\n      { x: 0, y: -1, taken: false, },\n      { x: -1, y: -1, taken: false, },\n      { x: -1, y: 0, taken: false, },\n      { x: -1, y: 1, taken: false, },\n    ]\n  },\n  bigSquare: {\n    x_offset: 2,\n    y_offset: 2,\n    positions: [\n      { x: 0, y: 0, taken: false, },\n      { x: 0, y: 1, taken: false, },\n      { x: 1, y: 1, taken: false, },\n      { x: 1, y: 0, taken: false, },\n      { x: 1, y: -1, taken: false, },\n      { x: 0, y: -1, taken: false, },\n      { x: -1, y: -1, taken: false, },\n      { x: -1, y: 0, taken: false, },\n      { x: -1, y: 1, taken: false, },\n      { x: 0, y: 1, taken: false, },\n      { x: 2, y: 2, taken: false, },\n      { x: 2, y: 0, taken: false, },\n      { x: 2, y: -2, taken: false, },\n      { x: 0, y: -2, taken: false, },\n      { x: -2, y: -2, taken: false, },\n      { x: -2, y: 0, taken: false, },\n      { x: -2, y: 2, taken: false, },\n    ],\n  },\n  circle: {\n    x_offset: 0,\n    y_offset: 0,\n    positions: [\n      ...Helper.getPointsOnCircumference(0, 0, 2),\n      ...Helper.getPointsOnCircumference(0, 0, 3)\n    ]\n  },\n}\n\nexport const PARTICLE_TEMPLATES = {\n  default: {\n    renderer: {\n      character: '*',\n      color: 'black',\n      background: 'white',\n    }\n  },\n  fail: {\n    renderer: {\n      character: 'x',\n      color: 'black',\n      background: 'red',\n    }\n  },\n  damage: {\n    renderer: {\n      character: '*',\n      color: 'darkred',\n      background: 'red',\n    }\n  },\n  leaf: {\n    renderer: {\n      character: '✤',\n      color: '#36635b',\n      background: '#F0D8C0',\n    }\n  },\n}\n\nexport const PARTICLE_TYPE = {\n  directional: 0,\n  path: 1,\n}\n\nexport const ALPHABET = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];","import { COLORS } from './constants';\nimport uuid from 'uuid/v1';\n\nexport const MESSAGE_TYPE = {\n  INFORMATION: {\n    color: COLORS.gray_4,\n    backgroundColor: COLORS.black_1,\n  },\n  ACTION: {\n    color: COLORS.gray_2,\n    backgroundColor: COLORS.gray_5,\n  },\n  DANGER: {\n    color: COLORS.red_5,\n    backgroundColor: COLORS.black_1,\n  },\n  STATUS_EFFECT: {\n    color: COLORS.purple_3,\n    backgroundColor: COLORS.black_1,\n  },\n}\n\nexport class Message {\n  constructor({ text = '', type = MESSAGE_TYPE.INFORMATION }) {\n    let id = uuid();\n    this.id = id;\n    this.text = text;\n    this.type = type;\n  }\n}","import * as Helper from '../helper';\nimport * as Action from './actions';\nimport * as Constant from './constants';\nimport { cloneDeep } from 'lodash';\nimport uuid from 'uuid/v1';\nimport { Particle } from './entites';\nimport { MESSAGE_TYPE } from './message';\n\nexport class Base {\n  constructor({\n    game, \n    actor, \n    energyCost = 100, \n    processDelay = 50, \n    particles = [], \n    particleTemplate = Constant.PARTICLE_TEMPLATES.default,\n    onBefore = () => null,\n    onAfter = () => null,\n    onSuccess = () => null,\n    onFailure = () => null,\n    interrupt = false,\n  }) {\n    this.actor = actor\n    this.game = game\n    this.energyCost = energyCost\n    this.processDelay = processDelay\n    this.particles = particles\n    this.particleTemplate = particleTemplate\n    this.onBefore = onBefore\n    this.onAfter = onAfter\n    this.onSuccess = onSuccess\n    this.onFailure = onFailure\n    this.interrupt = interrupt\n  }\n\n  addParticle(\n    life, \n    pos, \n    direction, \n    renderer = {...this.particleTemplate.renderer}, \n    type = Constant.PARTICLE_TYPE.directional, \n    path = null\n  ) {\n    let particle = new Particle({\n      game: this.game,\n      name: 'particle',\n      passable: true,\n      life,\n      pos,\n      direction,\n      energy: 100,\n      renderer,\n      type,\n      path,\n    })\n    this.particles.push(particle);\n  }\n\n  removeDeadParticles() {\n    this.particles = this.particles.filter((particle) => particle.life > 0);\n  }\n\n  perform() {\n    console.log(`${this.actor.name} performs`)\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n}\n\nexport class AddStatusEffect extends Base {\n  constructor({ effect, processDelay = 0, ...args }) {\n    super({ ...args });\n    this.effect = effect\n    this.processDelay = processDelay\n  }\n\n  perform() {\n    let success = this.game.engine.addStatusEffect(this.effect);\n    let positions = Helper.getPointsOnCircumference(this.actor.pos.x, this.actor.pos.y, 2);\n    positions.forEach((pos) => {\n      this.addParticle(\n        5, \n        {...pos}, \n        {\n          x: Math.sign(pos.x - this.actor.pos.x), \n          y: Math.sign(pos.y - this.actor.pos.y)\n        },\n      )\n    })\n    if (success) this.actor.energy -= this.energyCost;\n    return {\n      success,\n      alternative: null,\n    }\n  }\n};\n\nexport class Say extends Base {\n  constructor({ message, processDelay = 50, ...args}) {\n    super({...args});\n    this.message = message\n    this.processDelay = processDelay\n  }\n  perform() {\n    this.game.addMessage(`${this.actor.name} says ${this.message}`, MESSAGE_TYPE.INFORMATION);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class SayManyThings extends Base {\n  constructor({ messages, processDelay = 50, ...args}) {\n    super({...args});\n    this.messages = messages\n    this.processDelay = processDelay\n  }\n  perform() {\n    let message = this.messages.shift();\n    if (message) {\n      this.game.addMessage(`${this.actor.name} says ${message}`, MESSAGE_TYPE.INFORMATION);\n      this.actor.energy -= this.energyCost;\n    }\n    if (this.messages.length) {\n      this.actor.setNextAction(this);\n    }\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class EquipItemFromContainer extends Base {\n  // entities can only equip items from their container/inventory\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    if (this.item.equipmentType) {\n      let itemInSlot = this.actor.getItemInSlot(this.item.equipmentType);\n      if (itemInSlot) {\n        this.actor.addToContainer(itemInSlot);\n        this.actor.unequip(itemInSlot);\n      }\n      this.actor.removeFromContainer(this.item);\n      this.actor.equip(this.item.equipmentType, this.item);\n      this.game.addMessage(`${this.actor.name} equips ${this.item.name}.`, MESSAGE_TYPE.ACTION);\n      success = true;\n    }\n\n    this.actor.energy -= this.energyCost;\n    \n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class EquipItemFromTile extends Base {\n  // entities can only equip items from their container/inventory\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n\n  perform () {\n    let success = false;\n    let alternative = null;\n    if (this.item.equipmentType) {\n      let itemInSlot = this.actor.getItemInSlot(this.item.equipmentType);\n      if (itemInSlot) {\n        this.game.map[Helper.coordsToString(this.actor.pos)].entities.push(itemInSlot);\n      }\n\n      let entities = this.game.map[Helper.coordsToString(this.actor.pos)].entities\n      this.game.map[Helper.coordsToString(this.actor.pos)].entities = entities.filter((it) => it.id !== this.item.id);\n      \n      this.actor.equip(this.item);\n      this.game.addMessage(`${this.actor.name} equips ${this.item.name}.`, MESSAGE_TYPE.ACTION);\n      success = true;\n    }\n\n    this.actor.energy -= this.energyCost;\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class UnequipItem extends Base {\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n  perform() {\n    this.game.addMessage(`${this.actor.name} puts ${this.item.name} away.`, MESSAGE_TYPE.ACTION);\n    this.actor.unequip(this.item);\n    this.actor.addToContainer(this.item);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class DropItem extends Base {\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n  perform() {\n    this.game.addMessage(`${this.actor.name} drops ${this.item.name}.`, MESSAGE_TYPE.ACTION);\n    this.actor.removeFromContainer(this.item);\n    this.game.map[Helper.coordsToString(this.actor.pos)].entities.push(this.item);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class PickupItem extends Base {\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n  perform() {\n    this.game.addMessage(`${this.actor.name} picks up ${this.item.name}.`, MESSAGE_TYPE.ACTION);\n    this.actor.addToContainer(this.item);\n    let entities = this.game.map[Helper.coordsToString(this.actor.pos)].entities\n    this.game.map[Helper.coordsToString(this.actor.pos)].entities = entities.filter((it) => it.id !== this.item.id);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class DestroySelf extends Base {\n  constructor({processDelay = 0, ...args}) {\n    super({...args});\n    this.processDelay = processDelay\n  }\n  perform() {\n    // console.log(`${this.actor.name} is self-destructing`);\n    this.actor.energy -= this.energyCost;\n    this.actor.destroy();\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class CloneSelf extends Base {\n  constructor({cloneArgs = [], ...args}) {\n    super({...args});\n    this.cloneArgs = cloneArgs;\n  }\n\n  perform() {\n    let success = false;\n    if (this.actor.createClone(this.cloneArgs)) {\n      success = true;\n      this.actor.energy -= this.energyCost;\n      this.game.addMessage(`${this.actor.name} is cloning itself`, MESSAGE_TYPE.ACTION);\n    }\n    // let clone = cloneDeep(this.actor);\n    // clone.game = this.actor.game;\n    // clone.id = uuid();\n    // this.cloneArgs.forEach((arg) => {\n    //   console.log(arg);\n      \n    //   clone[arg.attribute] = arg.value\n    // });\n    // if (this.game.placeActorOnMap(clone)) {\n    //   this.game.engine.addActorAsNext(clone);\n    //   this.game.draw();\n    //   success = true;\n    // };\n    return {\n      success,\n      alternative: null,\n    }\n  }\n};\n\nexport class Charge extends Base {\n  constructor({chargeAmount, ...args}) {\n    super({...args});\n    this.chargeAmount = chargeAmount;\n  }\n  perform() {\n    this.game.addMessage(`${this.actor.name} is charging up!`, MESSAGE_TYPE.ACTION);\n    this.actor.energy -= this.energyCost;\n    this.actor.increaseCharge(this.chargeAmount);\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class Release extends Base {\n  constructor({ chargeCost, ...args }) {\n    super({ ...args });\n    this.chargeCost = chargeCost;\n  }\n  perform() {\n    let success = false;\n    if (this.actor.charge >= this.chargeCost) {\n      this.game.addMessage(`${this.actor.name} is releasing ${this.chargeCost} volts!`, MESSAGE_TYPE.ACTION);\n      this.actor.energy -= this.energyCost;\n      this.actor.decreaseCharge(this.chargeCost);\n      success = true;\n    }\n    return {\n      success,\n      alternative: null,\n    }\n  }\n};\n\nexport class Sign extends Base {\n  constructor({ sign, ...args }) {\n    super({ ...args });\n    this.sign = sign;\n  }\n  perform() {\n    this.game.addMessage(`${this.actor.name} threw a ${this.sign.name} sign.`, MESSAGE_TYPE.ACTION);\n    this.actor.addSign(this.sign);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class SignRelease extends Base {\n  constructor({requiredSequence = [], ...args}) {\n    super({...args});\n    this.requiredSequence = requiredSequence;\n  }\n\n  requiredSequenceIsFulfilled () {\n    let signHistory = this.actor.signHistory.concat();\n    let relevantHistory = signHistory.slice(\n      Math.max(signHistory.length - this.requiredSequence.length, 0)\n    )\n    let result = JSON.stringify(relevantHistory) === JSON.stringify(this.requiredSequence);\n    return result\n  }\n\n  perform() {\n    let success = false;\n    if (this.requiredSequenceIsFulfilled()) {\n      this.game.addMessage(\n        `${this.actor.name} is releasing the power of ${this.requiredSequence.map(\n          (sign) => sign.type\n        ).join(' and ')}!`,\n        MESSAGE_TYPE.ACTION\n      );\n      this.actor.energy -= this.energyCost;\n      success = true;\n      this.actor.clearSigns();\n    }\n    return {\n      success,\n      alternative: null,\n    }\n  }\n};\n\nexport class CursorMove extends Base {\n  constructor({ targetPos, processDelay = 0, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.processDelay = processDelay\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n\n    if (this.game.cursorCanOccupyPosition(this.targetPos)) {\n      let tile = this.game.map[Helper.coordsToString(this.actor.pos)]\n      this.game.map[Helper.coordsToString(this.actor.pos)] = { ...tile, entities: tile.entities.filter((e) => e.id !== this.actor.id) }\n      this.actor.pos = this.targetPos\n      this.game.map[Helper.coordsToString(this.targetPos)].entities.push(this.actor);\n      success = true;\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class ParticleMove extends CursorMove {\n  constructor({...args}) {\n    super({...args})\n  }\n\n  perform () {\n    this.actor.energy -= this.energyCost;\n    if (this.actor.energy <= 0) {\n      this.actor.destroy();\n      return { success: false }\n    } \n    return super.perform();\n  }\n}\n\nexport class PlaceActor extends Base {\n  constructor({ targetPos, entity, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.entity = entity\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    \n    // let canPlace = true;\n    // if (!this.game.canOccupyPosition(this.targetPos, this.entity)) canPlace = false;\n    // if (this.entity.entityTypes.includes('PARENT')) {\n    //   this.entity.children.forEach((child) => {\n    //     console.log(child.pos);\n        \n    //     if (!this.game.canOccupyPosition(child.pos, child)) canPlace = false;\n    //   })\n    // }\n\n    // if (canPlace) {\n    //   this.entity.pos = this.targetPos;\n    //   this.game.engine.addActorAsPrevious(this.entity);\n    //   this.game.engine.start(); // should this be used outside of engine?\n    //   success = true;      \n    // }\n    if (this.game.canOccupyPosition(this.targetPos, this.entity)) {\n      this.entity.pos = this.targetPos;\n      // this.game.engine.addActorAsPrevious(this.entity);\n      // this.game.engine.addActor(this.entity);\n      this.game.engine.addActorAsNext(this.entity);\n      this.interrupt = true;\n      // this.game.engine.start(); // BUGGED - should this be used outside of engine?\n      success = true;\n    }\n      \n    if (success) {\n      this.actor.energy -= this.energyCost;\n    }\n    \n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class PlaceItem extends Base {\n  constructor({ targetPos, entity, processDelay = 25, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.processDelay = processDelay\n    this.entity = entity\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    \n    if (this.game.canOccupyPosition(this.targetPos, this.entity)) {\n      this.entity.pos = this.targetPos;\n      success = this.game.placeActorOnMap(this.entity)\n    }\n      \n    if (success) {\n      this.actor.energy -= this.energyCost;\n    }\n    \n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class PlaceItems extends PlaceItem {\n  constructor({targetPositions = [], ...args}) {\n    super({...args});\n    this.targetPositions = targetPositions\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    this.targetPositions.forEach((targetPos) => {\n      if (this.game.canOccupyPosition(targetPos, this.entity)) {\n        let clone = cloneDeep(this.entity);\n        clone.game = this.game;\n        clone.id = uuid();\n        clone.pos = targetPos;\n        let placementSuccess = this.game.placeActorOnMap(clone);\n        if (placementSuccess) success = true;\n      }\n    });\n\n    if (success) this.actor.energy -= this.energyCost;\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class Move extends Base {\n  constructor({ targetPos, processDelay = 25, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.processDelay = processDelay\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    let moveSuccess = this.actor.move(this.targetPos);\n    if (moveSuccess) {\n      this.actor.energy -= this.energyCost;\n      success = true;\n    } else {\n      success = true;\n      alternative = new Action.Attack({\n        targetPos: this.targetPos,\n        game: this.game, \n        actor: this.actor, \n        energyCost: Constant.ENERGY_THRESHOLD\n      })\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class ProjectileMove extends Base {\n  constructor({ targetPos, damageToSelf = 1, processDelay = 25, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.processDelay = processDelay\n    this.damageToSelf = damageToSelf\n  }\n\n  perform() {\n    let success = false;\n    let alternative = null;\n    let moveSuccess = this.actor.move(this.targetPos);\n    if (moveSuccess) {\n      this.actor.energy -= this.energyCost;\n      success = true;\n    } else {\n      success = true;\n      alternative = new Action.SelfDestructiveAttack({\n        targetPos: this.targetPos,\n        game: this.game, \n        actor: this.actor, \n        energyCost: Constant.ENERGY_THRESHOLD,\n        damageToSelf: this.damageToSelf,\n      })\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class MoveMultiple extends Base {\n  constructor({ direction, stepCount, processDelay = 25, ...args}) {\n    super({...args});\n    this.direction = direction;\n    this.stepCount = stepCount;\n    this.processDelay = processDelay;\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    let newX = this.actor.pos.x + this.direction[0];\n    let newY = this.actor.pos.y + this.direction[1];\n    let targetPos = { x: newX, y: newY };\n    \n    if (this.stepCount > 0 && this.actor.move(targetPos)) {\n      this.stepCount -= 1;\n      this.actor.energy -= this.energyCost;\n      this.actor.setNextAction(this);\n      success = true;\n    } else {\n      success = true;\n      alternative = new Action.Attack({\n        targetPos: targetPos,\n        game: this.game, \n        actor: this.actor, \n        energyCost: Constant.ENERGY_THRESHOLD\n      })\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class Shove extends Base {\n  constructor({ targetPos, direction, ...args }) {\n    super({ ...args });\n    this.targetPos = targetPos\n    this.direction = direction\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    let moveSuccess = this.actor.shove(this.targetPos, this.direction)\n    \n    if (moveSuccess) {\n      this.actor.energy -= this.energyCost;\n      success = true;\n    } else {\n      success = true;\n      alternative = new Action.Attack({\n        targetPos: this.targetPos,\n        game: this.game,\n        actor: this.actor,\n        energyCost: Constant.ENERGY_THRESHOLD\n      })\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class Tackle extends MoveMultiple {\n  constructor({ direction, stepCount, additionalAttackDamage = 0, processDelay = 25, ...args}) {\n    super({...args});\n    this.direction = direction;\n    this.stepCount = stepCount;\n    this.additionalAttackDamage = additionalAttackDamage;\n    this.processDelay = processDelay;\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    let newX = this.actor.pos.x + this.direction[0];\n    let newY = this.actor.pos.y + this.direction[1];\n    let targetPos = { x: newX, y: newY };\n    \n    if (this.stepCount > 0 && this.actor.shove(targetPos, this.direction)) {\n      this.stepCount -= 1;\n      this.actor.energy -= this.energyCost;\n      this.actor.setNextAction(this);\n      for (let i = 0; i < 3; i++) {\n        this.addParticle(\n          1,\n          {\n            x: this.actor.pos.x - (this.direction[0] * i),\n            y: this.actor.pos.y - (this.direction[1] * i),\n          },\n          { x: 0, y: 0 }\n        )\n      }\n      success = true;\n    } else {\n      success = true;\n      this.actor.attack(targetPos, this.additionalAttackDamage);\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class Attack extends Base {\n  constructor({ targetPos, processDelay = 100, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.processDelay = processDelay\n    this.particleTemplate = Constant.PARTICLE_TEMPLATES.damage\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    \n    if (!this.actor.entityTypes.includes('ATTACKING')) { \n      return { \n        success: true, \n        alternative: new Action.Say({\n          message: `Ooh I don\\'t know how to attack`,\n          game: this.game,\n          actor: this.actor,\n        }),\n      } \n    }\n    \n    success = this.actor.attack(this.targetPos);\n    if (success) {\n      this.addParticle(1, {...this.targetPos}, {x: 0, y:0})\n      this.actor.energy -= this.energyCost;\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class SelfDestructiveAttack extends Attack {\n  constructor({ damageToSelf, ...args }) {\n    super({ ...args });\n    this.damageToSelf = damageToSelf\n    this.onSuccess = () => {\n      console.log('Self destruct success');\n      this.actor.decreaseDurabilityWithoutDefense(damageToSelf)\n    }\n    this.onFailure = () => {\n      console.log('Self destruct fails');\n      this.actor.destroy()\n    }\n  }\n}\n\nexport class MultiTargetAttack extends Base {\n  constructor({ targetPositions, processDelay = 25, ...args }) {\n    super({ ...args });\n    this.targetPositions = targetPositions\n    this.processDelay = processDelay\n  }\n\n  perform() {\n    let success = false;\n    let alternative = null;\n    \n    if (!this.actor.entityTypes.includes('ATTACKING')) {\n      return {\n        success: true,\n        alternative: new Action.Say({\n          message: `Ooh I don\\'t know how to attack`,\n          game: this.game,\n          actor: this.actor,\n        }),\n      }\n    }\n\n    let particlePath = [];\n    let particlePos = { x: this.actor.pos.x, y: this.actor.pos.y };\n    let renderer = this.particleTemplate.renderer;\n    this.targetPositions.forEach((targetPos) => {\n      let attackSuccess = this.actor.attack(targetPos);\n      particlePath.push(targetPos);\n      if (attackSuccess) success = true\n    })\n    this.addParticle(\n      particlePath.length + 1, \n      particlePos, \n      null, \n      renderer, \n      Constant.PARTICLE_TYPE.path, \n      particlePath\n    )\n    \n    if (success) { \n      this.actor.energy -= this.energyCost; \n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class ThrowProjectile extends Move {\n  constructor({ ...args }) {\n    super({ ...args });\n  }\n\n  perform () {\n    let success = false;\n    let alternative = null;\n    this.actor.passable = false;\n    let move_result = super.perform();\n\n    if (move_result.success) {\n      this.actor.path.shift();\n      success = true;\n    }\n    if (this.actor.path.length === 0) {\n      success = true;\n      alternative = new Action.DestroySelf({\n        game: this.game,\n        actor: this.actor,\n        energyCost: Constant.ENERGY_THRESHOLD,\n        processDelay: 0,\n      });\n    }\n    if (move_result.alternative) {\n      let attackSuccess = this.actor.attack(this.targetPos);\n      if (attackSuccess) {\n        alternative = new Action.DestroySelf({\n          game: this.game,\n          actor: this.actor,\n          energyCost: Constant.ENERGY_THRESHOLD,\n          processDelay: 0,\n        });\n      }\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n}\n\nexport class ThrowProjectileGas extends Move {\n  constructor({ ...args }) {\n    super({ ...args });\n    this.processDelay = 0\n  }\n\n  perform () {\n    let success = false;\n    let alternative = null;\n    this.actor.passable = false;\n    let move_result = super.perform();\n    if (move_result.success) {\n      this.actor.path.shift();\n      success = true;\n    } \n    if (this.actor.path.length === 0) {\n      success = true;\n      alternative = new Action.DestroySelf({\n        game: this.game,\n        actor: this.actor,\n        energyCost: Constant.ENERGY_THRESHOLD,\n        processDelay: 0,\n      });\n    }\n    if (move_result.alternative) {\n      this.actor.attack(this.targetPos)\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n}\n\nexport class CrankEngine extends Base {\n  constructor({ engine, ...args }) {\n    super({ ...args });\n    this.engine = engine;\n  }\n  async perform() {\n    let success = true;\n    let alternative = null;\n\n    console.log(`${this.actor.name} is cranking its engine.`);\n    try {\n      await this.engine.start();\n      this.actor.energy -= this.energyCost;\n    } catch (error) {\n      console.log('CrankEngine');\n      console.log(error);\n      alternative = new Action.DestroySelf({\n        game: this.game,\n        actor: this.actor,\n        energyCost: Constant.ENERGY_THRESHOLD,\n      });\n    }\n    \n    return {\n      success,\n      alternative,\n    }\n  }\n};\n","import uuid from 'uuid/v1';\nimport pipe from 'lodash/fp/pipe';\nimport * as Helper from '../helper';\nimport { destroyEntity } from './Entities/helper';\nimport * as Constant from './constants';\nimport * as Action from './actions';\nimport * as Engine from './engine';\nimport { cloneDeep, cloneDeepWith } from 'lodash';\nimport { MESSAGE_TYPE } from './message';\n\nexport class Entity {\n  constructor({ game = null, name = null, passable = false}) {\n    let id = uuid();\n    this.entityTypes = ['Entity']\n    this.id = id;\n    this.name = name;\n    this.game = game;\n    this.passable = passable;\n    this.active = true;\n  }\n}\n\nconst Parent = superclass => class extends superclass {\n  constructor({ children = [], engine = new Engine.CrankEngine({}), ...args }) {\n    super({...args })\n    this.entityTypes = this.entityTypes.concat('PARENT');\n    this.children = children;\n    this.engine = engine;\n    this.isInitialized = false;\n  }\n\n  destroyChild(child) {\n    child.energy = 0;\n    let tile = this.game.map[Helper.coordsToString(child.pos)];\n    this.game.map[Helper.coordsToString(child.pos)].entities = tile.entities.filter((e) => e.id !== child.id);\n    this.engine.actors = this.engine.actors.filter((e) => e.id !== child.id);\n    this.game.draw()\n  }\n\n  canAttack (entity) {\n    const childIds = this.children.map((child) => child.id); \n    return !childIds.includes(entity.id)\n  }\n  \n  initialize() {\n    this.isInitialized = true;\n    this.engine.game = this.game;\n    this.engine.actors = this.children;\n    this.engine.actors.forEach((actor) => {\n      actor.game = this.game;\n      actor.destroy = () => {this.destroyChild(actor)};\n      actor.canAttack = this.canAttack.bind(this);\n      // actor.canAttack = (entity) => {this.canAttack(entity)};\n      this.game.placeActorOnMap(actor)\n      this.engine.addActor(actor);\n      this.game.draw();\n    });\n  }\n\n  getAction(game) {\n    // crank engine one turn\n    if (!this.isInitialized) {\n      this.initialize()\n    }\n\n    let result = new Action.CrankEngine({\n      game,\n      actor: this,\n      engine: this.engine,\n      energyCost: Constant.ENERGY_THRESHOLD,\n      processDelay: 10\n    });\n\n    return result;\n  }\n\n}\n\nconst HasInnerGates = superclass => class extends superclass {\n  constructor({ currentGate = null, gates = [], ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('HAS_INNER_GATES');\n    this.currentGate = currentGate;\n    this.gates = [\n      {\n        name: 'Gate of Opening',\n        damageBuff: 1,\n        speedBuff: 100,\n        durabilityDebuff: 1,\n        character: '1'\n      },\n      {\n        name: 'Gate of Healing',\n        damageBuff: 1,\n        speedBuff: 100,\n        durabilityDebuff: 1,\n        character: '2'\n      },\n      {\n        name: 'Gate of Life',\n        damageBuff: 1,\n        speedBuff: 100,\n        durabilityDebuff: 1,\n        character: '3'\n      },\n      {\n        name: 'Gate of Pain',\n        damageBuff: 1,\n        speedBuff: 100,\n        durabilityDebuff: 1,\n        character: '4'\n      },\n      {\n        name: 'Gate of Limit',\n        damageBuff: 1,\n        speedBuff: 100,\n        durabilityDebuff: 1,\n        character: '5'\n      },\n    ];\n  }\n\n  setNextGate() {\n    let currentGate = this.currentGate;\n    let nextGate = null;\n    if (!currentGate) {\n      nextGate = this.gates[0];\n      this.currentGate = { ...nextGate };\n    } else {\n      let nextGateIndex = this.gates.findIndex((gate) => currentGate.name === gate.name) + 1;\n      if (this.gates.length > nextGateIndex) {\n        nextGate = this.gates[nextGateIndex];\n        this.currentGate = { ...nextGate };\n      }\n    }\n    return nextGate;\n  }\n\n  getNextGate() {\n    let currentGate = this.currentGate;\n    let nextGate = null;\n    if (!currentGate) {\n      nextGate = this.gates[0];\n    } else {\n      let nextGateIndex = this.gates.findIndex((gate) => currentGate.name === gate.name) + 1;\n      if (this.gates.length > nextGateIndex) {\n        nextGate = this.gates[nextGateIndex];\n      }\n    }\n    return nextGate;\n  }\n}\n\nconst UI = superclass => class extends superclass {\n  constructor({ initiatedBy = null, ...args }) {\n    super({...args })\n    this.entityTypes = this.entityTypes.concat('UI');\n    this.initiatedBy = initiatedBy;\n    this.active = true;\n  }\n\n  hasEnoughEnergy() {\n    return this.active;\n  }\n}\n\nexport const Attacking = superclass => class extends superclass {\n  constructor({attackDamage = 1, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('ATTACKING')\n    this.attackDamage = attackDamage;\n  }\n\n  getAttackDamage (additional = 0) {\n    return this.attackDamage + additional;\n  }\n\n  canAttack (entity) {\n    return true;\n  }\n\n  attack (targetPos, additional = 0) {\n    let success = false;\n    let tile = this.game.map[Helper.coordsToString(targetPos)]\n    if (!tile) { return success }\n    let targets = Helper.getDestructableEntities(tile.entities);\n    if (targets.length > 0) {\n      let target = targets[0];\n      if (this.canAttack(target)) {\n        let damage = this.getAttackDamage(additional);\n        if (this.entityTypes.includes('EQUIPING')) {\n          this.equipment.forEach((slot) => {\n            if (slot.item) {\n              if (slot.item.entityTypes.includes('ATTACKING')) {\n                damage += slot.item.getAttackDamage();\n              }\n            }\n          });\n        }\n        this.game.addMessage(`${this.name} does ${damage} to ${target.name}`, MESSAGE_TYPE.DANGER);\n        target.decreaseDurability(damage);\n        success = true;\n      }\n    }\n\n    return success;\n  }\n}\n\nexport const Equipable = superclass => class extends superclass {\n  constructor({name = 'nameless', equipmentType = Constant.EQUIPMENT_TYPES.HAND, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('EQUIPABLE')\n    this.name = name;\n    this.equipmentType = equipmentType;\n  }\n}\n\nconst Acting = superclass => class extends superclass {\n  constructor({name, actions = [], speed = 100, energy = 0, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('ACTING')\n    this.name = name;\n    this.actions = actions;\n    this.speed = speed;\n    this.energy = speed;\n  }\n\n  getAction() {\n    let action = Helper.getRandomInArray(this.actions)\n    if (action) { return action }\n  }\n\n  gainEnergy(value = this.speed) {\n    this.energy += value;\n  }\n\n  hasEnoughEnergy() {\n    return this.energy > 0;\n  }\n}\n\nconst Rendering = superclass => class extends superclass {\n  constructor({pos = {x: 0, y: 0}, renderer, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('RENDERING')\n    this.pos = pos;\n    this.renderer = {...renderer};\n    this.currentFrame = 0;\n  }\n\n  getPosition () {\n    return this.pos;\n  }\n\n  move (targetPos) {\n    let success = false;\n    if (this.game.canOccupyPosition(targetPos, this)) {\n      let tile = this.game.map[Helper.coordsToString(this.pos)]\n      this.game.map[Helper.coordsToString(this.pos)] = { ...tile, entities: tile.entities.filter((e) => e.id !== this.id) }\n      this.pos = targetPos\n      this.game.map[Helper.coordsToString(targetPos)].entities.push(this);\n      success = true;\n    }\n    return success;\n  }\n\n  shove (targetPos, direction) {\n    let success = false;\n    let targetTile = this.game.map[Helper.coordsToString(targetPos)];\n    if (targetTile) {\n      targetTile.entities.map((entity) => { \n        if (!entity.passable) {\n          let newX = entity.pos.x + direction[0];\n          let newY = entity.pos.y + direction[1];\n          let newPos = { x: newX, y: newY };\n          entity.move(newPos);\n        }\n      });\n    }\n    success = this.move(targetPos);\n    return success;\n  }\n}\n\nexport class ContainerSlot {\n  constructor({ itemType, items }) {\n    this.itemType = itemType;\n    this.items = items;\n  }\n}\n\nconst Containing = superclass => class extends superclass {\n  constructor({container = [], ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('CONTAINING')\n    this.container = container;\n  }\n\n  createSlot (item) {\n    let slot = new ContainerSlot({\n      itemType: item.name,\n      items: [item],\n    });\n    this.container.push(slot)\n  }\n\n  contains (itemType) {\n    let container = this.container;\n    let slots = container.filter((slot) => slot.itemType === itemType);\n    return slots.length > 0 ? slots[0].items[0] : false;\n  }\n\n  addToContainer (item) {\n    const index = this.container.findIndex((slot) => slot.itemType === item.name);\n    if (index >= 0) {\n      this.container[index].items.push(item);\n    } else {\n      this.createSlot(item);\n    }\n  }\n  \n  removeFromContainer (item) {\n    this.container.forEach((slot, index) => {\n      slot.items = slot.items.filter((it) => it.id !== item.id);\n      if (!slot.items.length) this.container.splice(index, 1);\n    });\n  }\n}\n\nconst Equiping = superclass => class extends superclass {\n  constructor({equipment = Constant.EQUIPMENT_LAYOUTS.human(), ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('EQUIPING')\n    this.equipment = equipment;\n  }\n\n  getItemInSlot (slotName) {\n    let openSlots = this.equipment.filter((slot) => {\n      return (slot.item === null && slot.type === slotName)\n    })\n    if (openSlots.length > 0) { return false; }\n    let slot = this.equipment.find((slot) => slot.type === slotName);\n    if (!slot) { return false; }\n    if (!slot.item) { return false; }\n    return slot.item;\n  }\n\n  equip (slotName, item) {\n    let foundSlot = false;\n    this.equipment = this.equipment.map((slot) => {\n      if (!foundSlot && slot.type === slotName && slot.item === null) {\n        slot.item = item;\n        foundSlot = true;\n      }\n      return slot;\n    })\n  }\n  \n  unequip(item) {\n    this.equipment = this.equipment.map((slot) => {\n      if (slot.item) {\n        if (slot.item.id === item.id) {\n          slot.item = null;\n        }\n      }\n      return slot;\n    })\n  }\n}\n\nconst Charging = superclass => class extends superclass {\n  constructor({charge = 10, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('CHARGING')\n    this.charge = charge;\n    this.chargeMax = charge;\n  }\n\n  decreaseCharge(value) {\n    this.charge = Math.max(0, this.charge - value);\n  }\n  \n  increaseCharge(value) {\n    this.charge = Math.min(this.chargeMax, this.charge + value);\n  }\n}\n\nconst Signing = superclass => class extends superclass {\n  constructor({...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('SIGNING')\n    this.signHistory = [];\n  }\n\n  addSign(sign) {\n    if (this.signHistory.length >= 4) {\n      this.signHistory.shift();\n    }\n    this.signHistory.push(sign);\n  }\n  \n  clearSigns() {\n    this.signHistory = [];\n  }\n}\n\nconst Playing = superclass => class extends superclass {\n  constructor({keymap = {}, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('PLAYING')\n    this.nextAction = null;\n    this.keymap = keymap;\n  }\n\n    setNextAction(action) {\n      this.nextAction = action;\n    }\n\n    getAction() {\n      let action = this.nextAction;\n      this.nextAction = null;\n      return action;\n    }\n}\n\nconst Cloning = superclass => class extends superclass {\n  constructor({cloneLimit = 1, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('CLONING')\n    this.cloneLimit = cloneLimit;\n    this.clones = [];\n  }\n  \n  // perhaps clones should have a status effect that leeches parent actor's energy or chakra\n  \n  // status effects should be removed from engine when owner is removed.\n  \n  destroy() {\n    // add function to override self destroy funtion \n    // if this actor dies, clones should be destroyed as well\n    if (this.clones) {\n      this.clones.map((clone) => {\n        destroyEntity(clone)\n      });\n    }\n    destroyEntity(this);\n  }\n\n  destroyClone (id) {\n  // overrides clone destroy function\n  // when clone is destroyed, clone count will change accordingly\n    const index = this.clones.findIndex((c) => c.id == id);\n    if (index >= 0) {\n      this.clones[index].super__destroy();\n      this.clones.splice(index, 1);\n    }\n  }\n\n  createClone (cloneArgs) {\n    if (this.clones.length < this.cloneLimit) {\n      let clone = cloneDeep(this);\n      clone.name += ` Clone ${this.clones.length}`\n      clone.game = this.game;\n      clone.id = uuid();\n      delete clone.clones;\n      clone['super__destroy'] = clone.destroy;\n      clone.destroy = () => { this.destroyClone(clone.id) };\n      cloneArgs.forEach((arg) => {\n        clone[arg.attribute] = arg.value\n      });\n      if (this.game.placeActorOnMap(clone)) {\n        this.game.engine.addActorAsNext(clone);\n        this.game.draw();\n        this.clones.push(clone);\n        return true;\n      };\n    }\n    return false;\n  }\n}\n\nconst Projecting = superclass => class extends superclass {\n  constructor({path = false, targetPos = null ,...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('PROJECTING')\n    this.path = path;\n    this.targetPos = targetPos;\n  }\n\n  createPath (game) {\n    let path = Helper.calculatePath(game, this.targetPos, this.pos, 8);\n    this.path = path;\n  }\n\n  getAction(game) {\n    if (!this.path) {\n      this.createPath(game);\n    }\n    let targetPos = this.path.length > 0 ? this.path[0] : this.pos;\n    let result = new Action.Move({\n      targetPos, \n      game, \n      actor: this, \n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n    if (this.game.canOccupyPosition(targetPos, this)) {\n      this.path.shift();\n    }\n    return result;\n  }\n}\n\nconst DestructiveProjecting = superclass => class extends superclass {\n  constructor({path = false, targetPos = null, attackDamage = 1, range = 3, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('DESTRUCTIVE_PROJECTING')\n    this.path = path;\n    this.targetPos = targetPos;\n    this.attackDamage = attackDamage;\n    this.range = range;\n  }\n\n  createPath (game) {\n    let path = Helper.calculatePathWithRange(game, this.targetPos, this.pos, 8, this.range);\n    this.path = path;\n  }\n\n  getAction (game) {\n    if (!this.path) {\n      this.createPath(game);\n    }\n\n    let targetPos = this.path.length > 0 ? this.path[0] : this.pos;\n    \n    let result = new Action.ThrowProjectile({\n      targetPos, \n      game, \n      actor: this, \n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n\n    return result;\n  }\n}\n\nconst DirectionalProjecting = superclass => class extends superclass {\n  constructor({path = false, direction = {x: 0, y: 0}, attackDamage = 1, range = 3, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('DIRECTIONAL_PROJECTING')\n    this.path = path;\n    this.direction = direction;\n    this.attackDamage = attackDamage;\n    this.range = range;\n  }\n\n  createPath(game) {\n    let path = [];\n    for (let i = 1; i < this.range + 1; i++) {\n      path.push({\n        x: this.pos.x + (this.direction[0] * i),\n        y: this.pos.y + (this.direction[1] * i)\n      })\n    }\n    this.path = path;\n  }\n\n  getAction (game) {\n    let result = null;\n    let newX = this.pos.x + this.direction[0];\n    let newY = this.pos.y + this.direction[1];\n    let targetPos = { x: newX, y: newY };\n    this.passable = false\n    \n    if (this.range > 0) {\n      result = new Action.ProjectileMove({\n        targetPos: targetPos,\n        game: game,\n        actor: this,\n        energyCost: Constant.ENERGY_THRESHOLD,\n        damageToSelf: 1,\n        onSuccess: () => this.range -= 1,\n        onAfter: () => {\n          if (this.energy <= 100) {\n            game.engine.setActorToPrevious();\n          }\n        }\n      })\n    } else {\n      result = new Action.DestroySelf({\n        game: game,\n        actor: this,\n        energyCost: 0\n      })\n    }\n\n    return result;\n  }\n}\n\nconst DirectionalPushing = superclass => class extends superclass {\n  constructor({path = false, direction = {x: 0, y: 0}, range = 3, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('DIRECTIONAL_PUSHING')\n    this.path = path;\n    this.direction = direction;\n    this.range = range;\n  }\n\n  getAction (game) {\n    let result = null;\n    let newX = this.pos.x + this.direction[0];\n    let newY = this.pos.y + this.direction[1];\n    let targetPos = { x: newX, y: newY };\n    this.passable = false\n    \n    if (this.range > 0) {\n      result = new Action.Shove({\n        targetPos: targetPos,\n        direction: this.direction,\n        game: game,\n        actor: this,\n        energyCost: Constant.ENERGY_THRESHOLD,\n        onSuccess: () => this.range -= 1,\n      })\n    } else {\n      result = new Action.DestroySelf({\n        game: game,\n        actor: this,\n        energyCost: 0\n      })\n    }\n\n    return result;\n  }\n}\n\nconst GaseousDestructiveProjecting = superclass => class extends superclass {\n  constructor({owner_id = null, path = false, targetPos = null, attackDamage = 1, range = 3, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('GASEOUS_DESTRUCTIVE_PROJECTING')\n    this.path = path;\n    this.targetPos = targetPos;\n    this.attackDamage = attackDamage;\n    this.range = range;\n    this.owner_id = owner_id;\n  }\n\n  canAttack (entity) {\n    let success = super.canAttack();\n    if (success) {\n      success = this.owner_id === null || (entity.owner_id !== this.owner_id);\n    }\n    return success\n  }\n\n  createPath (game) {\n    let path = Helper.calculatePathWithRange(game, this.targetPos, this.pos, 8, this.range);\n    this.path = path;\n  }\n\n  getAction (game) {\n    if (!this.path) {\n      this.createPath(game);\n    }\n    let targetPos = this.path.length > 0 ? this.path[0] : this.pos;\n    \n    let result = new Action.ThrowProjectileGas({\n      targetPos, \n      game, \n      actor: this, \n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n\n    return result;\n  }\n}\n\nconst Gaseous = superclass => class extends superclass {\n  constructor({\n    isClone = false,\n    cloneCount = 0,\n    clonePattern = Constant.CLONE_PATTERNS.square,\n    ...args\n  }) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('GASEOUS')\n    this.isClone = isClone;\n    this.cloneCount = cloneCount;\n    this.clonePattern = cloneDeep(clonePattern);\n  }\n\n  getAction (game) {\n    let offset = this.clonePattern.positions.find((pos) => !pos.taken);\n    if (!this.isClone && offset) {\n      offset.taken = true\n      let clone = cloneDeepWith(this, (value, key) => {\n        switch (key) {\n          case 'id':\n          case 'game':\n          case 'engine':\n          case 'clones':\n            return null\n            break;\n          default:\n            return undefined\n            break;\n        }\n      });\n      clone.game = game;\n      clone.id = uuid();\n      if (this.hasOwnProperty('pos')) {\n        let referencePos = this.pos\n        clone.pos = {\n          x: referencePos.x + offset.x,\n          y: referencePos.y + offset.y\n        }\n      }\n      if (clone.hasOwnProperty('path')) {\n        clone.path = clone.path.map((pos) => {\n          return {\n            x: pos.x + offset.x,\n            y: pos.y + offset.y\n          }\n        })\n      }\n      clone.isClone = true\n      this.cloneCount += 1\n      game.placeActorOnMap(clone)\n      game.engine.addActor(clone);\n      game.draw();\n    }\n\n    let result = super.getAction(game);\n    return result;\n  }\n}\n\nconst Chasing = superclass => class extends superclass {\n  constructor({targetEntity = null ,...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('CHASING')\n    this.targetEntity = targetEntity;\n  }\n\n  getAction(game) {\n    let path = Helper.calculatePath(game, this.targetEntity.pos, this.pos);\n    let targetPos = path.length > 0 ? path[0] : this.pos;\n\n    let result = new Action.Move({\n      targetPos, \n      game, \n      actor: this, \n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n    return result;\n  }\n}\n\nconst RangedChasing = superclass => class extends superclass {\n  constructor({ targetEntity = null, getProjectile = () => null, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('RANGED_CHASING')\n    this.targetEntity = targetEntity;\n    this.getProjectile = getProjectile;\n  }\n\n  targetInPath (pathToCheck, targetPos) {\n    let inPath = false;\n    pathToCheck.forEach((pos) => {\n      if (pos.x === targetPos.x && pos.y === targetPos.y) {\n        inPath = true;\n      }\n    })\n    return inPath;\n  }\n\n  getAction(game) {\n    let throwDirection = {\n      x: Math.sign(this.targetEntity.pos.x - this.pos.x),\n      y: Math.sign(this.targetEntity.pos.y - this.pos.y),\n    }\n\n    // projectile.initialize()\n    let projectile = this.getProjectile({\n      pos: {\n        x: this.pos.x,\n        y: this.pos.y,\n      },\n      targetPos: { ...this.targetEntity.pos },\n      direction: [throwDirection.x, throwDirection.y],\n      range: 10,\n    });\n\n    // projectile.getPath()\n    projectile.createPath(game);\n    // is target in path\n    const inPath = this.targetInPath(projectile.path, this.targetEntity.pos);\n\n    if (inPath) {\n      // throw\n      if (game.canOccupyPosition(projectile.pos, projectile)) {\n        return new Action.PlaceActor({\n          targetPos: { ...projectile.pos },\n          entity: projectile,\n          game,\n          actor: this,\n          energyCost: Constant.ENERGY_THRESHOLD\n        })\n      }\n      return new Action.Say({\n        message: `I'll get you with this kunai!`,\n        game,\n        actor: this,\n        energyCost: Constant.ENERGY_THRESHOLD\n      })\n    }\n    // if not, select target tile in range of enemy and move\n    let movePath = Helper.calculatePath(game, this.targetEntity.pos, this.pos);\n    let targetPos = movePath.length > 0 ? movePath[0] : this.pos;\n    \n    return new Action.Move({\n      targetPos,\n      game,\n      actor: this,\n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n\n  }\n}\n\nconst Pushing = superclass => class extends superclass {\n  constructor({ path = false, targetPos = null, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('PUSHING')\n    this.path = path;\n    this.targetPos = targetPos;\n  }\n\n  createPath(game) {\n    let path = Helper.calculatePath(game, this.targetPos, this.pos, 8);\n    this.path = path;\n  }\n\n  getAction(game) {\n    if (!this.path) {\n      this.createPath(game);\n    }\n    let targetPos = this.path.length > 0 ? this.path[0] : this.pos;\n    let direction = [\n      targetPos.x - this.pos.x ,\n      targetPos.y - this.pos.y ,\n    ]\n    if (direction[0] === 0 && direction[1] === 0) {\n      return new Action.DestroySelf({\n        game: game,\n        actor: this,\n        energyCost: Constant.ENERGY_THRESHOLD,\n        processDelay: 0,\n      });\n    }\n    let result = new Action.Shove({\n      targetPos,\n      direction,\n      game,\n      actor: this,\n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n    this.path.shift();\n\n    return result;\n  }\n}\n\nconst Destructable = superclass => class extends superclass {\n  constructor({durability = 1, defense = 0 ,onDestroy = () => null, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('DESTRUCTABLE')\n    this.durability = durability;\n    this.defense = defense;\n    this.onDestroy = onDestroy;\n  }\n\n  getDefense () {\n    // add in reducer to get defense stats of all equpiment\n    return this.defense;\n  }\n\n  decreaseDurabilityWithoutDefense (value) {\n    this.durability -= value;\n    if (this.durability <= 0) {\n      this.destroy();\n    }\n  }\n\n  decreaseDurability (value) {\n    const current = this.durability;\n    const newDurability = current - (value - this.getDefense());\n    this.durability = Math.min(current, newDurability);\n    if (this.durability <= 0) {\n      this.destroy();\n    }\n  }\n\n  increaseDurability (value) {\n    this.durability += value\n  }\n\n  destroy () {\n    this.onDestroy();\n    destroyEntity(this);\n  }\n}\n\nconst IsParticle = superclass => class extends superclass {\n  constructor({\n    pos = { x: 1, y: 1 },\n    direction = { x: 0, y: 0 },\n    life = 1,\n    speed = 1,\n    type = Constant.PARTICLE_TYPE.directional,\n    path = null,\n    ...args\n  }) {\n    super({ ...args })\n    this.pos = pos;\n    this.direction = direction;\n    this.life = life;\n    this.speed = speed;\n    this.type = type;\n    this.path = path;\n    this.entityTypes = this.entityTypes.concat('PARTICLE')\n  }\n\n  getNextPos(step) {\n    switch (this.type) {\n      case Constant.PARTICLE_TYPE.directional:\n        return {\n          x: this.pos.x + (this.direction.x * this.speed) * step,\n          y: this.pos.y + (this.direction.y * this.speed) * step,\n        }\n      case Constant.PARTICLE_TYPE.path:\n        const nextPos = this.path.shift();\n        return nextPos ? {...nextPos} : {...this.pos}\n    }\n  }\n\n  update(step) {\n    this.life -= step;\n    if (this.life > 0) {\n      this.pos = this.getNextPos(step);\n    }\n  }\n}\n\nconst Part = pipe(\n  Rendering,\n  Destructable,\n)(Entity);\n\nexport class SnakePart extends Part {\n  constructor({ parent = null, ...args }) {\n    super({ ...args });\n    this.parent = parent;\n  }\n\n  destroy () {\n    this.parent.shiftBodyParts({...this.parent.pos});\n    this.parent.removeBodyPart(this.id);\n    super.destroy();\n  }\n}\n\nconst Snaking = superclass => class extends superclass {\n  constructor({ ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('SNAKING');\n    this.bodyParts = [];\n    this.lastDirection = null;\n  }\n\n  createBodyPart (pos) {\n    let bodyPart = new SnakePart({\n      game: this.game,\n      parent: this,\n      pos,\n      durability: 1,\n      defense: 0,\n      renderer: { ...this.renderer, character: 'a' }\n    });\n    return bodyPart;\n  }\n\n  addBodyPart () {\n    const length = this.bodyParts.length;\n    let lastPosition = null;\n    if (length) {\n      lastPosition = this.bodyParts[length - 1].pos;\n    } else { // we use the head position to start the body\n      lastPosition = this.pos;\n    }\n    const finalPos = {\n      x: lastPosition.x + (this.lastDirection[0] * -1),\n      y: lastPosition.y + (this.lastDirection[1] * -1),\n    };\n    \n    let bodyPart = this.createBodyPart(finalPos);\n    this.bodyParts.push(bodyPart)\n\n    // add to map\n    this.game.map[Helper.coordsToString(finalPos)].entities.push(bodyPart);\n  }\n\n  removeBodyPart (id) {\n    this.bodyParts = this.bodyParts.filter((part) => part.id !== id);\n  }\n\n  shiftBodyParts(headPosition) {\n    for (let index = this.bodyParts.length - 1; index >= 0; index--) {\n      let bodyPart = this.bodyParts[index];\n      let newPos = null;\n      if (index === 0) { //move this body part to last head position\n        newPos = {\n          x: headPosition.x,\n          y: headPosition.y\n        }\n      } else {\n        newPos = {\n          x: this.bodyParts[index - 1].pos.x,\n          y: this.bodyParts[index - 1].pos.y,\n        }\n      }\n      let tile = this.game.map[Helper.coordsToString(bodyPart.pos)]\n      this.game.map[Helper.coordsToString(bodyPart.pos)] = { ...tile, entities: tile.entities.filter((e) => e.id !== bodyPart.id) }\n      bodyPart.pos = { ...newPos }\n      this.game.map[Helper.coordsToString(newPos)].entities.push(bodyPart);\n    }\n  }\n\n  // override render methods\n  move(targetPos) {\n    let success = false;\n    const headPosition = {...this.pos};\n    if (this.game.canOccupyPosition(targetPos, this)) {\n      // set last direction moved\n      const lastDirection = [\n        Math.sign(targetPos.x - this.pos.x),\n        Math.sign(targetPos.y - this.pos.y)\n      ]\n      this.lastDirection = lastDirection\n      let tile = this.game.map[Helper.coordsToString(this.pos)]\n      this.game.map[Helper.coordsToString(this.pos)] = { ...tile, entities: tile.entities.filter((e) => e.id !== this.id) }\n      this.pos = targetPos\n      this.game.map[Helper.coordsToString(targetPos)].entities.push(this);\n\n      let apple = this.game.map[Helper.coordsToString(targetPos)].entities.find((entity) => entity.name === 'Apple')\n      if (apple) {\n        this.addBodyPart();\n        destroyEntity(apple);\n      }\n\n      // since head move was successful, move all body parts starting with the tail\n      this.shiftBodyParts(headPosition);\n\n      success = true;\n    }\n    return success;\n  }\n\n  decreaseDurability (value) {\n    const length = this.bodyParts.length\n    if (length) {\n      let part = this.bodyParts[length - 1];\n      this.removeBodyPart(part.id);\n      destroyEntity(part)\n    } else {\n      super.decreaseDurability(value);\n    }\n  }\n\n  getAttackDamage () {\n    return this.bodyParts.length + 1;\n  }\n}\n\nexport const UI_Actor = pipe(\n  Acting, \n  Rendering, \n  Playing, \n  UI\n)(Entity);\n\nexport const Actor = pipe(\n  Acting, \n  Rendering\n)(Entity);\n\nexport const Wall = pipe(\n  Rendering,\n  Destructable,\n)(Entity);\n\nexport const MovingWall = pipe(\n  Acting,\n  Rendering,\n  // Pushing,\n  DirectionalPushing,\n  Destructable,\n)(Entity);\n\nexport const Chaser = pipe(\n  Acting, \n  Rendering, \n  Chasing, \n  Destructable\n)(Entity);\n\nexport const Bandit = pipe(\n  Acting, \n  Rendering, \n  Chasing, \n  Destructable,\n  Attacking,\n)(Entity);\n\nexport const RangedBandit = pipe(\n  Acting, \n  Rendering, \n  RangedChasing, \n  Destructable,\n  Attacking,\n)(Entity);\n\nexport const SnakePlayer = pipe(\n  Acting,\n  Rendering,\n  Attacking,\n  Destructable,\n  Snaking,\n  Playing,\n)(Entity);\n\nexport const Player = pipe(\n  Acting, \n  Rendering, \n  Charging, \n  Signing, \n  Containing, \n  Equiping, \n  Attacking, \n  HasInnerGates,\n  Destructable, \n  Cloning,\n  Playing,\n)(Entity);\n\nexport const Weapon = pipe(\n  Rendering, \n  Equipable, \n  Attacking\n)(Entity);\n\nexport const DestructiveProjectile = pipe(\n  Acting, \n  Rendering, \n  Attacking, \n  DestructiveProjecting, \n  Destructable\n)(Entity);\n\nexport const DirectionalProjectile = pipe(\n  Acting, \n  Rendering, \n  Attacking, \n  DirectionalProjecting, \n  Destructable\n)(Entity);\n\nexport const DestructiveCloudProjectile = pipe(\n  Acting, \n  Rendering, \n  Attacking, \n  GaseousDestructiveProjecting, \n  Destructable, \n  Gaseous\n)(Entity);\n\nexport const DestructiveCloudProjectileV2 = pipe(\n  Acting, \n  Destructable,\n  Parent, \n)(Entity);\n\nexport const Particle = pipe(\n  Acting,\n  Rendering,\n  IsParticle,\n)(Entity);\n\nexport const ParticleEmitter = pipe(\n  Acting, \n  Destructable,\n  Parent, \n)(Entity);","import * as Helper from '../helper';\nimport { Particle } from './entites';\nimport { PARTICLE_TEMPLATES } from './constants';\n\nexport class Engine {\n  constructor({\n    statusEffects = [],\n    actors = [],\n    currentActor = 0,\n    isRunning = false,\n    game = null,\n  }) {\n    this.statusEffects = statusEffects;\n    this.actors = actors;\n    this.currentActor = currentActor;\n    this.isRunning = isRunning;\n    this.game = game;\n  }\n\n  async processV1 () { // a turn-based system using speed and round-robin\n    let actor = this.actors[this.currentActor]\n    actor.gainEnergy(actor.speed);\n    if (actor.hasEnoughEnergy()) {\n      let action = actor.getAction(this.game);\n      if (!action) { return false; } // if no action given, kick out to UI input\n      while (true) {\n        let result = action.perform();\n        this.game.draw();\n        await Helper.delay(action.processDelay);\n        if (!result.success) return false;\n        if (result.alternative === null) break;\n        action = result.alternative;\n      }\n    }\n    this.currentActor = (this.currentActor + 1) % this.actors.length;\n    return true\n  }\n\n  async processV2() { // a turn-based system using speed and Action Points\n    let actor = this.actors[this.currentActor]\n    let acting = true;\n    while (acting) {\n      if (!actor) return false;\n      // if (!actor.active) return false;\n      if (!actor.active) break;\n      let timePassed = 0;\n      if (actor.hasEnoughEnergy()) {\n        // if (!actor.active) break;\n        let action = actor.getAction(this.game);\n        if (!action) { return false; } // if no action given, kick out to UI input\n        timePassed += action.energyCost;\n        while (true) {\n          action.onBefore();\n          let result = await action.perform();\n          if (result.success) {\n            action.onSuccess();\n          } else {\n            action.onFailure();\n          }\n          action.onAfter();\n          if (!await this.processActionFX(action, result.success)) {\n            await Helper.delay(action.processDelay);\n            this.game.draw();\n          }\n          if (!actor.active) break;\n          if (!result.success) return false;\n          if (result.alternative === null) break;\n          action = result.alternative;\n        }\n        this.processStatusEffects(timePassed);\n        if (action.interrupt) {\n          acting = false;\n          break;\n        }\n      } else {\n        actor.gainEnergy(actor.speed);\n        acting = false;\n      }\n    }\n    this.actors = this.actors.filter((actor) => actor.active)\n    this.currentActor += 1;\n    if (this.currentActor >= this.actors.length) {\n      this.currentActor = 0;\n    }\n    return true\n  }\n\n  // a turn-based system using speed and Action Points\n  // it reorders all actors by energy after every round robin\n  async processV3() { \n    let actor = this.actors[this.currentActor]\n    if (!actor) return false;\n    let timePassed = 0;\n    if (actor.hasEnoughEnergy()) {\n      let action = actor.getAction(this.game);\n      if (!action) { return false; } // if no action given, kick out to UI input\n      timePassed += action.energyCost;\n      while (true) {\n        let result = await action.perform();\n        if (!await this.processActionFX(action, result.success)) {\n            await Helper.delay(action.processDelay);\n            this.game.draw();\n        }\n        if (!result.success) return false;\n        if (result.alternative === null) break;\n        action = result.alternative;\n      }\n      this.processStatusEffects(timePassed);\n    } else {\n      actor.gainEnergy(actor.speed);\n    }\n    this.currentActor = (this.currentActor + 1) % this.actors.length;\n    if (this.currentActor === 0) this.sortActorsByEnergy();\n    return true\n  }\n\n  // TODO process that reorders actors after every action\n\n  async start() {\n    this.isRunning = true;\n    while (this.isRunning) {\n      this.isRunning = await this.processV2();\n    }\n    let actor = this.actors[this.currentActor]\n    \n    if (!actor) {\n      this.game.backToTitle();\n      return false;\n    }\n    \n    if (actor.keymap) {\n      this.game.visibleKeymap = actor.keymap;\n    }\n    this.game.updateMode();\n    await this.game.updateReact(this.game);\n  }\n  \n  stop() {\n    this.isRunning = false;\n  }\n\n  sortActorsByEnergy () {\n    this.actors = this.actors.sort((a, b) => b.energy - a.energy);\n    console.log(this.actors);\n  }\n\n  addStatusEffect(newEffect) {\n    if (!newEffect.allowDuplicates) {\n      if (this.statusEffects.filter((effect) => (\n        effect.actor.id === newEffect.actor.id &&\n        effect.name === newEffect.name\n      )).length > 0) {\n        console.log(`${newEffect.name} cannot be applied twice to ${newEffect.actor.name}`);\n        return false;\n      };\n    }\n    newEffect.onStart();\n    this.statusEffects.push(newEffect)\n    return true;\n  }\n\n  removeStatusEffectById (id) {\n    this.statusEffects = this.statusEffects.filter((effect) => {\n      if (effect.id !== id) return true;\n      effect.onStop();\n      return false;\n    });\n  }\n  \n  removeStatusEffectByActorId (actorId) {\n    this.statusEffects = this.statusEffects.filter((effect) => {\n      if (effect.actor.id !== actorId) return true;\n      effect.onStop();\n      return false;\n    });\n  }\n\n  removeDeadStatusEffects() {\n    this.statusEffects = this.statusEffects.filter((effect) =>{\n      if (effect.lifespan >= 0 && effect.timeToLive <= 0) {\n        effect.onStop();\n        return false;\n      }\n      return true;\n    });\n  }\n\n  processStatusEffects (timePassed) {\n    this.statusEffects.forEach((effect) => {\n      effect.timeSinceLastStep += timePassed;\n      effect.timeToLive -= timePassed;\n      if (effect.timeSinceLastStep >= effect.stepInterval) {\n        effect.onStep();\n        effect.timeSinceLastStep = 0;\n      } \n    });\n    this.removeDeadStatusEffects();\n  }\n\n  async processActionFX (action, actionSuccess) {\n    // EASE IN\n    // let time = .8\n    // let nextT = (t) => t *= t; \n    // EASE OUT\n    // let time = .03\n    // let nextT = (t) => t * (2 - t); \n    // EASE IN OUT QUAD\n    // let time = .4\n    // let nextT = (t) => t < .5 ? 2 * t * t : -1 + (4 - 2 * t) * t; \n    // EASE IN CUBIC\n    // let time = .8\n    // let nextT = (t) => t * t * t; \n    // EASE OUT CUBIC\n    // let time = .001\n    // let nextT = (t) => (--t) * t * t + 1; \n    if (!actionSuccess) { \n      // If action is not successful, instead of running action's normal particle animation\n      // we'll show a red X on the entity that initiated the action\n      const particle = new Particle({\n        game: this.game,\n        name: 'particle',\n        passable: true,\n        pos: {...action.actor.pos},\n        renderer: PARTICLE_TEMPLATES.fail.renderer,\n      })\n      this.game.placeActorOnMap(particle);\n      this.game.draw();\n      await Helper.delay(100);\n      this.game.removeActorFromMap(particle);\n      particle.update(1);\n      this.game.draw();\n      action.removeDeadParticles(); // is this needed?\n      return true;\n    }\n\n    if (action.particles.length) {\n      while (action.particles.length > 0) {\n        action.particles.forEach((particle) => {\n          this.game.placeActorOnMap(particle);\n        })\n        this.game.draw();\n        // await Helper.delay(time * 100);\n        // await Helper.delay(time * action.processDelay);\n        await Helper.delay(action.processDelay);\n        action.particles.forEach((particle) => {\n          this.game.removeActorFromMap(particle);\n          particle.update(1);\n\n        })\n        this.game.draw();\n        action.removeDeadParticles();\n        // time = nextT(time);\n      }\n      return true;\n    }\n    return false;\n  }\n\n  addActor (entity) {\n    this.actors.push(entity);\n  }\n\n  addActorAsPrevious (entity) {\n    this.actors.splice(this.currentActor, 0, entity);\n  }\n\n  addActorAsNext (entity) {\n    this.actors.splice(this.currentActor + 1, 0, entity);\n  }\n\n  setActorToPrevious (entity) {\n    this.currentActor -= 1;\n    if (this.currentActor <= -1) this.currentActor = this.actors.length - 1;\n  }\n\n  setActorToNext (entity) {\n    this.currentActor = (this.currentActor + 1) % this.actors.length;\n  }\n\n}\n\n\nexport class CrankEngine extends Engine {\n  async process() { // a turn-based system using speed and Action Points\n    let actor = this.actors[this.currentActor]\n    let acting = true;\n    while (acting) {\n      if (actor.hasEnoughEnergy()) {\n        let action = actor.getAction(this.game);\n        if (!action) { return false; } // if no action given, kick out to UI input\n        while (true) {\n          this.game.draw();\n          let result = await action.perform();\n          await Helper.delay(action.processDelay);\n          if (!result.success) return false;\n          if (result.alternative === null) break;\n          action = result.alternative;\n        }\n      } else {\n        // actor.gainEnergy(actor.speed);\n        acting = false;\n      }\n    }\n    // this.currentActor = (this.currentActor + 1) % this.actors.length;\n    this.currentActor += 1;\n    if (this.currentActor + 1 >= this.actors.length) {\n      this.currentActor = 0;\n      this.actors.forEach((actor) => actor.gainEnergy(actor.speed));\n      return false;\n    }\n    return true\n  }\n\n  async start() {\n    this.isRunning = true;\n    while (this.isRunning) {\n      this.isRunning = await this.process();\n    }\n    let actor = this.actors[this.currentActor]\n    if (actor.keymap) {\n      this.game.visibleKeymap = actor.keymap;\n    }\n    this.game.updateMode();\n    await this.game.updateReact(this.game);\n  }\n}","import * as Entity from './entites';\nimport * as Constant from './constants';\nimport * as Helper from '../helper';\n\nexport const TYPE = {\n  KUNAI: 'Kunai',\n  DIRECTIONAL_KUNAI: 'Directional Kunai',\n  SWORD: 'Sword',\n  BARRIER: 'Barrier',\n}\n\nconst createProjectileCloud = ({ \n  engine, \n  actor, \n  targetPos, \n  throwDirection,\n  speed,\n  structureType,\n  createProjectile,\n}) => {\n  let structure = Constant.CLONE_PATTERNS[structureType];\n\n  let children = structure.positions.map((slot) => {\n    let position = {\n      x: actor.pos.x + slot.x + (throwDirection.x * structure.x_offset),\n      y: actor.pos.y + slot.y + (throwDirection.y * structure.y_offset)\n    }\n    \n    let targetPosition = {\n      x: targetPos.x + slot.x,\n      y: targetPos.y + slot.y,\n    }\n\n    return createProjectile(engine, position, targetPosition);\n  })\n\n  return new Entity.DestructiveCloudProjectileV2({\n    game: engine.game,\n    passable: true,\n    speed,\n    children,\n  })\n}\n\nconst createProjectileSingularity = ({ \n  engine, \n  actor, \n  targetPos, \n  speed,\n  structureType,\n  createProjectile,\n}) => {\n  let structure = Constant.CLONE_PATTERNS[structureType];\n\n  let children = structure.positions.map((slot) => {\n    let position = {\n      x: targetPos.x + slot.x + structure.x_offset,\n      y: targetPos.y + slot.y + structure.y_offset\n    }\n\n    let targetPosition = {\n      x: targetPos.x,\n      y: targetPos.y,\n    }\n\n    return createProjectile(engine, position, targetPosition);\n\n  })\n\n  return new Entity.DestructiveCloudProjectileV2({\n    game: engine.game,\n    passable: true,\n    speed,\n    children,\n  })\n}\n\nconst createProjectileBurst = ({ \n  engine, \n  actor, \n  targetPos, \n  speed,\n  structureType,\n  createProjectile,\n}) => {\n  let structure = Constant.CLONE_PATTERNS[structureType];\n\n  let children = structure.positions.map((slot) => {\n    let position = {\n      x: targetPos.x + structure.x_offset,\n      y: targetPos.y + structure.y_offset\n    }\n\n    let targetPosition = {\n      x: targetPos.x + slot.x,\n      y: targetPos.y + slot.y,\n    }\n\n    return createProjectile(engine, position, targetPosition);\n\n  })\n\n  return new Entity.DestructiveCloudProjectileV2({\n    game: engine.game,\n    passable: true,\n    speed,\n    children,\n  })\n}\n\nexport const sandTomb = ({\n  engine,\n  actor,\n  targetPos,\n}) => createProjectileSingularity({\n  engine,\n  actor,\n  targetPos,\n  speed: 100,\n  structureType: 'circle',\n  createProjectile: sandTombPart,\n})\n\nexport const sandBurst = ({\n  engine,\n  actor,\n  targetPos,\n}) => createProjectileBurst({\n  engine,\n  actor,\n  targetPos,\n  speed: 500,\n  structureType: 'circle',\n  createProjectile: sandTombPart,\n})\n\nexport const sandWallPulse = ({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n}) => createProjectileCloud({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n  speed: 500,\n  structureType: 'smallSquare',\n  createProjectile: movingSandWall,\n})\n\nexport const kunaiCloud = ({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n}) => createProjectileCloud({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n  speed: 500,\n  structureType: 'square',\n  createProjectile: kunai,\n})\n\nexport const fireballCloud = ({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n}) => createProjectileCloud({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n  speed: 500,\n  structureType: 'square',\n  createProjectile: fireball,\n})\n\nexport const kunai = (engine, pos, targetPos) => new Entity.DestructiveProjectile({\n  game: engine.game,\n  targetPos,\n  passable: true,\n  pos: { x: pos.x, y: pos.y },\n  renderer: {\n    character: '>',\n    color: 'white',\n    background: '',\n    animation: [\n      { background: '', foreground: 'white', character: '>', },\n      { background: '', foreground: 'white', character: 'v', },\n      { background: '', foreground: 'white', character: '<', },\n      { background: '', foreground: 'white', character: '^', },\n      { background: '', foreground: 'white', character: '>', },\n    ],\n  },\n  name: TYPE.KUNAI,\n  speed: 600,\n  energy: 0,\n  range: 30,\n})\n\nexport const directionalKunai = (engine, pos, direction, range) => new Entity.DirectionalProjectile({\n  game: engine.game,\n  direction,\n  passable: true,\n  pos: { x: pos.x, y: pos.y },\n  renderer: {\n    character: '>',\n    color: 'white',\n    background: '',\n    animation: [\n      { background: 'lightgrey', foreground: 'grey', character: '>', },\n      { background: 'lightgrey', foreground: 'grey', character: 'v', },\n      { background: 'lightgrey', foreground: 'grey', character: '<', },\n      { background: 'lightgrey', foreground: 'grey', character: '^', },\n      { background: 'lightgrey', foreground: 'grey', character: '>', },\n    ],\n  },\n  name: TYPE.DIRECTIONAL_KUNAI,\n  speed: 600,\n  energy: 0,\n  range,\n})\n\nexport const movingSandWall = (engine, pos, targetPos, range) => new Entity.MovingWall({\n  game: engine.game,\n  passable: false,\n  pos: { x: pos.x, y: pos.y },\n  targetPos,\n  renderer: {\n    // character: '>',\n    character: ']',\n    color: '#A89078',\n    background: '#D8C0A8',\n  },\n  name: TYPE.KUNAI,\n  // name: TYPE.BARRIER,\n  durability: 3,\n  range,\n  speed: 300,\n})\n\nexport const sandShuriken = (engine, pos, direction, range) => new Entity.DirectionalProjectile({\n  game: engine.game,\n  direction,\n  passable: true,\n  pos: { x: pos.x, y: pos.y },\n  renderer: {\n    // character: '>',\n    character: '✦️',\n    color: '#A89078',\n    background: '#D8C0A8',\n  },\n  name: TYPE.DIRECTIONAL_KUNAI,\n  speed: 600,\n  energy: 0,\n  range,\n})\n\nexport const sandTombPart = (engine, pos, targetPos) => new Entity.DestructiveProjectile({\n  game: engine.game,\n  targetPos,\n  passable: true,\n  pos: { x: pos.x, y: pos.y },\n  renderer: {\n    // character: '>',\n    character: '✦️',\n    color: '#A89078',\n    background: '#D8C0A8',\n  },\n  name: TYPE.KUNAI,\n  speed: 600,\n  energy: 0,\n  range: 30,\n})\n\nexport const fireball = (engine, pos, targetPos) => new Entity.DestructiveProjectile({\n  game: engine.game,\n  targetPos,\n  passable: true,\n  pos: { x: pos.x, y: pos.y },\n  renderer: {\n    // character: '>',\n    character: '🔥',\n    color: 'wheat',\n    background: 'tomato',\n  },\n  name: TYPE.KUNAI,\n  speed: 100,\n  energy: 0,\n  range: 30,\n})\n\nexport const fireballGas = (engine, actor, targetPos) => {\n  return new Entity.DestructiveCloudProjectile({\n    game: engine.game,\n    owner_id: actor ? actor.id : null,\n    targetPos,\n    passable: true,\n    pos: actor ? { x: actor.pos.x, y: actor.pos.y } : null,\n    renderer: {\n      // character: '@',\n      character: '🔥',\n      color: 'wheat',\n      background: 'tomato',\n    },\n    name: TYPE.KUNAI,\n    speed: 100,\n    range: 10,\n    clonePattern: Constant.CLONE_PATTERNS.bigSquare,\n    // clonePattern: Constant.CLONE_PATTERNS.square,\n  })\n}\n\nexport const waterball = (engine, actor, targetPos) => new Entity.DestructiveCloudProjectile({\n  game: engine.game,\n  owner_id: actor ? actor.id : null,\n  targetPos,\n  passable: true,\n  pos: actor ? { x: actor.pos.x, y: actor.pos.y } : null,\n  renderer: {\n    // character: '~',\n    character: '🌊',\n    color: 'silver',\n    background: 'lightslategrey',\n  },\n  name: TYPE.KUNAI,\n  speed: 800,\n  range: 10,\n  clonePattern: Constant.CLONE_PATTERNS.bigSquare,\n  // clonePattern: Constant.CLONE_PATTERNS.square,\n})\n\nexport const sword = (engine) => new Entity.Weapon({\n  game: engine.game,\n  name: TYPE.SWORD,\n  passable: true,\n  attackDamage: 1,\n  equipmentType: Constant.EQUIPMENT_TYPES.HAND,\n  renderer: {\n    // character: '|',\n    character: '🗡️',\n    color: 'white',\n    background: '',\n  },\n})\n\nexport const apple = (engine, pos) => new Entity.Wall({\n  game: engine.game,\n  name: 'Apple',\n  passable: true,\n  pos,\n  renderer: {\n    character: 'o',\n    color: 'red',\n    background: 'brown',\n  },\n})\n","import * as Helper from '../../../helper';\nimport { Bandit, RangedBandit } from '../../entites';\nimport * as Item from '../../items';\n\nconst getBanditStats = () => {\n  let banditLevels = [\n    {\n      name: 'Slingshot',\n      renderer: {\n        character: Helper.getRandomInArray(['r']),\n        color: '#ced5dd',\n        background: 'black',\n      },\n      durability: 1,\n      attackDamage: 1,\n      speed: 100,\n      entityClass: RangedBandit\n    },\n    {\n      name: 'Buckshot',\n      renderer: {\n        character: Helper.getRandomInArray(['r']),\n        color: '#3fc072',\n        background: 'black',\n      },\n      durability: 2,\n      attackDamage: 1,\n      speed: 100,\n      entityClass: RangedBandit\n    },\n    {\n      name: 'Ross',\n      renderer: {\n        character: Helper.getRandomInArray(['b']),\n        color: '#ced5dd',\n        background: 'black',\n      },\n      durability: 1,\n      attackDamage: 1,\n      speed: 300,\n      entityClass: Bandit\n    },\n    {\n      name: 'Kevin',\n      renderer: {\n        character: Helper.getRandomInArray(['b']),\n        color: '#3fc072',\n        background: 'black',\n      },\n      durability: 2,\n      attackDamage: 1,\n      speed: 200,\n      entityClass: Bandit\n    },\n    {\n      name: 'Jacob',\n      renderer: {\n        character: Helper.getRandomInArray(['b']),\n        color: '#67a1d7',\n        background: 'black',\n      },\n      durability: 3,\n      attackDamage: 1,\n      speed: 100,\n      entityClass: Bandit\n    },\n  ]\n  return Helper.getRandomInArray(banditLevels);\n\n}\n\nexport const addActor = (game) => {\n  let targetEntity = game.engine.actors[game.engine.currentActor]\n  let pos = Helper.getRandomPos(game.map).coordinates\n  const banditStats = getBanditStats();\n  // let actor = new RangedBandit({\n  let actor = new banditStats.entityClass({\n    targetEntity,\n    pos,\n    renderer: banditStats.renderer,\n    name: banditStats.name,\n    game,\n    actions: [],\n    attackDamage: banditStats.attackDamage,\n    durability: banditStats.durability,\n    speed: banditStats.speed,\n    // directional projectile destruction breaks engine\n    getProjectile: ({pos, targetPos, direction, range}) => Item.directionalKunai(game.engine, { ...pos }, direction, range)\n    // getProjectile: ({ pos, targetPos, direction, range }) => Item.kunai(game.engine, { ...pos }, { ...targetPos })\n  })\n  // game.placeActorOnMap(actor)\n  if (game.randomlyPlaceActorOnMap(actor)) {\n    game.engine.addActor(actor);\n    game.draw();\n  };\n}","import Konva from 'konva';\n\nexport class Display {\n  constructor({\n    containerId = null,\n    width = 100,\n    height = 100,\n    tileWidth = 10,\n    tileHeight = 10,\n    tileGutter = 0,\n    tileOffset = 10,\n  }) {\n    this.containerId = containerId;\n    this.width = width;\n    this.height = height;\n    this.tileWidth = tileWidth;\n    this.tileHeight = tileHeight;\n    this.tileGutter = tileGutter;\n    this.tileOffset = tileOffset;\n    this.stage = null;\n    this.layer = null;\n  }\n\n  initialize (document) {\n    let d = document.getElementById(this.containerId)\n    let displayContainer = document.createElement('div');\n    d.appendChild(displayContainer);\n\n    this.stage = new Konva.Stage({\n      container: 'display',   // id of container <div>\n      width: this.width,\n      height: this.height\n    });\n\n    this.layer = new Konva.Layer({\n      hitGraphEnabled: false,\n    });\n    this.stage.add(this.layer);\n  }\n\n  updateTile(tile, character, foreground, background) {\n    // child[0] is the rectangle\n    // child[1] is the text\n    tile.children[0].fill(background);\n    tile.children[1].fill(foreground);\n    tile.children[1].text(character);\n  }\n\n  createTile(x, y, character, foreground, background) {\n    let node = new Konva.Group({\n      id: `${x},${y}`,\n      x: (this.tileWidth * x) + (this.tileOffset + this.tileGutter),\n      y: (this.tileHeight * y) + (this.tileOffset + this.tileGutter),\n      width: this.tileWidth,\n      height: this.tileHeight,\n    });\n\n    let rect = new Konva.Rect({\n      name: 'rect',\n      width: this.tileWidth,\n      height: this.tileHeight,\n      fill: background,\n      strokeEnabled: false,\n      // for optimization\n      transformsEnabled: 'position',\n      perfectDrawEnabled: false,\n      listening: false,\n    });\n\n    let text = new Konva.Text({\n      name: 'text',\n      text: character,\n      width: this.tileWidth,\n      height: this.tileHeight,\n      fill: foreground,\n      align: 'center',\n      verticalAlign: 'middle',\n      // for optimization\n      transformsEnabled: 'position',\n      perfectDrawEnabled: false,\n      listening: false,\n    });\n\n    node.add(rect);\n    node.add(text);\n    this.layer.add(node);\n    return node;\n  }\n\n  draw () {\n    this.layer.batchDraw();\n    // this.layer.draw();\n  }\n}\n","import React from 'react';\nimport * as ROT from 'rot-js';\nimport * as Constant from './constants';\nimport * as Helper from '../helper';\nimport { addActor as addWaveEnemy } from './Keymap/KeyActions/addActor';\nimport * as Message from './message';\nimport * as Item from './items';\nimport { Display } from './Display/konvaCustom';\n\nconst GAME_MODE_TYPES = {WAVE: 0};\nconst MAP_WIDTH = 60;\nconst MAP_HEIGHT = 30;\nconst TILE_WIDTH = 20;\nconst TILE_HEIGHT = 20;\nconst TILE_OFFSET = 5;\n\nexport class Game {\n  constructor({\n    engine = null,\n    map = {},\n    tileMap = {},\n    mapWidth = MAP_WIDTH,\n    mapHeight = MAP_HEIGHT,\n    display = new Display({\n      containerId: 'display',\n      width: (MAP_WIDTH * TILE_WIDTH) + TILE_OFFSET,\n      height: (MAP_HEIGHT * TILE_HEIGHT) + TILE_OFFSET,\n      tileWidth: TILE_WIDTH,\n      tileHeight: TILE_HEIGHT,\n      tileOffset: TILE_OFFSET,\n    }),\n    tileKey = Constant.TILE_KEY,\n    mode = {\n      type: GAME_MODE_TYPES.WAVE,\n      data: {\n        level: 1,\n        highestLevel: null,\n      }\n    },\n    messages = [],\n  }) {\n    this.engine = engine;\n    this.map = map;\n    this.tileMap = tileMap;\n    this.mapWidth = mapWidth;\n    this.mapHeight = mapHeight;\n    this.display = display;\n    this.tileKey = tileKey;\n    this.mode = mode;\n    this.messages = messages;\n  }\n\n  initializeMode () {\n    if (this.mode.type === GAME_MODE_TYPES.WAVE) {\n      let highestLevel = localStorage.getItem('hidden_leaf_rl__highestLevel');\n      if (!highestLevel) { \n        highestLevel = this.mode.data.level;\n      } else { \n        highestLevel = Math.max(highestLevel , this.mode.data.level);\n      }\n      localStorage.setItem('hidden_leaf_rl__highestLevel', highestLevel);\n      this.mode.data.highestLevel = highestLevel\n      for (let i = 0; i < Math.pow(this.mode.data.level, 2); i++) {\n        addWaveEnemy(this);\n        let apple_1 = Item.apple(this.engine)\n        this.randomlyPlaceActorOnMap(apple_1, null)\n        let apple_2 = Item.apple(this.engine)\n        this.randomlyPlaceActorOnMap(apple_2, null)\n      }\n    }\n  }\n  \n  updateMode () {\n    if (this.mode.type === GAME_MODE_TYPES.WAVE) {\n      const nonPlayerCharacters = this.engine.actors.filter((actor) => !actor.entityTypes.includes('PLAYING'));\n      if (!nonPlayerCharacters.length) {\n        this.nextModeLevel();\n        this.initializeMode();\n      }\n    }\n  }\n\n  setModeLevel (level) {\n    this.mode.data.level = level;\n  }\n\n  nextModeLevel () {\n    this.setModeLevel(this.mode.data.level + 1);\n  }\n  \n  resetMode () {\n    this.setModeLevel(1);\n    this.initializeMode();\n  }\n\n  randomlyPlaceActorOnMap(actor) {\n    let kill = 0;\n    let placed = false;\n    while (!placed) {\n      let pos = Helper.getRandomPos(this.map).coordinates\n      if (this.canOccupyPosition(pos, actor)) {\n        let tile = this.map[Helper.coordsToString(pos)]\n        actor.pos = { ...pos }\n        tile.entities.push(actor);\n        placed = true;\n      }\n      kill += 1;\n      if (kill >= 100) {\n        placed = true;\n      }\n    }\n    return placed;\n  }\n\n  randomlyPlaceAllActorsOnMap() {\n    this.engine.actors.forEach((actor) => {\n      this.randomlyPlaceActorOnMap(actor);\n    })\n  }\n\n  placeActorsOnMap() {\n    this.engine.actors.forEach((actor) => {\n      let tile = this.map[Helper.coordsToString(actor.pos)]\n      if (tile) {\n        tile.entities.push(actor);\n      } else {\n        console.log(`could not place ${actor.id}: ${actor.name} on map`);\n      }\n    })\n  }\n\n  placeActorOnMap(actor) {\n    let tile = this.map[Helper.coordsToString(actor.pos)]\n    if (tile) {\n      tile.entities.push(actor);\n      return true\n    } else {\n      console.log(`could not place ${actor.id}: ${actor.name} on map`);\n      return false\n    }\n  }\n\n  removeActorFromMap (actor) {\n    let tile = this.map[Helper.coordsToString(actor.pos)]\n    if (!tile) return false;\n    this.map[Helper.coordsToString(actor.pos)].entities = tile.entities.filter((ac) => ac.id !== actor.id);\n    return true;\n  }\n\n  createLevel () {\n    // let digger = new ROT.Map.Arena();\n    // let digger = new ROT.Map.Rogue();\n    // let digger = new ROT.Map.DividedMaze();\n    // let digger = new ROT.Map.EllerMaze();\n    // let digger = new ROT.Map.Cellular();\n    let digger = new ROT.Map.Digger(this.mapWidth, this.mapHeight);\n    // let digger = new ROT.Map.IceyMaze();\n    // let digger = new ROT.Map.Uniform();\n    let freeCells = [];\n    let digCallback = function (x, y, value) {\n      let key = x + \",\" + y;\n      let type = 'GROUND';\n      let currentFrame = 0;\n      if (value) { \n        type = 'WALL';\n        // type = 'WATER';\n      }\n\n      if (Constant.TILE_KEY[type].animation) {\n        currentFrame = Helper.getRandomInt(0, Constant.TILE_KEY[type].animation.length)\n      }\n\n      this.map[key] = {\n        type,\n        currentFrame,\n        entities: [],\n      };\n      freeCells.push(key);\n    }\n    digger.create(digCallback.bind(this));\n    this.randomlyPlaceAllActorsOnMap()\n  }\n\n  canOccupyPosition (pos, entity = {passable: false}) {\n    let result = false;\n    let targetTile = this.map[Helper.coordsToString(pos)];\n    if (targetTile) {\n      let hasImpassableEntity = targetTile.entities.filter((entity) => !entity.passable).length > 0;\n      if (!hasImpassableEntity || entity.passable) {\n        let tile = this.map[Helper.coordsToString(pos)];\n        if (this.tileKey[tile.type].passable) {\n          result = true;\n        }\n      }\n    }\n\n    return result;\n  }\n\n  cursorCanOccupyPosition(pos) {\n    let result = false;\n    let targetTile = this.map[Helper.coordsToString(pos)];\n    if (targetTile) {\n      result = true;\n    }\n\n    return result;\n  }\n\n  show (document) {\n    this.display.initialize(document)\n  }\n\n  processTileMap (callback) {\n    for (let key in this.map) {\n      let parts = key.split(\",\");\n      let x = parseInt(parts[0]);\n      let y = parseInt(parts[1]);\n      let tile = this.map[key];\n      let { character, foreground, background } = this.tileKey[tile.type]\n\n      // Proto code to handle tile animations\n      let tileRenderer = this.tileKey[tile.type]\n      let nextFrame = this.animateTile(tile, tileRenderer);\n      character = nextFrame.character;\n      foreground = nextFrame.foreground;\n      background = nextFrame.background;\n\n      if (tile.entities.length > 0) {\n        let entity = tile.entities[tile.entities.length - 1]\n        nextFrame = this.animateEntity(entity);\n        \n        character = nextFrame.character\n        foreground = nextFrame.foreground\n        if (nextFrame.background) {\n          background = nextFrame.background\n        }\n      }\n      callback(key, x, y, character, foreground, background);\n    }\n  }\n\n  initializeMap () {\n    this.processTileMap((tileKey, x, y, character, foreground, background) => {\n      let node = this.display.createTile(x, y, character, foreground, background);\n      this.tileMap[tileKey] = node;\n    });\n    this.display.draw();\n  }\n  \n  draw () {\n    this.processTileMap((tileKey, x, y, character, foreground, background) => {\n      this.display.updateTile(this.tileMap[tileKey], character, foreground, background);\n    });\n    this.display.draw();\n  }\n  \n  animateEntity (entity) {\n    let renderer = entity.renderer;\n    let {character, color, background} = {...renderer}\n    if (renderer.animation) {\n      let frame = renderer.animation[entity.currentFrame];\n\n      character = frame.character;\n      color = frame.foreground;\n      background = frame.background;\n      entity.currentFrame = (entity.currentFrame + 1) % renderer.animation.length;\n    }\n    return {character, foreground: color, background}\n  }\n\n  animateTile (tile, renderer) {\n    let {character, foreground, background} = {...renderer}\n    if (renderer.animation) {\n      let frame = renderer.animation[tile.currentFrame];\n      character = frame.character;\n      foreground = frame.foreground;\n      background = frame.background;\n      tile.currentFrame = (tile.currentFrame + 1) % renderer.animation.length;\n    }\n    return {character, foreground, background}\n  }\n\n  addActor (actor, engine = this.engine) {\n    let isPlaced = this.placeActorOnMap(actor); // replace with placeActorOnMap\n    if (!isPlaced) { return false }\n    engine.actors.push(actor);\n    this.draw();\n    return true\n  }\n\n  placeAndDrawActor (actor) {\n    this.placeActorsOnMap(); // replace with placeActorOnMap\n    this.draw();\n  }\n\n  removeActor (actor) {\n    this.engine.actors = this.engine.actors.filter((ac) => ac.id !== actor.id);\n    // this.engine.currentActor = this.engine.actors.length - 1; // should remove need for this line\n    // this.engine.currentActor = (this.engine.currentActor) % this.engine.actors.length;\n    // this.engine.currentActor = (this.engine.currentActor + 1) % this.engine.actors.length;\n    this.removeActorFromMap(actor);\n    this.draw();\n  }\n\n  initialize (presserRef, document) {\n    this.engine.game = this;\n    this.engine.actors.forEach((actor) => {\n      actor.game = this;\n    });\n    this.createLevel();\n    this.show(document);\n    this.initializeMap();\n    this.draw();\n    presserRef.current.focus();\n    this.initializeMode();\n  }\n\n  addMessage (text, type) {\n    const message = new Message.Message({text, type})\n    this.messages.push(message);\n  }\n}\n\n\n/************************** UI ********************************/\nexport const handleKeyPress = (event, engine) => {\n  if (!engine.isRunning) {\n    let actor = engine.actors[engine.currentActor];\n    let keymap = actor.keymap;\n    let code = event.key;\n    if (!(code in keymap)) { return; }\n    keymap[code]['activate']();\n    engine.start()\n  }\n  return;\n}\n\nexport const DisplayElement = (presserRef, handleKeyPress, engine) => {\n  return (\n    <div\n      id='display'\n      ref={presserRef}\n      onKeyDown={(event) => handleKeyPress(event, engine)}\n      tabIndex='0'\n    />\n  )\n}\n/************************** UI ********************************/\n","import React from 'react';\n\nfunction Button(props) {\n  let color = props['color'];\n  if (!color) color = 'grey';\n  return (\n    <button\n      onClick={props.onClick}\n      className={`Button btn ${color} darken-3`}\n    >\n      {props.children}  \n    </button>\n  )\n}\n\nexport default Button;\n","import React from 'react';\nimport Button from './Button';\n\nclass Information extends React.Component {\n  render() {\n    return (\n      <div className=\"Information UI\">\n        <div className='flow-text'>Information</div>\n        {\n          this.props.data && (\n            this.props.data.map((item, index) => {\n              return (\n                <Button key={index} color={item['color']} onClick={() => null}>\n                  {`${item.label}: ${item.value}`}\n                </Button>\n              )\n            })\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default Information;","import React from 'react';\nimport Button from './Button';\n\nclass Equipment extends React.Component {\n  render() {\n    return (\n      <div className=\"Equipment UI\">\n        {\n          this.props.equipment && (\n            <div>\n              <div className='flow-text'>Equipment</div>\n              <div>\n                {\n                  this.props.equipment.map((slot, index) => {\n                    return (\n                      <Button key={index} onClick={() => null}>\n                        {slot.name} {slot.item ? slot.item.renderer.character : ''}\n                      </Button>\n                    )\n                  })\n                }\n              </div>\n            </div>\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default Equipment;","import React from 'react';\nimport Button from './Button';\n\nclass Inventory extends React.Component {\n  render() {\n    return (\n      <div className=\"Inventory UI\">\n        {\n          this.props.inventory && (\n            <div>\n              <div className='flow-text'>Inventory</div>\n              <div>\n                {\n                  this.props.inventory.map((slot, index) => {\n                    return (\n                      <Button key={index} onClick={() => null}>\n                        {`${slot.itemType} | x ${slot.items.length}`}\n                      </Button>\n                    )\n                  })\n                }\n              </div>\n            </div>\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default Inventory;","import React from 'react';\nimport Button from './Button';\n\nclass Keymap extends React.Component {\n  render() {\n    return (  \n      <div className=\"Keymap UI\">\n        <div className='flow-text'>Keymap</div>\n        {\n          \n          this.props.keymap && (\n            Object.entries(this.props.keymap).map(([key, value], index) => {\n              return (\n                <Button key={index} onClick={() => null}>\n                  {key} {value.label}\n                </Button>\n              )\n            })\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default Keymap;","import React from 'react';\n\nfunction Message (props) {\n  return (\n    <div\n      className='Message'\n      style={{\n        color: props.color,\n        backgroundColor: props.backgroundColor,\n        borderColor: props.color,\n      }}\n    >\n      {props.children}\n    </div>\n  )\n}\n\nclass Messages extends React.Component {\n  render() {\n    return (\n      <div className=\"Messages UI\">\n        <div className='flow-text'>Messages</div>\n        {\n          this.props.messages && (\n            this.props.messages.map((message, index) => {\n              return (\n                <Message \n                  key={index} \n                  color={message.type.color}\n                  backgroundColor={message.type.backgroundColor}\n                >\n                  {`${message.text}`}\n                </Message>\n              )\n            })\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default Messages;","import React from 'react';\nimport { SCREENS } from './constants';\nimport * as Engine from '../engine';\nimport * as Game from '../game';\nimport Information from '../UI/Information';\nimport Equipment from '../UI/Equipment';\nimport Inventory from '../UI/Inventory';\nimport KeymapUI from '../UI/Keymap';\nimport Messages from '../UI/Messages';\n\nclass Level extends React.Component {\n  constructor(props) {\n    super(props);\n    let ENGINE = new Engine.Engine({});\n    let actor = this.props.selectedCharacter.initialize(ENGINE);\n    ENGINE.actors.push(actor)\n    let game = new Game.Game({ engine: ENGINE })\n\n    this.state = {\n      game: game,\n      activeTab: 0,\n    };\n    this.presserRef = React.createRef();\n  }\n\n  async componentDidMount() {\n    this.state.game.initialize(this.presserRef, document)\n    this.state.game['backToTitle'] = () => this.props.setActiveScreen(SCREENS.TITLE);\n    this.state.game.updateReact = (newGameState) => { this.setState({game: newGameState}) }\n    this.state.game.engine.start()\n  }\n\n  render() {\n    let currentActor = this.state.game.engine.actors[this.state.game.engine.currentActor];\n    let data = [\n      {\n        label: 'Wave',\n        value: `Current: ${this.state.game.mode.data.level}, Highest: ${this.state.game.mode.data.highestLevel}`,\n      },\n    ];\n\n    data = data.concat(\n      [\n        ...this.state.game.engine.actors.map((actor, index) => {\n          let result = {\n            label: actor.name,\n            value: index,\n            value: `HP: ${actor.durability}, En/Sp: ${actor.energy}/${actor.speed}`,\n          };\n          if (index === this.state.game.engine.currentActor) {\n            result['color'] = 'red';\n          }\n          return result;\n        })\n      ]\n    )\n\n    return (\n      <div className=\"Level\">\n        <div className='flow-text'>Welcome to Beattyville</div>\n        <div className='row'>\n          <div className='col s8 game_display_container'>\n            {Game.DisplayElement(this.presserRef, Game.handleKeyPress, this.state.game.engine)}\n            <Information data={data} />\n          </div>\n          <div className='col s2'>\n            <KeymapUI keymap={this.state.game.visibleKeymap} />\n          </div>\n          <div className='col s2'>\n            <Equipment equipment={this.state.game.visibleEquipment} />\n            <Inventory inventory={this.state.game.visibleInventory} />\n          </div>\n          {\n            !this.state.game.visibleEquipment && !this.state.game.visibleInventory && (\n              <div className='col s2'>\n                <Messages messages={this.state.game.messages.slice(-15).reverse()} />\n              </div>\n            )\n          }\n          {/* <div className='col s2'>\n            <Messages messages={this.state.game.messages.slice(-15).reverse()} />\n          </div>\n          <div className='col s2'>\n            <Messages messages={this.state.game.messages} />\n          </div> */}\n        </div>\n        <button className='btn' onClick={() => this.props.setActiveScreen(SCREENS.TITLE)}>Quit</button>\n      </div>\n    );\n  }\n}\n\nexport default Level;\n","import React from 'react';\nimport { SCREENS } from './constants';\nconst CharacterSelect = (props) => {\n  return (\n    <div className='CharacterSelect'>\n      {\n        props.characters.map((character, index) => {\n          let color = '';\n          if (props.selectedCharacter) {\n            color = props.selectedCharacter.name === character.name ? 'red' : ''\n          }\n\n          return (\n            <button\n              key={index}\n              className={`CharacterSelect__button btn ${color}`}\n              onClick={() => {\n                props.setSelectedCharacter(character)\n                props.setActiveScreen(SCREENS.LEVEL)\n              }}\n            >\n              {character.name}\n            </button>\n          )\n        })\n      }\n    </div>\n  );\n}\n\nclass Title extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div className=\"Title\">\n        <div\n          style={{\n            width: '100vw',\n            height: '100vh',\n            backgroundColor: '#e2e2e2',\n          }}\n        >\n          <div class='flow-text grey-text'>Athel RL</div>\n          <CharacterSelect \n            characters={this.props.characters} \n            selectedCharacter={this.props.selectedCharacter} \n            setSelectedCharacter={this.props.setSelectedCharacter}\n            setActiveScreen={this.props.setActiveScreen}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Title;","import { ALPHABET, DIRECTIONS } from '../constants';\n\nexport const addAlphabeticallyToKeymap = (keymap, obj) => {\n  let alphabetAllowed = ALPHABET.filter((letter) => {\n    return !Object.keys(keymap).includes(letter);\n  });\n  keymap[alphabetAllowed[0]] = obj;\n}\n\nexport const deactivateUIKeymap = (engine, visibleUIKey) => {\n  let currentUiActor = engine.actors[engine.currentActor];\n  engine.game.removeActor(currentUiActor);\n  engine.game[visibleUIKey] = null;\n}\n\nexport const createFourDirectionMoveOptions = (moveFunction, engine, label = 'move') => {\n  return {\n    w: {\n      activate: () => moveFunction(DIRECTIONS.N, engine),\n      label: `${label} N`,\n    },\n    d: {\n      activate: () => moveFunction(DIRECTIONS.E, engine),\n      label: `${label} E`,\n    },\n    x: {\n      activate: () => moveFunction(DIRECTIONS.S, engine),\n      label: `${label} S`,\n    },\n    a: {\n      activate: () => moveFunction(DIRECTIONS.W, engine),\n      label: `${label} W`,\n    },\n  }\n}\n\nexport const createEightDirectionMoveOptions = (moveFunction, engine, label = 'move') => {\n  return {\n    w: {\n      activate: () => moveFunction(DIRECTIONS.N, engine),\n      label: `${label} N`,\n    },\n    e: {\n      activate: () => moveFunction(DIRECTIONS.NE, engine),\n      label: `${label} NE`,\n    },\n    d: {\n      activate: () => moveFunction(DIRECTIONS.E, engine),\n      label: `${label} E`,\n    },\n    c: {\n      activate: () => moveFunction(DIRECTIONS.SE, engine),\n      label: `${label} SE`,\n    },\n    x: {\n      activate: () => moveFunction(DIRECTIONS.S, engine),\n      label: `${label} S`,\n    },\n    z: {\n      activate: () => moveFunction(DIRECTIONS.SW, engine),\n      label: `${label} SW`,\n    },\n    a: {\n      activate: () => moveFunction(DIRECTIONS.W, engine),\n      label: `${label} W`,\n    },\n    q: {\n      activate: () => moveFunction(DIRECTIONS.NW, engine),\n      label: `${label} NW`,\n    },\n  }\n}","import * as Action from '../../actions';\nimport * as Constant from '../../constants';\nimport * as Item from '../../items';\nimport { UI_Actor } from '../../entites';\nimport { createEightDirectionMoveOptions } from '../helper';\n\nconst throwDirectionalKunai = (direction, engine, actor) => {\n  let kunai = actor.contains(Item.TYPE.DIRECTIONAL_KUNAI);\n  if (kunai) {\n    kunai.game = engine.game;\n    kunai.pos = {\n      x: actor.pos.x,\n      y: actor.pos.y,\n    };\n    kunai.direction = direction;\n    actor.removeFromContainer(kunai);\n    actor.setNextAction(\n      new Action.PlaceActor({\n        targetPos: { ...kunai.pos },\n        entity: kunai,\n        game: engine.game,\n        actor,\n        energyCost: Constant.ENERGY_THRESHOLD\n      })\n    )\n\n  } else {\n    console.log('I have no kunais left');\n  }\n}\n\nconst keymapCursorToThrowItem = (engine, initiatedBy, initialKeymap) => {\n  return {\n    ...createEightDirectionMoveOptions(\n      (direction, engine) => {\n        throwDirectionalKunai(direction, engine, initiatedBy);\n        initiatedBy.keymap = initialKeymap;\n      },\n      engine,\n      'throw',\n    )\n  }\n}\n\nexport const activateThrow = (engine) => {\n  let game = engine.game;\n  let currentActor = engine.actors[game.engine.currentActor]\n  let initialKeymap = currentActor.keymap;\n  currentActor.keymap = keymapCursorToThrowItem(engine, currentActor, initialKeymap);\n}","import { Move } from '../../actions';\nimport * as Constant from '../../constants';\n\nexport const walk = (direction, engine) => {\n  let actor = engine.actors[engine.currentActor];\n  let newX = actor.pos.x + direction[0];\n  let newY = actor.pos.y + direction[1];\n  actor.setNextAction(new Move({\n    targetPos: { x: newX, y: newY },\n    game: engine.game,\n    actor,\n    energyCost: Constant.ENERGY_THRESHOLD\n  }))\n}","// import deps\nimport * as Entity from '../entites';\nimport * as Keymap from '../Keymap';\nimport { createFourDirectionMoveOptions } from '../Keymap/helper';\n\nexport default function (engine) {\n  // define keymap\n  const keymap = (engine) => {\n    return {\n      ...createFourDirectionMoveOptions(Keymap.walk, engine),\n      // s: {\n      //   activate: () => Keymap.none(engine),\n      //   label: 'Stay',\n      // },\n      // DEV KEYS\n      // b: {\n      //   activate: () => Keymap.addBody(engine),\n      //   label: 'Add Body Part',\n      // },\n      // y: {\n      //   activate: () => Keymap.addActor(engine.game),\n      //   label: 'Add NPC',\n      // },\n    };\n  }\n  // instantiate class\n  let actor = new Entity.SnakePlayer({\n    pos: { x: 23, y: 7 },\n    renderer: {\n      character: 'A',\n      color: '#e6e6e6',\n      background: '#36635b',\n    },\n    name: 'Athel',\n    actions: [],\n    speed: 200,\n    durability: 10,\n    keymap: keymap(engine),\n  })\n\n  return actor;\n}","import Athel from './Athel';\n\nlet Characters = () => {\n  return {\n    Athel,\n  }\n}\n\nexport default Characters;","import React from 'react';\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group';\nimport { SCREENS } from './Screen/constants';\nimport Level from './Screen/Level';\nimport Title from './Screen/Title';\nimport Characters from './Characters/index';\n\nclass Nystrum extends React.Component {\n  constructor() {\n    super();\n    let characterKey = Characters();\n    let characters = Object.keys(characterKey).map((key, i) => {\n      return {\n        // [key]: characterKey[key],\n        initialize: characterKey[key],\n        selected: false,\n        name: key,\n      }\n    });\n    this.state = {\n      activeScreen: SCREENS.TITLE,\n      characters,\n      selectedCharacter: null,\n    };\n  }\n\n  setActiveScreen (activeScreen) {\n    this.setState({activeScreen})\n  }\n\n  setSelectedCharacter (character) {\n    this.setState({selectedCharacter: {...character}})\n  }\n\n  getActiveScreen () {\n    const titleScreen = <Title \n      key={SCREENS.TITLE} \n      setActiveScreen={this.setActiveScreen.bind(this)}\n      setSelectedCharacter={this.setSelectedCharacter.bind(this)}\n      selectedCharacter={this.state.selectedCharacter}\n      characters={this.state.characters}\n    />\n    const levelScreen = <Level \n      key={SCREENS.LEVEL} \n      setActiveScreen={this.setActiveScreen.bind(this)}\n      selectedCharacter={this.state.selectedCharacter}\n    />\n\n    switch (this.state.activeScreen) {\n      case SCREENS.TITLE:\n        return titleScreen\n      case SCREENS.LEVEL:\n        return levelScreen\n      default:\n        return titleScreen\n    }\n  }\n\n  render() {\n    const activeScreen = this.getActiveScreen();\n    return (\n      <div className=\"Nystrum\">\n        <ReactCSSTransitionGroup\n          transitionName=\"fade\"\n          transitionAppear={true}\n          transitionEnter={true}\n          transitionLeave={true}\n          transitionAppearTimeout={500}\n          transitionEnterTimeout={500}\n          transitionLeaveTimeout={300}\n        >\n          { activeScreen }\n        </ReactCSSTransitionGroup>\n      </div>\n    );\n  }\n}\n\nexport default Nystrum;\n","import * as ROT from 'rot-js';\n\nexport const TILE_KEY = () => {\n  return {\n    'GROUND': {\n      background: '#974',\n      foreground: '#aaa',\n      character: '.',\n      passable: true,\n    }\n  }\n}\n\n// RENDERING\n\nexport const DRAW = (map, display) => {\n  for (let key in map) {\n    let parts = key.split(\",\");\n    let x = parseInt(parts[0]);\n    let y = parseInt(parts[1]);\n    let tile = map[key];\n    let { character, foreground, background } = TILE_KEY()[tile.type]\n    if (tile.entities.length > 0) {\n      let entity = tile.entities[tile.entities.length - 1]\n      character = entity.components.renderer.character\n      foreground = entity.components.renderer.color\n      if (entity.components.renderer.background) {\n        background = entity.components.renderer.background\n      }\n    }\n    display.draw(x, y, character, foreground, background);\n  }\n}\n\n// END RENDERING\n\nexport const coordsToString = (coords) => `${coords.x},${coords.y}`\n\nexport const getImpassableEntities = (entities) => {\n  return entities.filter((e) => e.components.hasOwnProperty('impasse') && !e.components.impasse.passable)\n}\n\nexport const getDestructableEntities = (entities) => {\n  return entities.filter((e) => e.components.hasOwnProperty('destructible'))\n}\n\nexport const delay = (timeDelayed = 100) => {\n  return new Promise(resolve => setTimeout(resolve, timeDelayed));\n}\n\nexport const exampleEngine = () => {\n  let scheduler = new ROT.Scheduler.Simple();\n  let engine = new ROT.Engine(scheduler);\n  let output = [];\n  /* sample actor: pauses the execution when dead */\n  let actor = {\n    lives: 3,\n    act: function () {\n      let done = null;\n      let promise = {\n        then: function (cb) { done = cb; }\n      }\n\n      output.push(\".\");\n      // SHOW(output.join(\"\"));\n      console.log(output.join(\"\"));\n\n      this.lives--;\n\n      /* if alive, wait for 500ms for next turn */\n      if (this.lives) {\n        setTimeout(function () { done(); }, 500);\n      }\n\n      return promise;\n    }\n  }\n  scheduler.add(actor, true);\n  engine.start();\n}\n\nexport const getRandomInArray = (array) => {\n  return array[Math.floor(Math.random() * array.length)];\n}","import * as Helper from '../lib/helper';\n\nexport const createEntity = (id = null, name = 'Empty', components = {}, world) => {\n  let entity = {\n    id,\n    name,\n    components,\n    world,\n    sendEvent: (target, eventType, parameters) => sendEvent(target, eventType, parameters, world),\n  };\n  return entity\n}\n\nexport const sendEvent = async (target = null, eventType = null, parameters = null, world = null) => {\n  let success = false;\n  for (let key in target.components) {\n    let component = target.components[key]\n    if (component.hasOwnProperty(eventType)) {\n      console.log('SUCCESSFUL EVENT: ', eventType)\n      success = true\n      if (eventType !== 'PREPARE_RENDER') {\n        await Helper.delay();\n      }\n      component[eventType]({ ...parameters, self: target, component: component });\n      Helper.DRAW(world.map, world.display)\n    }\n  }\n  if (!success) {\n    console.log('FAILED EVENT')\n  }\n};","import * as Helper from '../lib/helper';\n\nexport const receiver = (pos) => {\n  return {\n    responded: false,\n    RECIEVE: (parameters) => {\n      let { self, component, message } = parameters\n      console.log(message, pos.x, pos.y)\n      if (!component.responded) {\n        component.responded = true\n        self.sendEvent(parameters.sender, 'hello', 'RECIEVE', { message: 'copy', sender: self })\n      }\n    }\n  }\n}\n\nexport const impasse = (passable = false) => {\n  return {\n    passable,\n    MAKE_PASSABLE: (parameters) => {\n      let { component } = parameters;\n      component.passable = true;\n    },\n    MAKE_IMPASSABLE: (parameters) => {\n      let { component } = parameters;\n      component.passable = false;\n    }\n  }\n}\n\nexport const body = (world, pos = { x: 0, y: 0 }) => {\n  if (world) {\n    return {\n      pos,\n      MOVE: (parameters) => {\n        let { self, component, currentPos, targetPos } = parameters\n        if (world.canOccupy(world.map, targetPos)) {\n          component.pos = targetPos\n          let tile = world.map[Helper.coordsToString(currentPos)]\n          world.map[Helper.coordsToString(currentPos)] = {...tile, entities: []}\n          self.sendEvent(self, 'PREPARE_RENDER')\n          // Helper.DRAW(world.map, world.display)\n        } else {\n          console.log('can\\'t move there')\n        }\n      }\n    }\n  }\n  console.log('No world to occupy');\n  return {}\n}\n\nexport const destructible = (world, durability = 1) => {\n  return {\n    durability,\n    DECREASE_DURABILITY: (parameters) => {\n      let { self, component, value } = parameters;\n      component.durability -= value\n      if (component.durability <= 0) {\n        self.sendEvent(self, 'DESTROY')\n      }\n    },\n    INCREASE_DURABILITY: (parameters) => {\n      let { component, value } = parameters;\n      component.durability += value\n    },\n    DESTROY: (parameters) => {\n      let { self, component, value } = parameters;\n      let tile = world.map[Helper.coordsToString(self.components.body.pos)];\n      world.map[Helper.coordsToString(self.components.body.pos)].entities = tile.entities.filter((e) => e.id !== self.id);\n      // self.sendEvent(self, 'PREPARE_RENDER')\n      // Helper.DRAW(world.map, world.display)\n    }\n  }\n}\n\nexport const attack = (damage = 1) => {\n  return {\n    damage,\n  }\n}\n\nexport const throwable = (world) => {\n  return {\n    THROW: (parameters) => {\n      let { self, component, direction } = parameters;\n      // if next tile is passable\n        // send move action to self\n        // send throw action to self\n      // else\n        // send decrease_durability to entity next in tile\n        // send decrease_durability to self\n      let currentPos = self.components.body.pos;\n      let nextPos = { x: currentPos.x + direction.x, y: currentPos.y + direction.y }\n      let nextTile = world.map[Helper.coordsToString(nextPos)];\n      if (world.canOccupy(world.map, nextPos)) { // change to check for target entity\n        self.sendEvent(\n          self, 'MOVE', {\n            currentPos: currentPos,\n            targetPos: nextPos\n          }\n        )\n        self.sendEvent(self, 'THROW', {direction});\n      } else {\n        if (world.map.hasOwnProperty(Helper.coordsToString(nextPos))) {\n          let impassable_and_destructable_entities = Helper.getDestructableEntities(Helper.getImpassableEntities(nextTile.entities))\n          if (impassable_and_destructable_entities.length > 0) {\n            self.sendEvent(impassable_and_destructable_entities[0], 'DECREASE_DURABILITY', { value: 1 });\n          }\n        }\n        self.sendEvent(self, 'DECREASE_DURABILITY', { value: 1 });\n      }\n    },\n  }\n}\n\nexport const renderer = (world, character = '', color = 'white', background = false) => {\n  return {\n    character,\n    color,\n    background,\n    PREPARE_RENDER: (parameters) => {\n      let { self } = parameters\n      if (self.components.hasOwnProperty('body')) {\n        world.map[Helper.coordsToString(self.components.body.pos)].entities.push(self)\n      }\n    }\n  }\n}","import React from 'react';\nimport '../App.css';\nimport * as ROT from 'rot-js';\nimport * as Entity from './lib/entity'\nimport * as Helper from './lib/helper'\nimport * as Components from './components/index'\n\nconst SHOW = (canvas) => {\n  let d = document.getElementById('display')\n  d.appendChild(canvas)\n}\n\nconst CREATE_LEVEL = (world) => {\n  let digger = new ROT.Map.Arena();\n  let freeCells = [];\n  let digCallback = function (x, y, value) {\n    if (value) { return; }\n    let key = x + \",\" + y;\n    world.map[key] = {\n      type: 'GROUND',\n      entities: [],\n    };\n    freeCells.push(key);\n  }\n  digger.create(digCallback.bind(this));\n}\n\nlet scheduler = new ROT.Scheduler.Simple()\nlet engine = new ROT.Engine(scheduler)\n\nlet world = {\n  canAct: true,\n  scheduler,\n  engine,\n  map: {},\n  display: new ROT.Display({ fontSize: 24, bg: '#099' }),\n  canOccupy: (map, pos) => {\n    if (map.hasOwnProperty(Helper.coordsToString(pos))) {\n      let tile = map[Helper.coordsToString(pos)];\n      if (Helper.TILE_KEY()[tile.type].passable && Helper.getImpassableEntities(tile.entities).length === 0) {\n        return true\n      }\n    } else {\n      return false\n    }\n  },\n}\n\nlet naruto = {\n  ...Entity.createEntity(1, 'Naruto', {\n    reciever: Components.receiver({ x: 10, y: 30 }),\n    body: Components.body(world, { x: 19, y: 21 }),\n    renderer: Components.renderer(world, 'N', 'orange', 'black'),\n  },\n    world,\n  ),\n}\n\nlet box = {\n  ...Entity.createEntity(2, 'Box', {\n    body: Components.body(world, { x: 22, y: 21 }),\n    renderer: Components.renderer(world, '#', 'black'),\n    impasse: Components.impasse(),\n    destructible: Components.destructible(world),\n  },\n    world,\n  )\n}\n\nlet box2 = {\n  ...Entity.createEntity(2, 'Box', {\n    body: Components.body(world, { x: 22, y: 19 }),\n    renderer: Components.renderer(world, '#', 'black'),\n    impasse: Components.impasse(),\n    destructible: Components.destructible(world),\n  },\n    world,\n  )\n}\n\nlet box3 = {\n  ...Entity.createEntity(2, 'Box', {\n    body: Components.body(world, { x: 22, y: 17 }),\n    renderer: Components.renderer(world, '#', 'black'),\n    impasse: Components.impasse(),\n    destructible: Components.destructible(world),\n  },\n    world,\n  )\n}\n\nlet kunai = {\n  ...Entity.createEntity(3, 'Kunai', {\n    body: Components.body(world, { x: 20, y: 21 }),\n    renderer: Components.renderer(world, '<>', 'black'),\n    destructible: Components.destructible(world),\n    attack: Components.attack(),\n    throwable: Components.throwable(world),\n  },\n    world,\n  )\n}\n\nclass Original extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.presserRef = React.createRef();\n  }\n\n  handleKeyPress = (event, world, entity) => {\n    let keymap = {\n      w: 0,\n      d: 1,\n      s: 2,\n      a: 3,\n    };\n\n    let code = event.key;\n    let dir = ROT.DIRS[4][keymap[code]];\n    if (code === 't') {\n      kunai.sendEvent(kunai, 'MOVE', {\n        currentPos: kunai.components.body.pos,\n        targetPos: {\n          x: entity.components.body.pos.x + 1,\n          y: entity.components.body.pos.y,\n        },\n      })\n      return kunai.sendEvent(kunai, 'THROW', { direction: { x: 1, y: 0 } })\n    }\n    if (!(code in keymap)) { return; }\n    let newX = entity.components.body.pos.x + dir[0];\n    let newY = entity.components.body.pos.y + dir[1];\n\n    entity.sendEvent(\n      entity, 'MOVE', {\n        currentPos: entity.components.body.pos,\n        targetPos: {\n          x: newX,\n          y: newY\n        }\n      }\n    )\n\n    return;\n    // return Helper.DRAW(world.map, world.display)\n\n  }\n\n  componentDidMount() {\n    ROT.RNG.setSeed(7);\n    SHOW(world.display.getContainer());\n    CREATE_LEVEL(world);\n    naruto.sendEvent(naruto, 'PREPARE_RENDER')\n    // kunai.sendEvent(kunai, 'PREPARE_RENDER')\n    box.sendEvent(box, 'PREPARE_RENDER')\n    box2.sendEvent(box2, 'PREPARE_RENDER')\n    box3.sendEvent(box3, 'PREPARE_RENDER')\n    Helper.DRAW(world.map, world.display)\n    this.presserRef.current.focus();\n  }\n\n  render() {\n    return (\n      <div className=\"App\" ref={this.presserRef} onKeyDown={(event) => this.handleKeyPress(event, world, naruto)} tabIndex='0'>\n        <div id='display'></div>\n      </div>\n    );\n  }\n}\n\nexport default Original;\n","import React from 'react';\nimport './App.css';\nimport Nystrum from './nystrum/Nystrum';\nimport Original from './original/Original';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App container-fluid\">\n        <Nystrum />\n        {/* <Original /> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}